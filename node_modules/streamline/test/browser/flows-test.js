(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],2:[function(require,module,exports){
(function (__filename){
"use strict";

/// !doc
/// 
/// # Global context API
/// 
/// The global `context` is a reference which is maintained across asynchronous calls.
/// 
/// This context is very handy to store information that all calls should be able to access
/// but that you don't want to pass explicitly via function parameters. The most obvious example is
/// the `locale` that each request may set differently and that your low level libraries should
/// be able to retrieve to format messages.
/// 
/// `var globals = require('streamline-runtime').globals`
/// 
/// * `globals.context = ctx`
/// * `ctx = globals.context`  
///   sets and gets the context
/// 
/// Note: an empty context (`{}`) is automatically set by the server wrappers of the `ez-streams` module,
/// before they dispatch a request. So, with these wrappers, each request starts with a fresh empty context.
// This module may be loaded several times so we need a true global (with a secret name!).
// This implementation also allows us to share the context between modules compiled in callback and fibers mode.

var util, flows; // cache for required modules

// API for typescript consumers
var futureModule = require('./lib/future');
exports._ = {
	future: function (thunk) {
		return futureModule(__filename, 0, null, thunk, 0, null, null, [false]);
	},
	promise: function (thunk) {
		return exports._.future(thunk).promise;
	},
	run: function (thunk, callback) {
		thunk(callback || function (err) { if (err) throw err; });
	},
	cast: function (fn) {
		return fn;
	},
};

// APIs that were in flows and globals before and that we are
// making directly available as _.funnel, _.collect, ...
['funnel', 'collect', 'withContext', 'handshake', 'queue', 'sleep', 'wait'].forEach(function (method) {
	Object.defineProperty(exports._, method, {
		get: function () {
			return (flows || (flows = require('./lib/flows')))[method];
		}
	});
});

Object.defineProperty(exports._, 'context', {
	get: function () {
		return (util || (util = require('./lib/util'))).getGlobals().context;
	}
	// do not export setter - use _.withContext
});

Object.defineProperty(exports._, 'runtime', {
	get: function () {
		return (util || (util = require('./lib/util'))).getGlobals().runtime || util.defaultRuntime();
	}
});

// Obsolete API that we don't advertize to typescript.
Object.defineProperty(exports, 'runtime', {
	get: function () {
		return (util || (util = require('./lib/util'))).getGlobals().runtime || util.defaultRuntime();
	}, set: function (value) {
		(util || (util = require('./lib/util'))).getGlobals(value);
	}
});

Object.defineProperty(exports, 'globals', {
	get: function () {
		return (util || (util = require('./lib/util'))).getGlobals();
	}
});

Object.defineProperty(exports, 'flows', {
	get: function () {
		return (flows || (flows = require('./lib/flows')));
	}
});

}).call(this,"/node_modules/streamline-runtime/index.js")
},{"./lib/flows":7,"./lib/future":8,"./lib/util":9}],3:[function(require,module,exports){
"use strict";

var regeneratorRuntime = typeof require === 'function' ? require("streamline-runtime/lib/callbacks/regenerator") : Streamline.require("streamline-runtime/lib/callbacks/regenerator");

var _streamline = typeof require === 'function' ? require("streamline-runtime/lib/callbacks/runtime") : Streamline.require("streamline-runtime/lib/callbacks/runtime");

var _filename = "builtins._js";
/**
 * Copyright (c) 2012 Bruno Jouhier <bruno.jouhier@sage.com>
 * MIT License
 */
/// !doc
/// 
/// # Streamline built-ins
///  
(function (exports) {
	var _parallel = function _parallel(options) {
		if (typeof options === "number") return options;
		if (typeof options.parallel === "number") return options.parallel;
		return options.parallel ? -1 : 1;
	};

	var VERSION = 3;

	var future = function future(fn, args, i) {
		var err,
		    result,
		    done,
		    q = [],
		    self = this;
		args = Array.prototype.slice.call(args);
		args[i] = function (e, r) {
			err = e;
			result = r;
			done = true;
			q && q.forEach(function (f) {
				f.call(self, e, r);
			});
			q = null;
		};
		fn.apply(this, args);
		return function F(cb) {
			if (!cb) return F;
			if (done) cb.call(self, err, result);else q.push(cb);
		};
	};

	var funnel = function funnel(max) {
		var _doOne = function _doOne() {
			var current = queue.shift();
			if (!current.cb) return current.fn();
			active++;
			current.fn(function (err, result) {
				active--;
				if (!closed) {
						current.cb(err, result);
						while (active < max && queue.length > 0) {
							_doOne();
						}
					}
			});
		};

		var overflow = function overflow(callback, fn) {
			queue.push({
				fn: fn,
				cb: callback
			});
		};

		max = max == null ? -1 : max;
		if (max === 0) max = exports.funnel.defaultSize;
		if (typeof max !== "number") throw new Error("bad max number: " + max);
		var queue = [],
		    active = 0,
		    closed = false;

		var fun = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$(_2, fn) {
			return regeneratorRuntime.wrap(function _$$$$$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							if (!(max < 0 || max === Infinity)) {
									_context.next = 4;
									break;
								}

							_context.next = 3;
							return _streamline.await(_filename, 64, null, fn, 0, null, false, [true]);

						case 3:
							return _context.abrupt("return", _context.sent);

						case 4:
							if (!(active < max)) {
									_context.next = 16;
									break;
								}

							active++;
							_context.prev = 6;
							_context.next = 9;
							return _streamline.await(_filename, 69, null, fn, 0, null, false, [true]);

						case 9:
							return _context.abrupt("return", _context.sent);

						case 10:
							_context.prev = 10;

							active--;
							while (active < max && queue.length > 0) {
								_doOne();
							}return _context.finish(10);

						case 14:
							_context.next = 19;
							break;

						case 16:
							_context.next = 18;
							return _streamline.await(_filename, 75, null, overflow, 0, null, false, [true, fn]);

						case 18:
							return _context.abrupt("return", _context.sent);

						case 19:
						case "end":
							return _context.stop();
					}
				}
			}, _$$$$, this, [[6,, 10, 14]]);
		}), 0, 2);

		fun.close = function () {
			queue = [];
			closed = true;
		};
		return fun;
	};
	funnel.defaultSize = 4;

	exports.funnel = funnel;

	if (Array.prototype.forEach_ && Array.prototype.forEach_.version_ >= VERSION) return;

	// bail out (silently) if JS does not support defineProperty (IE 8).
	try {
		Object.defineProperty({}, 'x', {});
	} catch (e) {
		return;
	}

	var has = Object.prototype.hasOwnProperty;

	/* eslint-disable no-extend-native */

	/// ## Array functions  
	/// 
	/// These functions are asynchronous variants of the EcmaScript 5 Array functions.
	/// 
	/// Common Rules: 
	/// 
	/// These variants are postfixed by an underscore.  
	/// They take the `_` callback as first parameter.  
	/// They pass the `_` callback as first argument to their `fn` callback.  
	/// Most of them have an optional `options` second parameter which controls the level of 
	/// parallelism. This `options` parameter may be specified either as `{ parallel: par }` 
	/// where `par` is an integer, or directly as a `par` integer value.  
	/// The `par` values are interpreted as follows:
	/// 
	/// * If absent or equal to 1, execution is sequential.
	/// * If > 1, at most `par` operations are parallelized.
	/// * if 0, a default number of operations are parallelized. 
	///   This default is defined by `flows.funnel.defaultSize` (4 by default - see `flows` module).
	/// * If < 0 or Infinity, operations are fully parallelized (no limit).
	/// 
	/// Functions:
	/// 
	/// * `array.forEach_(_[, options], fn[, thisObj])`  
	///   `fn` is called as `fn(_, elt, i, array)`.
	delete Array.prototype.forEach_;
	Object.defineProperty(Array.prototype, 'forEach_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$(_3, options, fn, thisObj) {
			var par, len, i;
			return regeneratorRuntime.wrap(function _$$value$$$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							if (typeof options === "function") {
									thisObj = fn;
									fn = options;
									options = 1;
								}
							par = _parallel(options);

							thisObj = thisObj !== undefined ? thisObj : this;
							len = this.length;

							if (!(par === 1 || len <= 1)) {
									_context2.next = 15;
									break;
								}

							i = 0;

						case 6:
							if (!(i < len)) {
									_context2.next = 13;
									break;
								}

							if (!has.call(this, i)) {
									_context2.next = 10;
									break;
								}

							_context2.next = 10;
							return _streamline.await(_filename, 148, fn, "call", 1, null, false, [thisObj, true, this[i], i, this]);

						case 10:
							i++;
							_context2.next = 6;
							break;

						case 13:
							_context2.next = 17;
							break;

						case 15:
							_context2.next = 17;
							return _streamline.await(_filename, 151, this, "map_", 0, null, false, [true, par, fn, thisObj]);

						case 17:
							return _context2.abrupt("return", this);

						case 18:
						case "end":
							return _context2.stop();
					}
				}
			}, _$$value$$, this);
		}), 0, 4)
	});
	Array.prototype.forEach_.version_ = VERSION;
	/// * `result = array.map_(_[, options], fn[, thisObj])`  
	///   `fn` is called as `fn(_, elt, i, array)`.
	delete Array.prototype.map_;
	Object.defineProperty(Array.prototype, 'map_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$2(_4, options, fn, thisObj) {
			var _this = this;

			var par, len, result, i, futures, j;
			return regeneratorRuntime.wrap(function _$$value$$2$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							if (typeof options === "function") {
									thisObj = fn;
									fn = options;
									options = 1;
								}
							par = _parallel(options);

							thisObj = thisObj !== undefined ? thisObj : this;
							len = this.length;

							if (!(par === 1 || len <= 1)) {
									_context4.next = 17;
									break;
								}

							result = new Array(len);
							i = 0;

						case 7:
							if (!(i < len)) {
									_context4.next = 15;
									break;
								}

							if (!has.call(this, i)) {
									_context4.next = 12;
									break;
								}

							_context4.next = 11;
							return _streamline.await(_filename, 177, fn, "call", 1, null, false, [thisObj, true, this[i], i, this]);

						case 11:
							result[i] = _context4.sent;

						case 12:
							i++;
							_context4.next = 7;
							break;

						case 15:
							_context4.next = 30;
							break;

						case 17:
							futures = [];

							i = 0;
							result = new Array(len);
							if (par <= 0) par = len;
							// cap with a hard limit to avoid memory issue with fibers
							par = Math.min(par, 256);
							for (j = 0; j < par; j++) {
								futures[j] = _streamline.future(_filename, 186, null, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$2(_5) {
									var k;
									return regeneratorRuntime.wrap(function _$$$$2$(_context3) {
										while (1) {
											switch (_context3.prev = _context3.next) {
												case 0:
													if (!(i < _this.length)) {
															_context3.next = 8;
															break;
														}

													k = i++;

													if (!has.call(_this, k)) {
															_context3.next = 6;
															break;
														}

													_context3.next = 5;
													return _streamline.await(_filename, 189, fn, "call", 1, null, false, [thisObj, true, _this[k], k, _this]);

												case 5:
													result[k] = _context3.sent;

												case 6:
													_context3.next = 0;
													break;

												case 8:
												case "end":
													return _context3.stop();
											}
										}
									}, _$$$$2, _this);
								}), 0, 1), 0, null, false, [false]);
							}j = 0;

						case 24:
							if (!(j < par)) {
									_context4.next = 30;
									break;
								}

							_context4.next = 27;
							return _streamline.await(_filename, 192, futures, j, 0, null, false, [true]);

						case 27:
							j++;
							_context4.next = 24;
							break;

						case 30:
							return _context4.abrupt("return", result);

						case 31:
						case "end":
							return _context4.stop();
					}
				}
			}, _$$value$$2, this);
		}), 0, 4)
	});
	/// * `result = array.filter_(_[, options], fn[, thisObj])`  
	///   `fn` is called as `fn(_, elt, i, array)`.
	delete Array.prototype.filter_;
	Object.defineProperty(Array.prototype, 'filter_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$3(_6, options, fn, thisObj) {
			var par, result, len, i, elt;
			return regeneratorRuntime.wrap(function _$$value$$3$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							if (typeof options === "function") {
									thisObj = fn;
									fn = options;
									options = 1;
								}
							par = _parallel(options);

							thisObj = thisObj !== undefined ? thisObj : this;
							result = [];
							len = this.length;

							if (!(par === 1 || len <= 1)) {
									_context6.next = 19;
									break;
								}

							i = 0;

						case 7:
							if (!(i < len)) {
									_context6.next = 17;
									break;
								}

							if (!has.call(this, i)) {
									_context6.next = 14;
									break;
								}

							elt = this[i];
							_context6.next = 12;
							return _streamline.await(_filename, 218, fn, "call", 1, null, false, [thisObj, true, elt, i, this]);

						case 12:
							if (!_context6.sent) {
									_context6.next = 14;
									break;
								}

							result.push(elt);

						case 14:
							i++;
							_context6.next = 7;
							break;

						case 17:
							_context6.next = 21;
							break;

						case 19:
							_context6.next = 21;
							return _streamline.await(_filename, 222, this, "map_", 0, null, false, [true, par, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$3(_7, elt, i, arr) {
								return regeneratorRuntime.wrap(function _$$$$3$(_context5) {
									while (1) {
										switch (_context5.prev = _context5.next) {
											case 0:
												_context5.next = 2;
												return _streamline.await(_filename, 223, fn, "call", 1, null, false, [thisObj, true, elt, i, arr]);

											case 2:
												if (!_context5.sent) {
														_context5.next = 4;
														break;
													}

												result.push(elt);

											case 4:
											case "end":
												return _context5.stop();
										}
									}
								}, _$$$$3, this);
							}), 0, 4), thisObj]);

						case 21:
							return _context6.abrupt("return", result);

						case 22:
						case "end":
							return _context6.stop();
					}
				}
			}, _$$value$$3, this);
		}), 0, 4)
	});
	/// * `bool = array.every_(_[, options], fn[, thisObj])`  
	///   `fn` is called as `fn(_, elt, i, array)`.
	delete Array.prototype.every_;
	Object.defineProperty(Array.prototype, 'every_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$4(_8, options, fn, thisObj) {
			var par, len, i, fun, futures;
			return regeneratorRuntime.wrap(function _$$value$$4$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							if (typeof options === "function") {
									thisObj = fn;
									fn = options;
									options = 1;
								}
							par = _parallel(options);

							thisObj = thisObj !== undefined ? thisObj : this;
							len = this.length;

							if (!(par === 1 || len <= 1)) {
									_context8.next = 19;
									break;
								}

							i = 0;

						case 6:
							if (!(i < len)) {
									_context8.next = 17;
									break;
								}

							_context8.t0 = has.call(this, i);

							if (!_context8.t0) {
									_context8.next = 12;
									break;
								}

							_context8.next = 11;
							return _streamline.await(_filename, 248, fn, "call", 1, null, false, [thisObj, true, this[i], i, this]);

						case 11:
							_context8.t0 = !_context8.sent;

						case 12:
							if (!_context8.t0) {
									_context8.next = 14;
									break;
								}

							return _context8.abrupt("return", false);

						case 14:
							i++;
							_context8.next = 6;
							break;

						case 17:
							_context8.next = 34;
							break;

						case 19:
							fun = funnel(par);
							futures = this.map(function (elt, i, arr) {
								return _streamline.future(_filename, 253, null, fun, 0, null, false, [false, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$4(_9) {
									return regeneratorRuntime.wrap(function _$$$$4$(_context7) {
										while (1) {
											switch (_context7.prev = _context7.next) {
												case 0:
													_context7.next = 2;
													return _streamline.await(_filename, 254, fn, "call", 1, null, false, [thisObj, true, elt, i, arr]);

												case 2:
													return _context7.abrupt("return", _context7.sent);

												case 3:
												case "end":
													return _context7.stop();
											}
										}
									}, _$$$$4, this);
								}), 0, 1)]);
							});
							i = 0;

						case 22:
							if (!(i < len)) {
									_context8.next = 34;
									break;
								}

							_context8.t1 = has.call(this, i);

							if (!_context8.t1) {
									_context8.next = 28;
									break;
								}

							_context8.next = 27;
							return _streamline.await(_filename, 258, futures, i, 0, null, false, [true]);

						case 27:
							_context8.t1 = !_context8.sent;

						case 28:
							if (!_context8.t1) {
									_context8.next = 31;
									break;
								}

							fun.close();
							return _context8.abrupt("return", false);

						case 31:
							i++;
							_context8.next = 22;
							break;

						case 34:
							return _context8.abrupt("return", true);

						case 35:
						case "end":
							return _context8.stop();
					}
				}
			}, _$$value$$4, this);
		}), 0, 4)
	});
	/// * `bool = array.some_(_[, options], fn[, thisObj])`  
	///   `fn` is called as `fn(_, elt, i, array)`.
	delete Array.prototype.some_;
	Object.defineProperty(Array.prototype, 'some_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$5(_10, options, fn, thisObj) {
			var par, len, i, fun, futures;
			return regeneratorRuntime.wrap(function _$$value$$5$(_context10) {
				while (1) {
					switch (_context10.prev = _context10.next) {
						case 0:
							if (typeof options === "function") {
									thisObj = fn;
									fn = options;
									options = 1;
								}
							par = _parallel(options);

							thisObj = thisObj !== undefined ? thisObj : this;
							len = this.length;

							if (!(par === 1 || len <= 1)) {
									_context10.next = 19;
									break;
								}

							i = 0;

						case 6:
							if (!(i < len)) {
									_context10.next = 17;
									break;
								}

							_context10.t0 = has.call(this, i);

							if (!_context10.t0) {
									_context10.next = 12;
									break;
								}

							_context10.next = 11;
							return _streamline.await(_filename, 285, fn, "call", 1, null, false, [thisObj, true, this[i], i, this]);

						case 11:
							_context10.t0 = _context10.sent;

						case 12:
							if (!_context10.t0) {
									_context10.next = 14;
									break;
								}

							return _context10.abrupt("return", true);

						case 14:
							i++;
							_context10.next = 6;
							break;

						case 17:
							_context10.next = 34;
							break;

						case 19:
							fun = funnel(par);
							futures = this.map(function (elt, i, arr) {
								return _streamline.future(_filename, 290, null, fun, 0, null, false, [false, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$5(_11) {
									return regeneratorRuntime.wrap(function _$$$$5$(_context9) {
										while (1) {
											switch (_context9.prev = _context9.next) {
												case 0:
													_context9.next = 2;
													return _streamline.await(_filename, 291, fn, "call", 1, null, false, [thisObj, true, elt, i, arr]);

												case 2:
													return _context9.abrupt("return", _context9.sent);

												case 3:
												case "end":
													return _context9.stop();
											}
										}
									}, _$$$$5, this);
								}), 0, 1)]);
							});
							i = 0;

						case 22:
							if (!(i < len)) {
									_context10.next = 34;
									break;
								}

							_context10.t1 = has.call(this, i);

							if (!_context10.t1) {
									_context10.next = 28;
									break;
								}

							_context10.next = 27;
							return _streamline.await(_filename, 295, futures, i, 0, null, false, [true]);

						case 27:
							_context10.t1 = _context10.sent;

						case 28:
							if (!_context10.t1) {
									_context10.next = 31;
									break;
								}

							fun.close();
							return _context10.abrupt("return", true);

						case 31:
							i++;
							_context10.next = 22;
							break;

						case 34:
							return _context10.abrupt("return", false);

						case 35:
						case "end":
							return _context10.stop();
					}
				}
			}, _$$value$$5, this);
		}), 0, 4)
	});
	/// * `result = array.reduce_(_, fn, val[, thisObj])`  
	///   `fn` is called as `val = fn(_, val, elt, i, array)`.
	delete Array.prototype.reduce_;
	Object.defineProperty(Array.prototype, 'reduce_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$6(_12, fn, v, thisObj) {
			var len, i;
			return regeneratorRuntime.wrap(function _$$value$$6$(_context11) {
				while (1) {
					switch (_context11.prev = _context11.next) {
						case 0:
							thisObj = thisObj !== undefined ? thisObj : this;
							len = this.length;
							i = 0;

						case 3:
							if (!(i < len)) {
									_context11.next = 11;
									break;
								}

							if (!has.call(this, i)) {
									_context11.next = 8;
									break;
								}

							_context11.next = 7;
							return _streamline.await(_filename, 315, fn, "call", 1, null, false, [thisObj, true, v, this[i], i, this]);

						case 7:
							v = _context11.sent;

						case 8:
							i++;
							_context11.next = 3;
							break;

						case 11:
							return _context11.abrupt("return", v);

						case 12:
						case "end":
							return _context11.stop();
					}
				}
			}, _$$value$$6, this);
		}), 0, 4)
	});
	/// * `result = array.reduceRight_(_, fn, val[, thisObj])`  
	///   `fn` is called as `val = fn(_, val, elt, i, array)`.
	delete Array.prototype.reduceRight_;
	Object.defineProperty(Array.prototype, 'reduceRight_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$7(_13, fn, v, thisObj) {
			var len, i;
			return regeneratorRuntime.wrap(function _$$value$$7$(_context12) {
				while (1) {
					switch (_context12.prev = _context12.next) {
						case 0:
							thisObj = thisObj !== undefined ? thisObj : this;
							len = this.length;
							i = len - 1;

						case 3:
							if (!(i >= 0)) {
									_context12.next = 11;
									break;
								}

							if (!has.call(this, i)) {
									_context12.next = 8;
									break;
								}

							_context12.next = 7;
							return _streamline.await(_filename, 331, fn, "call", 1, null, false, [thisObj, true, v, this[i], i, this]);

						case 7:
							v = _context12.sent;

						case 8:
							i--;
							_context12.next = 3;
							break;

						case 11:
							return _context12.abrupt("return", v);

						case 12:
						case "end":
							return _context12.stop();
					}
				}
			}, _$$value$$7, this);
		}), 0, 4)
	});

	/// * `array = array.sort_(_, compare [, beg [, end]])`  
	///   `compare` is called as `cmp = compare(_, elt1, elt2)`.  
	///   Note: this function _changes_ the original array (and returns it).
	delete Array.prototype.sort_;
	Object.defineProperty(Array.prototype, 'sort_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$8(_14, compare, beg, end) {
			var _qsort, array;

			return regeneratorRuntime.wrap(function _$$value$$8$(_context14) {
				while (1) {
					switch (_context14.prev = _context14.next) {
						case 0:
							_qsort = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$_qsort$$(_15, beg, end) {
								var tmp, mid, o, nbeg, nend;
								return regeneratorRuntime.wrap(function _$$_qsort$$$(_context13) {
									while (1) {
										switch (_context13.prev = _context13.next) {
											case 0:
												if (!(beg >= end)) {
														_context13.next = 2;
														break;
													}

												return _context13.abrupt("return");

											case 2:
												if (!(end === beg + 1)) {
														_context13.next = 11;
														break;
													}

												_context13.next = 5;
												return _streamline.await(_filename, 355, null, compare, 0, null, false, [true, array[beg], array[end]]);

											case 5:
												_context13.t0 = _context13.sent;

												if (!(_context13.t0 > 0)) {
														_context13.next = 10;
														break;
													}

												tmp = array[beg];
												array[beg] = array[end];
												array[end] = tmp;

											case 10:
												return _context13.abrupt("return");

											case 11:
												mid = Math.floor((beg + end) / 2);
												o = array[mid];
												nbeg = beg;
												nend = end;

											case 15:
												if (!(nbeg <= nend)) {
														_context13.next = 39;
														break;
													}

											case 16:
												_context13.t1 = nbeg < end;

												if (!_context13.t1) {
														_context13.next = 22;
														break;
													}

												_context13.next = 20;
												return _streamline.await(_filename, 369, null, compare, 0, null, false, [true, array[nbeg], o]);

											case 20:
												_context13.t2 = _context13.sent;
												_context13.t1 = _context13.t2 < 0;

											case 22:
												if (!_context13.t1) {
														_context13.next = 26;
														break;
													}

												nbeg++;
												_context13.next = 16;
												break;

											case 26:
												_context13.t3 = beg < nend;

												if (!_context13.t3) {
														_context13.next = 32;
														break;
													}

												_context13.next = 30;
												return _streamline.await(_filename, 370, null, compare, 0, null, false, [true, o, array[nend]]);

											case 30:
												_context13.t4 = _context13.sent;
												_context13.t3 = _context13.t4 < 0;

											case 32:
												if (!_context13.t3) {
														_context13.next = 36;
														break;
													}

												nend--;

												_context13.next = 26;
												break;

											case 36:
												if (nbeg <= nend) {
														tmp = array[nbeg];
														array[nbeg] = array[nend];
														array[nend] = tmp;
														nbeg++;
														nend--;
													}
												_context13.next = 15;
												break;

											case 39:
												if (!(nbeg < end)) {
														_context13.next = 42;
														break;
													}

												_context13.next = 42;
												return _streamline.await(_filename, 381, null, _qsort, 0, null, false, [true, nbeg, end]);

											case 42:
												if (!(beg < nend)) {
														_context13.next = 45;
														break;
													}

												_context13.next = 45;
												return _streamline.await(_filename, 382, null, _qsort, 0, null, false, [true, beg, nend]);

											case 45:
											case "end":
												return _context13.stop();
										}
									}
								}, _$$_qsort$$, this);
							}), 0, 3);
							array = this;

							beg = beg || 0;
							end = end == null ? array.length - 1 : end;

							_context14.next = 6;
							return _streamline.await(_filename, 384, null, _qsort, 0, null, false, [true, beg, end]);

						case 6:
							return _context14.abrupt("return", array);

						case 7:
						case "end":
							return _context14.stop();
					}
				}
			}, _$$value$$8, this);
		}), 0, 4)
	});

	/// 
	/// ## Function functions  
	/// 
	/// * `result = fn.apply_(_, thisObj, args[, index])`  
	///   Helper to use `Function.prototype.apply` inside streamlined functions.  
	///   Equivalent to `result = fn.apply(thisObj, argsWith_)` where `argsWith_` is 
	///   a modified `args` in which the callback has been inserted at `index` 
	///   (at the end of the argument list if `index` is omitted or negative).
	delete Function.prototype.apply_;
	Object.defineProperty(Function.prototype, 'apply_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: function value(callback, thisObj, args, index) {
			args = Array.prototype.slice.call(args, 0);
			args.splice(index != null && index >= 0 ? index : args.length, 0, callback);
			return this.apply(thisObj, args);
		}
	});
})(typeof exports !== 'undefined' ? exports : Streamline.builtins = Streamline.builtins || {});
},{"streamline-runtime/lib/callbacks/regenerator":5,"streamline-runtime/lib/callbacks/runtime":6}],4:[function(require,module,exports){
(function (process,setImmediate){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var regeneratorRuntime = typeof require === 'function' ? require("streamline-runtime/lib/callbacks/regenerator") : Streamline.require("streamline-runtime/lib/callbacks/regenerator");

var _streamline = typeof require === 'function' ? require("streamline-runtime/lib/callbacks/runtime") : Streamline.require("streamline-runtime/lib/callbacks/runtime");

var _filename = "flows._js";
/**
 * Copyright (c) 2011 Bruno Jouhier <bruno.jouhier@sage.com>
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
/// !doc
/// 
/// # Control Flow utilities
///  
/// `var flows = require('streamline-runtime').flows`
/// 
(function (exports) {
	var globals = require('../util').getGlobals();

	/// !nodoc
	/// Obsolete API
	/// 
	/// This API is obsolete. Use `array.forEach_`, `array.map_`, ... instead.
	/// 
	/// * `flows.each(_, array, fn, [thisObj])`  
	///   applies `fn` sequentially to the elements of `array`.  
	///   `fn` is called as `fn(_, elt, i)`.
	exports.each = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$(_2, array, fn, thisObj) {
		return regeneratorRuntime.wrap(function _$$$$$(_context) {
			while (1) {
				switch (_context.prev = _context.next) {
					case 0:
						if (!(array && array.length)) {
								_context.next = 6;
								break;
							}

						_context.next = 3;
						return _streamline.await(_filename, 45, array, "forEach_", 0, null, false, [true, fn, thisObj]);

					case 3:
						_context.t0 = _context.sent;
						_context.next = 7;
						break;

					case 6:
						_context.t0 = undefined;

					case 7:
						return _context.abrupt("return", _context.t0);

					case 8:
					case "end":
						return _context.stop();
				}
			}
		}, _$$$$, this);
	}), 0, 4);
	/// * `result = flows.map(_, array, fn, [thisObj])`  
	///   transforms `array` by applying `fn` to each element in turn.  
	///   `fn` is called as `fn(_, elt, i)`.
	exports.map = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$2(_3, array, fn, thisObj) {
		return regeneratorRuntime.wrap(function _$$$$2$(_context2) {
			while (1) {
				switch (_context2.prev = _context2.next) {
					case 0:
						if (!array) {
								_context2.next = 6;
								break;
							}

						_context2.next = 3;
						return _streamline.await(_filename, 51, array, "map_", 0, null, false, [true, fn, thisObj]);

					case 3:
						_context2.t0 = _context2.sent;
						_context2.next = 7;
						break;

					case 6:
						_context2.t0 = array;

					case 7:
						return _context2.abrupt("return", _context2.t0);

					case 8:
					case "end":
						return _context2.stop();
				}
			}
		}, _$$$$2, this);
	}), 0, 4);
	/// * `result = flows.filter(_, array, fn, [thisObj])`  
	///   generates a new array that only contains the elements that satisfy the `fn` predicate.  
	///   `fn` is called as `fn(_, elt)`.
	exports.filter = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$3(_4, array, fn, thisObj) {
		return regeneratorRuntime.wrap(function _$$$$3$(_context3) {
			while (1) {
				switch (_context3.prev = _context3.next) {
					case 0:
						if (!array) {
								_context3.next = 6;
								break;
							}

						_context3.next = 3;
						return _streamline.await(_filename, 57, array, "filter_", 0, null, false, [true, fn, thisObj]);

					case 3:
						_context3.t0 = _context3.sent;
						_context3.next = 7;
						break;

					case 6:
						_context3.t0 = array;

					case 7:
						return _context3.abrupt("return", _context3.t0);

					case 8:
					case "end":
						return _context3.stop();
				}
			}
		}, _$$$$3, this);
	}), 0, 4);
	/// * `bool = flows.every(_, array, fn, [thisObj])`  
	///   returns true if `fn` is true on every element (if `array` is empty too).  
	///   `fn` is called as `fn(_, elt)`.
	exports.every = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$4(_5, array, fn, thisObj) {
		return regeneratorRuntime.wrap(function _$$$$4$(_context4) {
			while (1) {
				switch (_context4.prev = _context4.next) {
					case 0:
						if (!array) {
								_context4.next = 6;
								break;
							}

						_context4.next = 3;
						return _streamline.await(_filename, 63, array, "every_", 0, null, false, [true, fn, thisObj]);

					case 3:
						_context4.t0 = _context4.sent;
						_context4.next = 7;
						break;

					case 6:
						_context4.t0 = undefined;

					case 7:
						return _context4.abrupt("return", _context4.t0);

					case 8:
					case "end":
						return _context4.stop();
				}
			}
		}, _$$$$4, this);
	}), 0, 4);
	/// * `bool = flows.some(_, array, fn, [thisObj])`  
	///   returns true if `fn` is true for at least one element.  
	///   `fn` is called as `fn(_, elt)`.
	exports.some = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$5(_6, array, fn, thisObj) {
		return regeneratorRuntime.wrap(function _$$$$5$(_context5) {
			while (1) {
				switch (_context5.prev = _context5.next) {
					case 0:
						if (!array) {
								_context5.next = 6;
								break;
							}

						_context5.next = 3;
						return _streamline.await(_filename, 69, array, "some_", 0, null, false, [true, fn, thisObj]);

					case 3:
						_context5.t0 = _context5.sent;
						_context5.next = 7;
						break;

					case 6:
						_context5.t0 = undefined;

					case 7:
						return _context5.abrupt("return", _context5.t0);

					case 8:
					case "end":
						return _context5.stop();
				}
			}
		}, _$$$$5, this);
	}), 0, 4);
	/// * `result = flows.reduce(_, array, fn, val, [thisObj])`  
	///   reduces by applying `fn` to each element.  
	///   `fn` is called as `val = fn(_, val, elt, i, array)`.
	exports.reduce = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$6(_7, array, fn, v, thisObj) {
		return regeneratorRuntime.wrap(function _$$$$6$(_context6) {
			while (1) {
				switch (_context6.prev = _context6.next) {
					case 0:
						if (!array) {
								_context6.next = 6;
								break;
							}

						_context6.next = 3;
						return _streamline.await(_filename, 75, array, "reduce_", 0, null, false, [true, fn, v, thisObj]);

					case 3:
						_context6.t0 = _context6.sent;
						_context6.next = 7;
						break;

					case 6:
						_context6.t0 = v;

					case 7:
						return _context6.abrupt("return", _context6.t0);

					case 8:
					case "end":
						return _context6.stop();
				}
			}
		}, _$$$$6, this);
	}), 0, 5);
	/// * `result = flows.reduceRight(_, array, fn, val, [thisObj])`  
	///   reduces from end to start by applying `fn` to each element.  
	///   `fn` is called as `val = fn(_, val, elt, i, array)`.
	exports.reduceRight = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$7(_8, array, fn, v, thisObj) {
		return regeneratorRuntime.wrap(function _$$$$7$(_context7) {
			while (1) {
				switch (_context7.prev = _context7.next) {
					case 0:
						if (!array) {
								_context7.next = 6;
								break;
							}

						_context7.next = 3;
						return _streamline.await(_filename, 81, array, "reduceRight_", 0, null, false, [true, fn, v, thisObj]);

					case 3:
						_context7.t0 = _context7.sent;
						_context7.next = 7;
						break;

					case 6:
						_context7.t0 = v;

					case 7:
						return _context7.abrupt("return", _context7.t0);

					case 8:
					case "end":
						return _context7.stop();
				}
			}
		}, _$$$$7, this);
	}), 0, 5);

	/// * `array = flows.sort(_, array, compare, [beg], [end])`  
	///   sorts the array.  
	///   `compare` is called as `cmp = compare(_, elt1, elt2)`
	///   
	///   Note: this function _changes_ the original array (and returns it)
	exports.sort = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$8(_9, array, compare, beg, end) {
		return regeneratorRuntime.wrap(function _$$$$8$(_context8) {
			while (1) {
				switch (_context8.prev = _context8.next) {
					case 0:
						if (!array) {
								_context8.next = 6;
								break;
							}

						_context8.next = 3;
						return _streamline.await(_filename, 90, array, "sort_", 0, null, false, [true, compare, beg, end]);

					case 3:
						_context8.t0 = _context8.sent;
						_context8.next = 7;
						break;

					case 6:
						_context8.t0 = array;

					case 7:
						return _context8.abrupt("return", _context8.t0);

					case 8:
					case "end":
						return _context8.stop();
				}
			}
		}, _$$$$8, this);
	}), 0, 5);
	/// 
	/// ## Object utility (obsolete)
	/// 
	/// This API is obsolete. Use `Object.keys(obj).forEach_` instead.
	/// 
	/// * `flows.eachKey(_, obj, fn)`  
	///   calls `fn(_, key, obj[key])` for every `key` in `obj`.
	exports.eachKey = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$9(_10, obj, fn, thisObj) {
		return regeneratorRuntime.wrap(function _$$$$9$(_context10) {
			while (1) {
				switch (_context10.prev = _context10.next) {
					case 0:
						_context10.next = 2;
						return _streamline.await(_filename, 100, obj ? Object.keys(obj) : [], "forEach_", 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$10(_11, elt) {
							return regeneratorRuntime.wrap(function _$$$$10$(_context9) {
								while (1) {
									switch (_context9.prev = _context9.next) {
										case 0:
											_context9.next = 2;
											return _streamline.await(_filename, 101, fn, "call", 1, null, false, [thisObj, true, elt, obj[elt]]);

										case 2:
										case "end":
											return _context9.stop();
									}
								}
							}, _$$$$10, this);
						}), 0, 2)]);

					case 2:
						return _context10.abrupt("return", _context10.sent);

					case 3:
					case "end":
						return _context10.stop();
				}
			}
		}, _$$$$9, this);
	}), 0, 4);

	// deprecated -- don't document 
	exports.spray = function (fns, max) {
		return new function () {
			var funnel = exports.funnel(max);
			this.collect = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$11(_12, count, trim) {
				return regeneratorRuntime.wrap(function _$$$$11$(_context11) {
					while (1) {
						switch (_context11.prev = _context11.next) {
							case 0:
								_context11.next = 2;
								return _streamline.await(_filename, 110, function (callback) {
									if (typeof callback !== "function") throw new Error("invalid call to collect: no callback");
									var results = trim ? [] : new Array(fns.length);
									count = count < 0 ? fns.length : Math.min(count, fns.length);
									if (count === 0) return callback(null, results);
									var collected = 0;
									for (var i = 0; i < fns.length; i++) {
										(function (i) {
											funnel(function (err, result) {
												if (err) return callback(err);
												if (trim) results.push(result);else results[i] = result;
												if (++collected === count) return callback(null, results);
											}, fns[i]);
										})(i);
									}
								}, "call", 1, null, false, [this, true]);

							case 2:
								return _context11.abrupt("return", _context11.sent);

							case 3:
							case "end":
								return _context11.stop();
						}
					}
				}, _$$$$11, this);
			}), 0, 3);
			this.collectOne = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$12(_13) {
				var result;
				return regeneratorRuntime.wrap(function _$$$$12$(_context12) {
					while (1) {
						switch (_context12.prev = _context12.next) {
							case 0:
								_context12.next = 2;
								return _streamline.await(_filename, 129, this, "collect", 0, null, false, [true, 1, true]);

							case 2:
								result = _context12.sent;
								return _context12.abrupt("return", result && result[0]);

							case 4:
							case "end":
								return _context12.stop();
						}
					}
				}, _$$$$12, this);
			}), 0, 1);
			this.collectAll = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$13(_14) {
				return regeneratorRuntime.wrap(function _$$$$13$(_context13) {
					while (1) {
						switch (_context13.prev = _context13.next) {
							case 0:
								_context13.next = 2;
								return _streamline.await(_filename, 133, this, "collect", 0, null, false, [true, -1, false]);

							case 2:
								return _context13.abrupt("return", _context13.sent);

							case 3:
							case "end":
								return _context13.stop();
						}
					}
				}, _$$$$13, this);
			}), 0, 1);
		}();
	};

	/// !doc
	/// ## funnel
	/// * `fun = flows.funnel(max)`  
	///   limits the number of concurrent executions of a given code block.
	/// 
	/// The `funnel` function is typically used with the following pattern:
	/// 
	/// ``` javascript
	/// // somewhere
	/// var myFunnel = flows.funnel(10); // create a funnel that only allows 10 concurrent executions.
	/// 
	/// // elsewhere
	/// myFunnel(_, function(_) { /* code with at most 10 concurrent executions */ });
	/// ```
	/// 
	/// The `diskUsage2.js` example demonstrates how these calls can be combined to control concurrent execution.
	/// 
	/// The `funnel` function can also be used to implement critical sections. Just set funnel's `max` parameter to 1.
	/// 
	/// If `max` is set to 0, a default number of parallel executions is allowed. 
	/// This default number can be read and set via `flows.funnel.defaultSize`.  
	/// If `max` is negative, the funnel does not limit the level of parallelism.
	/// 
	/// The funnel can be closed with `fun.close()`.  
	/// When a funnel is closed, the operations that are still in the funnel will continue but their callbacks
	/// won't be called, and no other operation will enter the funnel.
	exports.funnel = require('./builtins').funnel;

	/// ## handshake and queue
	/// * `hs = flows.handshake()`  
	///   allocates a simple semaphore that can be used to do simple handshakes between two tasks.  
	///   The returned handshake object has two methods:  
	///   `hs.wait(_)`: waits until `hs` is notified.  
	///   `hs.notify()`: notifies `hs`.  
	///   Note: `wait` calls are not queued. An exception is thrown if wait is called while another `wait` is pending.
	exports.handshake = function () {
		var callback = null,
		    notified = false;
		return {
			wait: function wait(cb) {
				if (callback) throw new Error("already waiting");
				if (notified) exports.setImmediate(cb);else callback = cb;
				notified = false;
			},
			notify: function notify() {
				if (!callback) notified = true;else exports.setImmediate(callback);
				callback = null;
			}
		};
	};

	/// * `q = flows.queue(options)`  
	///   allocates a queue which may be used to send data asynchronously between two tasks.  
	///   The `max` option can be set to control the maximum queue length.  
	///   When `max` has been reached `q.put(data)` discards data and returns false.
	///   The returned queue has the following methods:  
	exports.queue = function (options) {
		if (typeof options === 'number') options = {
			max: options
		};
		options = options || {};
		var max = options.max != null ? options.max : -1;
		var callback = null,
		    err = null,
		    q = [],
		    pendingWrites = [];
		var queue = {
			///   `data = q.read(_)`: dequeues an item from the queue. Waits if no element is available.  
			read: function read(cb) {
				if (callback) throw new Error("already getting");
				if (q.length > 0) {
						var item = q.shift();
						// recycle queue when empty to avoid maintaining arrays that have grown large and shrunk
						if (q.length === 0) q = [];
						exports.setImmediate(function () {
							cb(err, item);
						});
						if (pendingWrites.length > 0) {
								var wr = pendingWrites.shift();
								exports.setImmediate(function () {
									wr[0](err, wr[1]);
								});
							}
					} else {
						callback = cb;
					}
			},
			///   `q.write(_, data)`:  queues an item. Waits if the queue is full.  
			write: function write(cb, item) {
				if (this.put(item)) {
						exports.setImmediate(function () {
							cb(err);
						});
					} else {
						pendingWrites.push([cb, item]);
					}
			},
			///   `ok = q.put(data)`: queues an item synchronously. Returns true if the queue accepted it, false otherwise. 
			put: function put(item, force) {
				if (!callback) {
						if (max >= 0 && q.length >= max && !force) return false;
						q.push(item);
					} else {
						var cb = callback;
						callback = null;
						exports.setImmediate(function () {
							cb(err, item);
						});
					}
				return true;
			},
			///   `q.end()`: ends the queue. This is the synchronous equivalent of `q.write(_, undefined)`  
			end: function end() {
				this.put(undefined, true);
			},
			///   `data = q.peek()`: returns the first item, without dequeuing it. Returns `undefined` if the queue is empty.  
			peek: function peek() {
				return q[0];
			},
			///   `array = q.contents()`: returns a copy of the queue's contents.  
			contents: function contents() {
				return q.slice(0);
			},
			///   `q.adjust(fn[, thisObj])`: adjusts the contents of the queue by calling `newContents = fn(oldContents)`.  
			adjust: function adjust(fn, thisObj) {
				var nq = fn.call(thisObj, q);
				if (!Array.isArray(nq)) throw new Error("reorder function does not return array");
				q = nq;
			}
		};
		///   `q.length`: number of items currently in the queue.  
		Object.defineProperty(queue, "length", {
			get: function get() {
				return q.length;
			}
		});
		return queue;
	};

	/// 
	/// ## Miscellaneous utilities
	/// * `results = flows.collect(_, futures)`  
	///   collects the results of an array of futures
	exports.collect = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$14(_15, futures) {
		return regeneratorRuntime.wrap(function _$$$$14$(_context15) {
			while (1) {
				switch (_context15.prev = _context15.next) {
					case 0:
						_context15.t0 = futures;

						if (!_context15.t0) {
								_context15.next = 5;
								break;
							}

						_context15.next = 4;
						return _streamline.await(_filename, 280, futures, "map_", 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$15(_16, future) {
							return regeneratorRuntime.wrap(function _$$$$15$(_context14) {
								while (1) {
									switch (_context14.prev = _context14.next) {
										case 0:
											_context14.next = 2;
											return _streamline.await(_filename, 281, null, future, 0, null, false, [true]);

										case 2:
											return _context14.abrupt("return", _context14.sent);

										case 3:
										case "end":
											return _context14.stop();
									}
								}
							}, _$$$$15, this);
						}), 0, 2)]);

					case 4:
						_context15.t0 = _context15.sent;

					case 5:
						return _context15.abrupt("return", _context15.t0);

					case 6:
					case "end":
						return _context15.stop();
				}
			}
		}, _$$$$14, this);
	}), 0, 2);

	// Obsolete API - use require('streamline-runtime').globals.context instead
	exports.setContext = function (ctx) {
		var old = globals.context;
		globals.context = ctx;
		return old;
	};
	exports.getContext = function () {
		return globals.context;
	};

	/// 
	/// * `result = flows.trampoline(_, fn, thisObj)`  
	///   Executes `fn(_)` through a trampoline.  
	///   Waits for `fn`'s result and returns it.  
	///   This is equivalent to calling `fn.call(thisObj, _)` but the current stack is unwound
	///   before calling `fn`.
	exports.trampoline = function (cb, fn, thisObj) {
		exports.setImmediate(exports.withContext(function () {
			fn.call(thisObj, cb);
		}, globals.context));
	};

	/// 
	/// * `flows.setImmediate(fn)`  
	///   portable `setImmediate` both browser and server.  
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function (fn) {
		setTimeout(fn, 0);
	};

	/// 
	/// * `flows.nextTick(_)`  
	///   `nextTick` function for both browser and server.  
	///   Aliased to `process.nextTick` on the server side.
	var nextTick = (typeof process === "undefined" ? "undefined" : _typeof(process)) === "object" && typeof process.nextTick === "function" ? process.nextTick : function (cb) {
		cb();
	};

	// document later
	exports.nextTick = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$16(_17) {
		return regeneratorRuntime.wrap(function _$$$$16$(_context16) {
			while (1) {
				switch (_context16.prev = _context16.next) {
					case 0:
						_context16.next = 2;
						return _streamline.await(_filename, 324, null, nextTick, 0, null, false, [true]);

					case 2:
					case "end":
						return _context16.stop();
				}
			}
		}, _$$$$16, this);
	}), 0, 1);

	// document later
	// should probably cap millis instead of trying to be too smart 
	exports.setTimeout = function (fn, millis) {
		// node's setTimeout notifies immediately if millis > max!! 
		// So be safe and work around it. 
		// Gotcha: timeout cannot be cancelled beyond max.
		var max = 0x7fffffff;
		if (millis > max) {
				return setTimeout(function () {
					exports.setTimeout(fn, millis - max);
				}, max);
			} else {
				return setTimeout(function () {
					_streamline.future(_filename, 340, null, fn, 0, null, false, [false]);
				}, millis);
			}
	};

	// document later
	exports.setInterval = function (fn, millis) {
		return setInterval(function () {
			_streamline.future(_filename, 348, null, fn, 0, null, false, [false]);
		}, millis);
	};

	/// 
	/// * `flows.sleep(_, millis)`  
	///   Sleeps `millis` ms.  
	exports.sleep = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$17(_18, millis) {
		return regeneratorRuntime.wrap(function _$$$$17$(_context17) {
			while (1) {
				switch (_context17.prev = _context17.next) {
					case 0:
						_context17.next = 2;
						return _streamline.await(_filename, 356, null, setTimeout, 0, null, false, [true, millis]);

					case 2:
						return _context17.abrupt("return", _context17.sent);

					case 3:
					case "end":
						return _context17.stop();
				}
			}
		}, _$$$$17, this);
	}), 0, 2);

	exports.eventHandler = function (fn) {
		return function () {
			var that = this;
			var args = Array.prototype.slice(arguments, 0);
			return _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$18(_19) {
				return regeneratorRuntime.wrap(function _$$$$18$(_context18) {
					while (1) {
						switch (_context18.prev = _context18.next) {
							case 0:
								_context18.next = 2;
								return _streamline.await(_filename, 364, fn, "apply_", 0, null, false, [true, that, args, 0]);

							case 2:
								return _context18.abrupt("return", _context18.sent);

							case 3:
							case "end":
								return _context18.stop();
						}
					}
				}, _$$$$18, this);
			}), 0, 1)(function (err) {
				if (err) throw err;
			});
		};
	};

	//   Obsolete. Use `fn.apply_` instead.
	exports.apply = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$apply$$(_20, fn, thisObj, args, index) {
		return regeneratorRuntime.wrap(function _$$apply$$$(_context19) {
			while (1) {
				switch (_context19.prev = _context19.next) {
					case 0:
						_context19.next = 2;
						return _streamline.await(_filename, 373, fn, "apply_", 0, null, false, [true, thisObj, args, index]);

					case 2:
						return _context19.abrupt("return", _context19.sent);

					case 3:
					case "end":
						return _context19.stop();
				}
			}
		}, _$$apply$$, this);
	}), 0, 5);

	/// 
	/// * `flows.callWithTimeout(_, fn, millis)`  
	///   Calls `fn(_)` with a timeout guard.  
	///   Throws a timeout exception if `fn` takes more than `millis` ms to complete.  
	exports.callWithTimeout = function (cb, fn, millis) {
		var tid = setTimeout(function () {
			if (cb) {
					var ex = new Error("timeout");
					ex.code = "ETIMEOUT";
					ex.errno = "ETIMEOUT";
					cb(ex);
					cb = null;
				}
		}, millis);
		fn(function (err, result) {
			if (cb) {
					clearTimeout(tid);
					cb(err, result);
					cb = null;
				}
		});
	};

	/// 
	/// * `fn = flows.withContext(fn, cx)`  
	///   wraps a function so that it executes with context `cx` (or a wrapper around current context if `cx` is falsy).
	///   The previous context will be restored when the function returns (or throws).  
	///   returns the wrapped function.
	exports.withContext = function (fn, cx) {
		return function () {
			var oldContext = globals.context;
			globals.context = cx || Object.create(oldContext);
			try {
				return fn.apply(this, arguments);
			} finally {
				globals.context = oldContext;
			}
		};
	};

	/// 
	/// * `flows.ignore`  
	///   callback that ignores errors (`function(err) {}`)  
	exports.ignore = function (err) {};

	/// 
	/// * `flows.check`  
	///   callback that throws errors (`function(err) { if (err) throw err; }`)  
	exports.check = function (err) {
		if (err) throw err;
	};

	/// * `flows.wait(_, promise)`  
	///   waits on a promise - equivalent to `promise.then(_, _)`.  
	exports.wait = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$19(_21, promise) {
		return regeneratorRuntime.wrap(function _$$$$19$(_context20) {
			while (1) {
				switch (_context20.prev = _context20.next) {
					case 0:
						if (!(typeof promise.then !== "function")) {
								_context20.next = 2;
								break;
							}

						throw new Error("invalid promise: " + promise);

					case 2:
						_context20.next = 4;
						return _streamline.await(_filename, 430, promise, "then", 0, 1, false, [true, true]);

					case 4:
						return _context20.abrupt("return", _context20.sent);

					case 5:
					case "end":
						return _context20.stop();
				}
			}
		}, _$$$$19, this);
	}), 0, 2);
})(typeof exports !== 'undefined' ? exports : Streamline.flows = Streamline.flows || {});
}).call(this,require('_process'),require("timers").setImmediate)
},{"../util":9,"./builtins":3,"_process":1,"streamline-runtime/lib/callbacks/regenerator":5,"streamline-runtime/lib/callbacks/runtime":6,"timers":11}],5:[function(require,module,exports){
"use strict";
module.exports = require("regenerator-runtime");
},{"regenerator-runtime":10}],6:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var regeneratorRuntime = typeof require === 'function' ? require('streamline-runtime/lib/callbacks/regenerator') : Streamline.require('streamline-runtime/lib/callbacks/regenerator');

var makeArgs = function makeArgs(i) {
	if (i <= 0) return "";
	return i > 1 ? makeArgs(i - 1) + ', a' + i : "a1";
};

var isGenerator = function isGenerator(val) {
	return val && (Object.prototype.toString.call(val) === "[object Generator]" || val.toString() === "[object Generator]");
};

var Frame = function Frame(file, line, fn) {
	this.fn = fn;
	this.file = file || "unknown";
	this.line = line || 0;
};

var pushFrame = function pushFrame(g) {
	if (glob.emitter) glob.emitter.emit('enter', g.frame);
	g.frame = g.frame || glob.frame;
	glob.frame = null;
};

var popFrame = function popFrame(g) {
	if (glob.emitter) glob.emitter.emit('exit', g.frame);
};

var run = function run(fn, g, cb, options) {
	var rsm = glob.resume;
	var emit = function emit(ev, g) {
		if (glob.emitter) glob.emitter.emit(ev, g.frame);
	};

	try {
		if (glob.frame) {
				g.frame = glob.frame;
				g.frame.g = g;
				glob.frame = null;
			} else {
				g.frame = new Frame("", 0, fn);
			}

		glob.resume = function (err, val) {
			if (glob.yielded) {
					emit("resume", g);
					glob.yielded = false;
				}
			while (g) {
				if (options && options.interrupt && options.interrupt()) return;
				try {
					// ES6 is deprecating send in favor of next. Following line makes us compatible with both.
					var send = g.send || g.next;
					var v = err ? g.throw(err) : send.call(g, val);
					val = v.value;
					err = null;
					// if we get PENDING, the current call completed with a pending I/O
					// resume will be called again when the I/O completes. So just save the context and return here.
					if (val === glob.PENDING) {
							if (!glob.yielded) {
									emit("yield", g);
									glob.yielded = true;
								}
							return;
						}
					// if we get [PENDING, e, r], the current call invoked its callback synchronously
					// we just loop to send/throw what the callback gave us.
					if (val && val[0] === glob.PENDING) {
							err = val[1];
							val = val[2];
							if (err) err = wrapError(err, g);
						}
						// else, if g is done we unwind it we send val to the parent generator (or through cb if we are at the top)
					else if (v.done) {
								//g.close();
								popFrame(g);
								g = g.prev;
							}
							// else if val is not a generator we have an error. Yield was not applied to a generators
						else {
								if (!isGenerator(val)) {
										throw new Error("invalid value was yielded. Expected a generator, got " + val);
									}
								// we got a new generator which means that g called another generator function
								// the new generator become current and we loop with g.send(undefined) (equiv to g.next()) 
								val.prev = g;
								g = val;
								pushFrame(g);
								val = undefined;
							}
				} catch (ex) {
					// the send/throw call failed.
					// we unwind the current generator and we rethrow into the parent generator (or through cb if at the top)
					//g.close();
					err = wrapError(ex, g);
					popFrame(g);
					g = g.prev;
					val = undefined;
				}
			}
			// we have exhausted the stack of generators. 
			// return the result or error through the callback.
			cb(err, val);
		};

		// start the resume loop
		glob.resume();
	} finally {
		// restore resume global
		glob.resume = rsm;
	}
};

var mapResults = function mapResults(options, args) {
	if (options && (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === "object") {
			if (options.returnArray) return args;
			if (options.returnObject) return options.returnObject.reduce(function (res, key, i) {
				res[key] = args[i];
				return res;
			}, {});
		}
	return args[0];
};

var invoke = function invoke(that, fn, args, index, index2, returnArray) {
	// Set things up so that call returns:
	// * PENDING if it completes with a pending I/O (and cb will be called later)
	// * [PENDING, e, r] if the callback is called synchronously.
	var result = glob.PENDING,
	    sync = true;
	var rsm = glob.resume;

	// convert args to array so that args.length gets correctly set if index is args.length
	args = Array.prototype.slice.call(args, 0);
	var cx = glob.context;
	var callback = function callback(e, r) {
		var oldContext = glob.context;
		var oldResume = glob.resume;
		try {
			if (returnArray) r = Array.prototype.slice.call(arguments, 1);
			glob.context = cx;
			glob.resume = rsm;
			if (sync) {
					result = [glob.PENDING, e, r];
				} else {
					glob.resume(e, r);
				}
		} finally {
			glob.context = oldContext;
			glob.resume = oldResume;
		}
	};
	if (index2 != null) {
			args[index] = function (r) {
				callback(null, r);
			};
			args[index2] = function (e) {
				callback(e);
			};
		} else {
			args[index] = callback;
		}
	fn.apply(that, args);
	sync = false;
	return result;
};

var makeUnstarror = function makeUnstarror(i) {
	return eval("(function(fn, options)" + unstarBody.replace(/function\s*F\(\)/, "function F(" + makeArgs(i) + ")") + ")");
};

var unstar = function unstar(fn, index, arity) {
	var i = arity != null ? arity : index == null ? fn.length + 1 : fn.length;
	var unstarror = unstarrors[i] || (unstarrors[i] = makeUnstarror(i));
	return unstarror(fn, index);
};

var wrapError = function wrapError(err, g) {
	if (!(err instanceof Error)) return err; // handle throw "some string";
	for (var gg = err.g; gg; gg = gg.prev) {
		if (gg === g) return err;
	}
	err = Object.create(err);
	err.g = g;
	if (!stackGetter) {
			Object.defineProperty(err, '__raw_stack__', {
				value: err.stack,
				enumerable: false,
				writable: false,
				configurable: false
			});
		}
	Object.defineProperty(err, 'stack', {
		get: function get() {
			return stackTrace(this);
		}
	});
	return err;
};

var stackTrace = function stackTrace(err) {
	var starredStack = function starredStack(e) {
		if (!e || !e.g) return "";
		var s = starredStack(Object.getPrototypeOf(e));
		for (var g = e.g; g.prev; g = g.prev) {
			var fname = g.prev.frame.name || "";
			var m = /\$\$(.*)\$\$/.exec(fname);
			if (m) fname = m[1];
			s += '    at ' + fname + ' (' + g.frame.file + ':' + g.frame.line + ')\n';
		}
		return s;
	};

	var extra;

	var rawStack = stackGetter ? stackGetter.call(err) : err.__raw_stack__;
	var m = / +at (GeneratorFunctionPrototype|(undefined|\[object Generator\])\.next|.*\.next \(<anonymous>\))/.exec(rawStack);
	var cut = m && m.index;
	if (cut < 0) cut = rawStack.indexOf('\n') + 1;
	var result = rawStack.substring(0, cut).replace(/\n.*regenerator.runtime.*/g, '') + //
	'    <<< yield stack >>>\n' + starredStack(err) + //
	'    <<< raw stack >>>\n' + rawStack.substring(cut);
	return result;
};

/**
 * Copyright (c) 2013 Bruno Jouhier <bruno.jouhier@sage.com>
 * MIT License
 */
var util = require('../util');
var glob = util.getGlobals('callbacks');

var counters = {
	slowAwait: 0,
	fastAwait: 0
};

if (typeof glob.yielded === "undefined") glob.yielded = true;
glob.PENDING = glob.PENDING || {};

Object.defineProperty(Frame.prototype, "name", {
	get: function get() {
		var fn = this.fn;
		return fn && (fn.__name__ || fn.name) || "unknown";
	}
});

Object.defineProperty(Frame.prototype, "info", {
	get: function get() {
		return this;
	}
});

var star = function star(fn, index, index2, returnArray) {
	return (/*#__PURE__*/regeneratorRuntime.mark(function _callee() {
			var _args = arguments;
			return regeneratorRuntime.wrap(function _callee$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							_context.next = 2;
							return invoke(this, fn, _args, index, index2, returnArray);

						case 2:
							return _context.abrupt('return', _context.sent);

						case 3:
						case 'end':
							return _context.stop();
					}
				}
			}, _callee, this);
		})
	);
};

var unstarTemplate = function unstarTemplate(fn, options) {
	var index = options && (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' ? options.callbackIndex : options;
	if (index == null) index = fn.length;

	var F = function F() {
		var cb = arguments[index];
		if (typeof cb !== "function") {
				if (glob.allowBooleanPlaceholders && typeof cb === 'boolean') {
						if (cb) cb = util.defaultCallback;else return exports.future("", 0, null, wrapper.bind(this), index)(arguments);
					} else throw util.argError(fn.name, index, "function", typeof cb === 'undefined' ? 'undefined' : _typeof(cb));
			}
		var g = fn.apply(this, arguments);
		run.call(this, fn, g, cb);
	};
	// track the original name for stack frames
	F.__name__ = fn.name;
	return F;
};

var unstarBody = unstarTemplate.toString();
unstarBody = unstarBody.substring(unstarBody.indexOf('{'));
var unstarrors = [];

var stackGetter = (Object.getOwnPropertyDescriptor(new Error(), 'stack') || {}).get;

var keys = [];

exports.await = function (file, line, object, property, index1, index2, returnArray, args) {
	var bound = typeof property !== "function";
	var fn = bound ? object[property] : property;
	glob.frame = new Frame(file, line, fn);
	var key = '';
	if (index2 == null && !returnArray) {
			key = keys[index1] || (keys[index1] = 'starred-' + index1);
			var wrapper = fn[key];
			if (wrapper) {
					counters.fastAwait++;
					if (Array.isArray(args)) return wrapper.apply(object, args);else return bound ? wrapper.bind(object) : wrapper;
				}
		}
	counters.slowAwait++;
	if (typeof fn !== "function") throw util.typeError("cannot call", "function", fn);
	wrapper = star(fn, index1, index2, returnArray);
	if (!bound && key) {
			fn[key] = wrapper;
		}
	if (Array.isArray(args)) return wrapper.apply(object, args);else return bound ? wrapper.bind(object) : wrapper;
};

exports.async = function (fn, index, arity) {
	if (typeof fn !== "function") throw util.typeError("cannot wrap function", "function", fn);
	var unstarred = unstar(fn, index, arity);
	unstarred["starred-" + index] = fn;
	return unstarred;
};

exports.new = function (file, line, constructor, index) {
	if (typeof constructor !== "function") throw util.typeError("cannot instantiate", "function", constructor);
	glob.frame = new Frame(file, line, constructor);
	var starred = star(constructor, index);
	return (/*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
			var that,
			    _args2 = arguments;
			return regeneratorRuntime.wrap(function _callee2$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							that = Object.create(constructor.prototype);
							_context2.next = 3;
							return starred.apply(that, _args2);

						case 3:
							return _context2.abrupt('return', that);

						case 4:
						case 'end':
							return _context2.stop();
					}
				}
			}, _callee2, this);
		})
	);
};

exports.future = require('../future');
require('./builtins');
},{"../future":8,"../util":9,"./builtins":3,"streamline-runtime/lib/callbacks/regenerator":5}],7:[function(require,module,exports){
"use strict";
var runtime = require('./util').getGlobals().runtime;
function idem(x) { return x; } // streamline-require compat
if (runtime) module.exports = require(idem('./' + runtime + '/flows'));
else module.exports = require('./callbacks/flows');
},{"./callbacks/flows":4,"./util":9}],8:[function(require,module,exports){
(function (setImmediate){
"use strict";

var util = require('./util');

module.exports = function (file, line, object, property, index, dummy1, dummy2, args) {
	var bound = typeof property !== "function";
	var fn = bound ? object[property] : property;
	var self = bound ? object : this;
	if (typeof fn !== "function") throw new Error("cannot create future", "function", fn);
	var result = function futured() {
		var err, result, done, q = [];
		var args = Array.prototype.slice.call(arguments);
		var callback = function (e, r) {
			//if (e) console.error(e);
			err = e;
			result = r;
			done = true;
			q && q.forEach(function (f) {
				if (sync) {
					setImmediate(function () {
						f.call(self, e, r);
					});
				} else {
					f.call(self, e, r);
				}
			});
			q = null;
		};
		args[index] = callback;
		var sync = true;
		fn.apply(self, args);
		sync = false;
		var future = function (cb) {
			if (typeof cb !== "function") throw argError(fn.name, index, "function", cb);
			if (done) {
				cb.call(self, err, result);
			}
			else q.push(cb);
		};
		// computed property so that we don't allocate promise if we don't need to
		Object.defineProperty(future, 'promise', {
			get: function () {
				return new Promise(function (resolve, reject) {
					if (done) {
						if (err) reject(err);
						else resolve(result);
					} else {
						q.push(function (e, r) {
							if (e) reject(e);
							else resolve(r);
						})
					}
				});
			}
		});
		return future;
	};
	return Array.isArray(args) ? result.apply(object, args) : result;
}

}).call(this,require("timers").setImmediate)
},{"./util":9,"timers":11}],9:[function(require,module,exports){
(function (process,global){
"use strict";
// colors package does not work in browser - fails on reference to node's `process` global
var idem = function (x) { return x; };
var colors;
if (typeof (process) !== 'undefined' && !process.browser) {
	try {
		colors = require(idem('colors'));
	} catch (ex) {
		// console.error(ex.stack);
	}
}
if (!colors) colors = ['black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white', 'gray'].reduce(function (r, c) {
	r[c] = idem;
	return r;
}, {});

function log(message) {
	console.error(colors.gray("[STREAMLINE-RUNTIME] " + message));
}
function warn(message) {
	console.error(colors.magenta("[STREAMLINE-RUNTIME] " + message));
}
function error(message) {
	console.error(colors.red("[STREAMLINE-RUNTIME] " + message));
}

function trace(obj) {
	if (obj instanceof TypeError) util.error(obj.stack);
	//else console.error(obj);
};

function typeName(val) {
	return val === null ? "null" : typeof val;
}

function typeError(message, expected, got) {
	var err = new TypeError(message + ": expected " + expected + ", got " + typeName(got));
	console.error(err.stack);
	throw err;
}

function argError(fname, index, expected, got) {
	return typeError("invalid argument " + index + " to function `" + fname + "`", expected, got);
}

function getGlobals(runtime) {
	var glob = typeof global === "object" ? global : window;
	var secret = "_20c7abceb95c4eb88b7ca1895b1170d1";
	var g = (glob[secret] = (glob[secret] || { context: {} }));
	if (runtime && g.runtime !== runtime) {
		if (g.runtime) console.warn("[STREAMLINE-RUNTIME] " + runtime + " runtime loaded on top of " + g.runtime);
		else g.runtime = runtime;
	}
	return g;
}

function defaultCallback(err) {
	if (err) throw err;
}

// fix names in stack traces
var origPrepareStackTrace = Error.prepareStackTrace;
if (origPrepareStackTrace) Error.prepareStackTrace = function (_, stack) {
	// eval stack frames from streamline-runtime fibers are botched: column number is 0, 
	// which causes an error in source-map-support.js / mapEvalOrigin.
	// So we filter them out.
	// We also filter out frames that streamline inserts between calls (fibers mode only).
	var canSkip = false;
	stack = stack.filter(function (frame) {
		var sourceName = frame.getFileName() || frame.getScriptNameOrSourceURL() || '';
		var isStreamline = /streamline-runtime.lib.fibers.runtime/.test(sourceName);
		if (!isStreamline) canSkip = true;
		if (canSkip && isStreamline) return false;
		var origin = frame.isEval() && frame.getEvalOrigin();
		return (!(origin && /\bstreamline-runtime\b/.test(origin)));
	});
	var result;
	try {
		result = origPrepareStackTrace.call(this, _, stack);
	} catch (ex) {
		result = "\n*** STACKTRACE PREPARE FAILED: " + ex.message + " ***\n" + stack.join('\n');
	}
	result = result.replace(/_\$\$(.*)\$\$\d*/g, function (all, x) { return x; })
		.replace(/Function\.(.*) \[as awaitWrapper-0\]/g, function (all, x) { return x; });
	return result;
};

function defaultRuntime() {
	var _defRT;
	return _defRT || (_defRT = (function () {
		try {
			require(idem('fibers'));
			return 'fibers';
		} catch (ex) { }
		try {
			eval("(function*(){})");
			return 'generators';
		} catch (ex) { }
		return "callbacks";
	})());
}

module.exports = {
	log: log,
	warn: warn,
	error: error,
	trace: trace,
	typeName: typeName,
	typeError: typeError,
	argError: argError,
	getGlobals: getGlobals,
	defaultCallback: defaultCallback,
	defaultRuntime: defaultRuntime,
};
var util = module.exports;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":1}],10:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

},{}],11:[function(require,module,exports){
(function (setImmediate,clearImmediate){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":1,"timers":11}],12:[function(require,module,exports){
'use strict';

var regeneratorRuntime = typeof require === 'function' ? require('streamline-runtime/lib/callbacks/regenerator') : Streamline.require('streamline-runtime/lib/callbacks/regenerator');

var _streamline = typeof require === 'function' ? require('streamline-runtime/lib/callbacks/runtime') : Streamline.require('streamline-runtime/lib/callbacks/runtime');

var _filename = '/Users/bruno/dev/streamline/test/common/flows-test._js';

var delay = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$delay$$(_2, val) {
	return regeneratorRuntime.wrap(function _$$delay$$$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					_context.next = 2;
					return _streamline.await(_filename, 5, flows, 'nextTick', 0, null, false, [true]);

				case 2:
					return _context.abrupt('return', val);

				case 3:
				case 'end':
					return _context.stop();
			}
		}
	}, _$$delay$$, this);
}), 0, 2);

var delayFail = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$delayFail$$(_3, err) {
	return regeneratorRuntime.wrap(function _$$delayFail$$$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					_context2.next = 2;
					return _streamline.await(_filename, 10, flows, 'nextTick', 0, null, false, [true]);

				case 2:
					throw err;

				case 3:
				case 'end':
					return _context2.stop();
			}
		}
	}, _$$delayFail$$, this);
}), 0, 2);

var sparse = function sparse() {
	var a = [];
	a[2] = 33;
	a[5] = 44;
	a[7] = 99;
	return a;
};

var dump = function dump(a) {
	return a.reduce(function (s, v) {
		return s + '/' + v;
	}, '');
};

QUnit.module(module.id);
var flows = require("streamline-runtime").flows;

asyncTest("each", 7, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$(_4) {
	var result;
	return regeneratorRuntime.wrap(function _$$$$$(_context10) {
		while (1) {
			switch (_context10.prev = _context10.next) {
				case 0:
					result = 1;
					_context10.next = 3;
					return _streamline.await(_filename, 30, flows, 'each', 0, null, false, [true, [1, 2, 3, 4], _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$2(_5, val) {
						return regeneratorRuntime.wrap(function _$$$$2$(_context3) {
							while (1) {
								switch (_context3.prev = _context3.next) {
									case 0:
										_context3.t0 = result;
										_context3.next = 3;
										return _streamline.await(_filename, 31, null, delay, 0, null, false, [true, val]);

									case 3:
										_context3.t1 = _context3.sent;
										result = _context3.t0 * _context3.t1;

									case 5:
									case 'end':
										return _context3.stop();
								}
							}
						}, _$$$$2, this);
					}), 0, 2)]);

				case 3:
					strictEqual(result, 24);
					result = 1;
					_context10.next = 7;
					return _streamline.await(_filename, 35, [1, 2, 3, 4], 'forEach_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$3(_6, val) {
						var v;
						return regeneratorRuntime.wrap(function _$$$$3$(_context4) {
							while (1) {
								switch (_context4.prev = _context4.next) {
									case 0:
										_context4.next = 2;
										return _streamline.await(_filename, 36, null, delay, 0, null, false, [true, val]);

									case 2:
										v = _context4.sent;

										result = result * v;

									case 4:
									case 'end':
										return _context4.stop();
								}
							}
						}, _$$$$3, this);
					}), 0, 2)]);

				case 7:
					strictEqual(result, 24);
					result = 1;
					_context10.next = 11;
					return _streamline.await(_filename, 41, [1, 2, 3, 4], 'forEach_', 0, null, false, [true, 2, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$4(_7, val) {
						var v;
						return regeneratorRuntime.wrap(function _$$$$4$(_context5) {
							while (1) {
								switch (_context5.prev = _context5.next) {
									case 0:
										_context5.next = 2;
										return _streamline.await(_filename, 42, null, delay, 0, null, false, [true, val]);

									case 2:
										v = _context5.sent;

										result = result * v;

									case 4:
									case 'end':
										return _context5.stop();
								}
							}
						}, _$$$$4, this);
					}), 0, 2)]);

				case 11:
					strictEqual(result, 24);
					result = 1;
					_context10.next = 15;
					return _streamline.await(_filename, 47, [1, 2, 3, 4], 'forEach_', 0, null, false, [true, {
						parallel: 2
					}, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$5(_8, val) {
						var v;
						return regeneratorRuntime.wrap(function _$$$$5$(_context6) {
							while (1) {
								switch (_context6.prev = _context6.next) {
									case 0:
										_context6.next = 2;
										return _streamline.await(_filename, 50, null, delay, 0, null, false, [true, val]);

									case 2:
										v = _context6.sent;

										result = result * v;

									case 4:
									case 'end':
										return _context6.stop();
								}
							}
						}, _$$$$5, this);
					}), 0, 2)]);

				case 15:
					strictEqual(result, 24);
					result = 1;
					_context10.next = 19;
					return _streamline.await(_filename, 55, [1, 2, 3, 4], 'forEach_', 0, null, false, [true, -1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$6(_9, val) {
						var v;
						return regeneratorRuntime.wrap(function _$$$$6$(_context7) {
							while (1) {
								switch (_context7.prev = _context7.next) {
									case 0:
										_context7.next = 2;
										return _streamline.await(_filename, 56, null, delay, 0, null, false, [true, val]);

									case 2:
										v = _context7.sent;

										result = result * v;

									case 4:
									case 'end':
										return _context7.stop();
								}
							}
						}, _$$$$6, this);
					}), 0, 2)]);

				case 19:
					strictEqual(result, 24);
					result = '';
					_context10.next = 23;
					return _streamline.await(_filename, 61, sparse(), 'forEach_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$7(_10, val, i) {
						var v;
						return regeneratorRuntime.wrap(function _$$$$7$(_context8) {
							while (1) {
								switch (_context8.prev = _context8.next) {
									case 0:
										_context8.next = 2;
										return _streamline.await(_filename, 62, null, delay, 0, null, false, [true, val]);

									case 2:
										v = _context8.sent;

										result = result + '/' + i + ':' + v;

									case 4:
									case 'end':
										return _context8.stop();
								}
							}
						}, _$$$$7, this);
					}), 0, 3)]);

				case 23:
					strictEqual(result, '/2:33/5:44/7:99');
					result = '';
					_context10.next = 27;
					return _streamline.await(_filename, 67, sparse(), 'forEach_', 0, null, false, [true, -1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$8(_11, val, i) {
						var v;
						return regeneratorRuntime.wrap(function _$$$$8$(_context9) {
							while (1) {
								switch (_context9.prev = _context9.next) {
									case 0:
										_context9.next = 2;
										return _streamline.await(_filename, 68, null, delay, 0, null, false, [true, val]);

									case 2:
										v = _context9.sent;

										result = result + '/' + i + ':' + v;

									case 4:
									case 'end':
										return _context9.stop();
								}
							}
						}, _$$$$8, this);
					}), 0, 3)]);

				case 27:
					strictEqual(result, '/2:33/5:44/7:99');
					start();

				case 29:
				case 'end':
					return _context10.stop();
			}
		}
	}, _$$$$, this);
}), 0, 1));
asyncTest("map", 9, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$9(_12) {
	var result;
	return regeneratorRuntime.wrap(function _$$$$9$(_context18) {
		while (1) {
			switch (_context18.prev = _context18.next) {
				case 0:
					_context18.next = 2;
					return _streamline.await(_filename, 75, flows, 'map', 0, null, false, [true, [1, 2, 3, 4], _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$10(_13, val) {
						return regeneratorRuntime.wrap(function _$$$$10$(_context11) {
							while (1) {
								switch (_context11.prev = _context11.next) {
									case 0:
										_context11.next = 2;
										return _streamline.await(_filename, 76, null, delay, 0, null, false, [true, val]);

									case 2:
										_context11.t0 = _context11.sent;
										return _context11.abrupt('return', 2 * _context11.t0);

									case 4:
									case 'end':
										return _context11.stop();
								}
							}
						}, _$$$$10, this);
					}), 0, 2)]);

				case 2:
					result = _context18.sent;

					deepEqual(result, [2, 4, 6, 8]);
					_context18.next = 6;
					return _streamline.await(_filename, 79, [1, 2, 3, 4], 'map_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$11(_14, val) {
						return regeneratorRuntime.wrap(function _$$$$11$(_context12) {
							while (1) {
								switch (_context12.prev = _context12.next) {
									case 0:
										_context12.next = 2;
										return _streamline.await(_filename, 80, null, delay, 0, null, false, [true, val]);

									case 2:
										_context12.t0 = _context12.sent;
										return _context12.abrupt('return', 2 * _context12.t0);

									case 4:
									case 'end':
										return _context12.stop();
								}
							}
						}, _$$$$11, this);
					}), 0, 2)]);

				case 6:
					result = _context18.sent;

					deepEqual(result, [2, 4, 6, 8]);
					_context18.next = 10;
					return _streamline.await(_filename, 83, [1, 2, 3, 4], 'map_', 0, null, false, [true, 2, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$12(_15, val) {
						return regeneratorRuntime.wrap(function _$$$$12$(_context13) {
							while (1) {
								switch (_context13.prev = _context13.next) {
									case 0:
										_context13.next = 2;
										return _streamline.await(_filename, 84, null, delay, 0, null, false, [true, val]);

									case 2:
										_context13.t0 = _context13.sent;
										return _context13.abrupt('return', 2 * _context13.t0);

									case 4:
									case 'end':
										return _context13.stop();
								}
							}
						}, _$$$$12, this);
					}), 0, 2)]);

				case 10:
					result = _context18.sent;

					deepEqual(result, [2, 4, 6, 8]);
					_context18.next = 14;
					return _streamline.await(_filename, 87, [1, 2, 3, 4], 'map_', 0, null, false, [true, {
						parallel: 2
					}, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$13(_16, val) {
						return regeneratorRuntime.wrap(function _$$$$13$(_context14) {
							while (1) {
								switch (_context14.prev = _context14.next) {
									case 0:
										_context14.next = 2;
										return _streamline.await(_filename, 90, null, delay, 0, null, false, [true, val]);

									case 2:
										_context14.t0 = _context14.sent;
										return _context14.abrupt('return', 2 * _context14.t0);

									case 4:
									case 'end':
										return _context14.stop();
								}
							}
						}, _$$$$13, this);
					}), 0, 2)]);

				case 14:
					result = _context18.sent;

					deepEqual(result, [2, 4, 6, 8]);
					_context18.next = 18;
					return _streamline.await(_filename, 93, [1, 2, 3, 4], 'map_', 0, null, false, [true, -1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$14(_17, val) {
						return regeneratorRuntime.wrap(function _$$$$14$(_context15) {
							while (1) {
								switch (_context15.prev = _context15.next) {
									case 0:
										_context15.next = 2;
										return _streamline.await(_filename, 94, null, delay, 0, null, false, [true, val]);

									case 2:
										_context15.t0 = _context15.sent;
										return _context15.abrupt('return', 2 * _context15.t0);

									case 4:
									case 'end':
										return _context15.stop();
								}
							}
						}, _$$$$14, this);
					}), 0, 2)]);

				case 18:
					result = _context18.sent;

					deepEqual(result, [2, 4, 6, 8]);
					_context18.next = 22;
					return _streamline.await(_filename, 97, sparse(), 'map_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$15(_18, val, i) {
						var v;
						return regeneratorRuntime.wrap(function _$$$$15$(_context16) {
							while (1) {
								switch (_context16.prev = _context16.next) {
									case 0:
										_context16.next = 2;
										return _streamline.await(_filename, 98, null, delay, 0, null, false, [true, val]);

									case 2:
										v = _context16.sent;
										return _context16.abrupt('return', i + ':' + v);

									case 4:
									case 'end':
										return _context16.stop();
								}
							}
						}, _$$$$15, this);
					}), 0, 3)]);

				case 22:
					result = _context18.sent;

					strictEqual(result.length, 8);
					strictEqual(dump(result), '/2:33/5:44/7:99');
					_context18.next = 27;
					return _streamline.await(_filename, 103, sparse(), 'map_', 0, null, false, [true, -1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$16(_19, val, i) {
						var v;
						return regeneratorRuntime.wrap(function _$$$$16$(_context17) {
							while (1) {
								switch (_context17.prev = _context17.next) {
									case 0:
										_context17.next = 2;
										return _streamline.await(_filename, 104, null, delay, 0, null, false, [true, val]);

									case 2:
										v = _context17.sent;
										return _context17.abrupt('return', i + ':' + v);

									case 4:
									case 'end':
										return _context17.stop();
								}
							}
						}, _$$$$16, this);
					}), 0, 3)]);

				case 27:
					result = _context18.sent;

					strictEqual(result.length, 8);
					strictEqual(dump(result), '/2:33/5:44/7:99');
					start();

				case 31:
				case 'end':
					return _context18.stop();
			}
		}
	}, _$$$$9, this);
}), 0, 1));
asyncTest("filter", 9, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$17(_20) {
	var result;
	return regeneratorRuntime.wrap(function _$$$$17$(_context26) {
		while (1) {
			switch (_context26.prev = _context26.next) {
				case 0:
					_context26.next = 2;
					return _streamline.await(_filename, 112, flows, 'filter', 0, null, false, [true, [1, 2, 3, 4], _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$18(_21, val) {
						return regeneratorRuntime.wrap(function _$$$$18$(_context19) {
							while (1) {
								switch (_context19.prev = _context19.next) {
									case 0:
										_context19.next = 2;
										return _streamline.await(_filename, 113, null, delay, 0, null, false, [true, val]);

									case 2:
										_context19.t0 = _context19.sent;
										return _context19.abrupt('return', _context19.t0 % 2);

									case 4:
									case 'end':
										return _context19.stop();
								}
							}
						}, _$$$$18, this);
					}), 0, 2)]);

				case 2:
					result = _context26.sent;

					deepEqual(result, [1, 3]);
					_context26.next = 6;
					return _streamline.await(_filename, 116, [1, 2, 3, 4], 'filter_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$19(_22, val) {
						return regeneratorRuntime.wrap(function _$$$$19$(_context20) {
							while (1) {
								switch (_context20.prev = _context20.next) {
									case 0:
										_context20.next = 2;
										return _streamline.await(_filename, 117, null, delay, 0, null, false, [true, val]);

									case 2:
										_context20.t0 = _context20.sent;
										return _context20.abrupt('return', _context20.t0 % 2);

									case 4:
									case 'end':
										return _context20.stop();
								}
							}
						}, _$$$$19, this);
					}), 0, 2)]);

				case 6:
					result = _context26.sent;

					deepEqual(result, [1, 3]);
					_context26.next = 10;
					return _streamline.await(_filename, 120, [1, 2, 3, 4], 'filter_', 0, null, false, [true, 2, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$20(_23, val) {
						return regeneratorRuntime.wrap(function _$$$$20$(_context21) {
							while (1) {
								switch (_context21.prev = _context21.next) {
									case 0:
										_context21.next = 2;
										return _streamline.await(_filename, 121, null, delay, 0, null, false, [true, val]);

									case 2:
										_context21.t0 = _context21.sent;
										return _context21.abrupt('return', _context21.t0 % 2);

									case 4:
									case 'end':
										return _context21.stop();
								}
							}
						}, _$$$$20, this);
					}), 0, 2)]);

				case 10:
					result = _context26.sent;

					deepEqual(result, [1, 3]);
					_context26.next = 14;
					return _streamline.await(_filename, 124, [1, 2, 3, 4], 'filter_', 0, null, false, [true, {
						parallel: 2
					}, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$21(_24, val) {
						return regeneratorRuntime.wrap(function _$$$$21$(_context22) {
							while (1) {
								switch (_context22.prev = _context22.next) {
									case 0:
										_context22.next = 2;
										return _streamline.await(_filename, 127, null, delay, 0, null, false, [true, val]);

									case 2:
										_context22.t0 = _context22.sent;
										return _context22.abrupt('return', _context22.t0 % 2);

									case 4:
									case 'end':
										return _context22.stop();
								}
							}
						}, _$$$$21, this);
					}), 0, 2)]);

				case 14:
					result = _context26.sent;

					deepEqual(result, [1, 3]);
					_context26.next = 18;
					return _streamline.await(_filename, 130, [1, 2, 3, 4], 'filter_', 0, null, false, [true, -1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$22(_25, val) {
						return regeneratorRuntime.wrap(function _$$$$22$(_context23) {
							while (1) {
								switch (_context23.prev = _context23.next) {
									case 0:
										_context23.next = 2;
										return _streamline.await(_filename, 131, null, delay, 0, null, false, [true, val]);

									case 2:
										_context23.t0 = _context23.sent;
										return _context23.abrupt('return', _context23.t0 % 2);

									case 4:
									case 'end':
										return _context23.stop();
								}
							}
						}, _$$$$22, this);
					}), 0, 2)]);

				case 18:
					result = _context26.sent;

					deepEqual(result, [1, 3]);
					_context26.next = 22;
					return _streamline.await(_filename, 134, sparse(), 'filter_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$23(_26, val, i) {
						return regeneratorRuntime.wrap(function _$$$$23$(_context24) {
							while (1) {
								switch (_context24.prev = _context24.next) {
									case 0:
										_context24.next = 2;
										return _streamline.await(_filename, 135, null, delay, 0, null, false, [true, val]);

									case 2:
										_context24.t0 = _context24.sent;
										return _context24.abrupt('return', _context24.t0 % 2);

									case 4:
									case 'end':
										return _context24.stop();
								}
							}
						}, _$$$$23, this);
					}), 0, 3)]);

				case 22:
					result = _context26.sent;

					strictEqual(result.length, 2);
					deepEqual(result, [33, 99]);
					_context26.next = 27;
					return _streamline.await(_filename, 139, sparse(), 'filter_', 0, null, false, [true, -1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$24(_27, val, i) {
						return regeneratorRuntime.wrap(function _$$$$24$(_context25) {
							while (1) {
								switch (_context25.prev = _context25.next) {
									case 0:
										_context25.next = 2;
										return _streamline.await(_filename, 140, null, delay, 0, null, false, [true, val]);

									case 2:
										_context25.t0 = _context25.sent;
										return _context25.abrupt('return', _context25.t0 % 2);

									case 4:
									case 'end':
										return _context25.stop();
								}
							}
						}, _$$$$24, this);
					}), 0, 3)]);

				case 27:
					result = _context26.sent;

					strictEqual(result.length, 2);
					deepEqual(result, [33, 99]);
					start();

				case 31:
				case 'end':
					return _context26.stop();
			}
		}
	}, _$$$$17, this);
}), 0, 1));
asyncTest("every true", 9, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$25(_28) {
	var result;
	return regeneratorRuntime.wrap(function _$$$$25$(_context36) {
		while (1) {
			switch (_context36.prev = _context36.next) {
				case 0:
					_context36.next = 2;
					return _streamline.await(_filename, 147, flows, 'every', 0, null, false, [true, [1, 2, 3, 4], _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$26(_29, val) {
						return regeneratorRuntime.wrap(function _$$$$26$(_context27) {
							while (1) {
								switch (_context27.prev = _context27.next) {
									case 0:
										_context27.next = 2;
										return _streamline.await(_filename, 148, null, delay, 0, null, false, [true, val]);

									case 2:
										_context27.t0 = _context27.sent;
										return _context27.abrupt('return', _context27.t0 < 5);

									case 4:
									case 'end':
										return _context27.stop();
								}
							}
						}, _$$$$26, this);
					}), 0, 2)]);

				case 2:
					result = _context36.sent;

					strictEqual(result, true);
					_context36.next = 6;
					return _streamline.await(_filename, 151, [1, 2, 3, 4], 'every_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$27(_30, val) {
						return regeneratorRuntime.wrap(function _$$$$27$(_context28) {
							while (1) {
								switch (_context28.prev = _context28.next) {
									case 0:
										_context28.next = 2;
										return _streamline.await(_filename, 152, null, delay, 0, null, false, [true, val]);

									case 2:
										_context28.t0 = _context28.sent;
										return _context28.abrupt('return', _context28.t0 < 5);

									case 4:
									case 'end':
										return _context28.stop();
								}
							}
						}, _$$$$27, this);
					}), 0, 2)]);

				case 6:
					result = _context36.sent;

					strictEqual(result, true);
					_context36.next = 10;
					return _streamline.await(_filename, 155, [1, 2, 3, 4], 'every_', 0, null, false, [true, 2, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$28(_31, val) {
						return regeneratorRuntime.wrap(function _$$$$28$(_context29) {
							while (1) {
								switch (_context29.prev = _context29.next) {
									case 0:
										_context29.next = 2;
										return _streamline.await(_filename, 156, null, delay, 0, null, false, [true, val]);

									case 2:
										_context29.t0 = _context29.sent;
										return _context29.abrupt('return', _context29.t0 < 5);

									case 4:
									case 'end':
										return _context29.stop();
								}
							}
						}, _$$$$28, this);
					}), 0, 2)]);

				case 10:
					result = _context36.sent;

					strictEqual(result, true);
					_context36.next = 14;
					return _streamline.await(_filename, 159, [1, 2, 3, 4], 'every_', 0, null, false, [true, {
						parallel: 2
					}, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$29(_32, val) {
						return regeneratorRuntime.wrap(function _$$$$29$(_context30) {
							while (1) {
								switch (_context30.prev = _context30.next) {
									case 0:
										_context30.next = 2;
										return _streamline.await(_filename, 162, null, delay, 0, null, false, [true, val]);

									case 2:
										_context30.t0 = _context30.sent;
										return _context30.abrupt('return', _context30.t0 < 5);

									case 4:
									case 'end':
										return _context30.stop();
								}
							}
						}, _$$$$29, this);
					}), 0, 2)]);

				case 14:
					result = _context36.sent;

					strictEqual(result, true);
					_context36.next = 18;
					return _streamline.await(_filename, 165, [1, 2, 3, 4], 'every_', 0, null, false, [true, -1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$30(_33, val) {
						return regeneratorRuntime.wrap(function _$$$$30$(_context31) {
							while (1) {
								switch (_context31.prev = _context31.next) {
									case 0:
										_context31.next = 2;
										return _streamline.await(_filename, 166, null, delay, 0, null, false, [true, val]);

									case 2:
										_context31.t0 = _context31.sent;
										return _context31.abrupt('return', _context31.t0 < 5);

									case 4:
									case 'end':
										return _context31.stop();
								}
							}
						}, _$$$$30, this);
					}), 0, 2)]);

				case 18:
					result = _context36.sent;

					strictEqual(result, true);
					_context36.next = 22;
					return _streamline.await(_filename, 169, sparse(), 'every_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$31(_34, val, i) {
						return regeneratorRuntime.wrap(function _$$$$31$(_context32) {
							while (1) {
								switch (_context32.prev = _context32.next) {
									case 0:
										_context32.next = 2;
										return _streamline.await(_filename, 170, null, delay, 0, null, false, [true, val]);

									case 2:
										_context32.t0 = _context32.sent;
										return _context32.abrupt('return', _context32.t0 > 30);

									case 4:
									case 'end':
										return _context32.stop();
								}
							}
						}, _$$$$31, this);
					}), 0, 3)]);

				case 22:
					result = _context36.sent;

					strictEqual(result, true);
					_context36.next = 26;
					return _streamline.await(_filename, 173, sparse(), 'every_', 0, null, false, [true, -1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$32(_35, val, i) {
						return regeneratorRuntime.wrap(function _$$$$32$(_context33) {
							while (1) {
								switch (_context33.prev = _context33.next) {
									case 0:
										_context33.next = 2;
										return _streamline.await(_filename, 174, null, delay, 0, null, false, [true, val]);

									case 2:
										_context33.t0 = _context33.sent;
										return _context33.abrupt('return', _context33.t0 > 30);

									case 4:
									case 'end':
										return _context33.stop();
								}
							}
						}, _$$$$32, this);
					}), 0, 3)]);

				case 26:
					result = _context36.sent;

					strictEqual(result, true);
					_context36.next = 30;
					return _streamline.await(_filename, 177, [1, 4, 9, 16], 'every_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$33(_36, val, i) {
						return regeneratorRuntime.wrap(function _$$$$33$(_context34) {
							while (1) {
								switch (_context34.prev = _context34.next) {
									case 0:
										_context34.next = 2;
										return _streamline.await(_filename, 178, null, delay, 0, null, false, [true, i]);

									case 2:
										_context34.t0 = _context34.sent;
										return _context34.abrupt('return', _context34.t0 < 4);

									case 4:
									case 'end':
										return _context34.stop();
								}
							}
						}, _$$$$33, this);
					}), 0, 3)]);

				case 30:
					result = _context36.sent;

					strictEqual(result, true);
					_context36.next = 34;
					return _streamline.await(_filename, 181, [1, 4, 9, 16], 'every_', 0, null, false, [true, -1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$34(_37, val, i) {
						return regeneratorRuntime.wrap(function _$$$$34$(_context35) {
							while (1) {
								switch (_context35.prev = _context35.next) {
									case 0:
										_context35.next = 2;
										return _streamline.await(_filename, 182, null, delay, 0, null, false, [true, i]);

									case 2:
										_context35.t0 = _context35.sent;
										return _context35.abrupt('return', _context35.t0 < 4);

									case 4:
									case 'end':
										return _context35.stop();
								}
							}
						}, _$$$$34, this);
					}), 0, 3)]);

				case 34:
					result = _context36.sent;

					strictEqual(result, true);
					start();

				case 37:
				case 'end':
					return _context36.stop();
			}
		}
	}, _$$$$25, this);
}), 0, 1));
asyncTest("every false", 9, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$35(_38) {
	var result;
	return regeneratorRuntime.wrap(function _$$$$35$(_context46) {
		while (1) {
			switch (_context46.prev = _context46.next) {
				case 0:
					_context46.next = 2;
					return _streamline.await(_filename, 188, flows, 'every', 0, null, false, [true, [1, 2, 3, 4], _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$36(_39, val) {
						return regeneratorRuntime.wrap(function _$$$$36$(_context37) {
							while (1) {
								switch (_context37.prev = _context37.next) {
									case 0:
										_context37.next = 2;
										return _streamline.await(_filename, 189, null, delay, 0, null, false, [true, val]);

									case 2:
										_context37.t0 = _context37.sent;
										return _context37.abrupt('return', _context37.t0 < 3);

									case 4:
									case 'end':
										return _context37.stop();
								}
							}
						}, _$$$$36, this);
					}), 0, 2)]);

				case 2:
					result = _context46.sent;

					strictEqual(result, false);
					_context46.next = 6;
					return _streamline.await(_filename, 192, [1, 2, 3, 4], 'every_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$37(_40, val) {
						return regeneratorRuntime.wrap(function _$$$$37$(_context38) {
							while (1) {
								switch (_context38.prev = _context38.next) {
									case 0:
										_context38.next = 2;
										return _streamline.await(_filename, 193, null, delay, 0, null, false, [true, val]);

									case 2:
										_context38.t0 = _context38.sent;
										return _context38.abrupt('return', _context38.t0 < 3);

									case 4:
									case 'end':
										return _context38.stop();
								}
							}
						}, _$$$$37, this);
					}), 0, 2)]);

				case 6:
					result = _context46.sent;

					strictEqual(result, false);
					_context46.next = 10;
					return _streamline.await(_filename, 196, [1, 2, 3, 4], 'every_', 0, null, false, [true, 2, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$38(_41, val) {
						return regeneratorRuntime.wrap(function _$$$$38$(_context39) {
							while (1) {
								switch (_context39.prev = _context39.next) {
									case 0:
										_context39.next = 2;
										return _streamline.await(_filename, 197, null, delay, 0, null, false, [true, val]);

									case 2:
										_context39.t0 = _context39.sent;
										return _context39.abrupt('return', _context39.t0 < 3);

									case 4:
									case 'end':
										return _context39.stop();
								}
							}
						}, _$$$$38, this);
					}), 0, 2)]);

				case 10:
					result = _context46.sent;

					strictEqual(result, false);
					_context46.next = 14;
					return _streamline.await(_filename, 200, [1, 2, 3, 4], 'every_', 0, null, false, [true, {
						parallel: 2
					}, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$39(_42, val) {
						return regeneratorRuntime.wrap(function _$$$$39$(_context40) {
							while (1) {
								switch (_context40.prev = _context40.next) {
									case 0:
										_context40.next = 2;
										return _streamline.await(_filename, 203, null, delay, 0, null, false, [true, val]);

									case 2:
										_context40.t0 = _context40.sent;
										return _context40.abrupt('return', _context40.t0 < 3);

									case 4:
									case 'end':
										return _context40.stop();
								}
							}
						}, _$$$$39, this);
					}), 0, 2)]);

				case 14:
					result = _context46.sent;

					strictEqual(result, false);
					_context46.next = 18;
					return _streamline.await(_filename, 206, [1, 2, 3, 4], 'every_', 0, null, false, [true, -1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$40(_43, val) {
						return regeneratorRuntime.wrap(function _$$$$40$(_context41) {
							while (1) {
								switch (_context41.prev = _context41.next) {
									case 0:
										_context41.next = 2;
										return _streamline.await(_filename, 207, null, delay, 0, null, false, [true, val]);

									case 2:
										_context41.t0 = _context41.sent;
										return _context41.abrupt('return', _context41.t0 < 3);

									case 4:
									case 'end':
										return _context41.stop();
								}
							}
						}, _$$$$40, this);
					}), 0, 2)]);

				case 18:
					result = _context46.sent;

					strictEqual(result, false);
					_context46.next = 22;
					return _streamline.await(_filename, 210, sparse(), 'every_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$41(_44, val) {
						return regeneratorRuntime.wrap(function _$$$$41$(_context42) {
							while (1) {
								switch (_context42.prev = _context42.next) {
									case 0:
										_context42.next = 2;
										return _streamline.await(_filename, 211, null, delay, 0, null, false, [true, val]);

									case 2:
										_context42.t0 = _context42.sent;
										return _context42.abrupt('return', _context42.t0 > 40);

									case 4:
									case 'end':
										return _context42.stop();
								}
							}
						}, _$$$$41, this);
					}), 0, 2)]);

				case 22:
					result = _context46.sent;

					strictEqual(result, false);
					_context46.next = 26;
					return _streamline.await(_filename, 214, sparse(), 'every_', 0, null, false, [true, -1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$42(_45, val) {
						return regeneratorRuntime.wrap(function _$$$$42$(_context43) {
							while (1) {
								switch (_context43.prev = _context43.next) {
									case 0:
										_context43.next = 2;
										return _streamline.await(_filename, 215, null, delay, 0, null, false, [true, val]);

									case 2:
										_context43.t0 = _context43.sent;
										return _context43.abrupt('return', _context43.t0 > 40);

									case 4:
									case 'end':
										return _context43.stop();
								}
							}
						}, _$$$$42, this);
					}), 0, 2)]);

				case 26:
					result = _context46.sent;

					strictEqual(result, false);
					_context46.next = 30;
					return _streamline.await(_filename, 218, [1, 4, 9, 16], 'every_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$43(_46, val, i) {
						return regeneratorRuntime.wrap(function _$$$$43$(_context44) {
							while (1) {
								switch (_context44.prev = _context44.next) {
									case 0:
										_context44.next = 2;
										return _streamline.await(_filename, 219, null, delay, 0, null, false, [true, i]);

									case 2:
										_context44.t0 = _context44.sent;
										return _context44.abrupt('return', _context44.t0 < 3);

									case 4:
									case 'end':
										return _context44.stop();
								}
							}
						}, _$$$$43, this);
					}), 0, 3)]);

				case 30:
					result = _context46.sent;

					strictEqual(result, false);
					_context46.next = 34;
					return _streamline.await(_filename, 222, [1, 4, 9, 16], 'every_', 0, null, false, [true, -1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$44(_47, val, i) {
						return regeneratorRuntime.wrap(function _$$$$44$(_context45) {
							while (1) {
								switch (_context45.prev = _context45.next) {
									case 0:
										_context45.next = 2;
										return _streamline.await(_filename, 223, null, delay, 0, null, false, [true, i]);

									case 2:
										_context45.t0 = _context45.sent;
										return _context45.abrupt('return', _context45.t0 < 3);

									case 4:
									case 'end':
										return _context45.stop();
								}
							}
						}, _$$$$44, this);
					}), 0, 3)]);

				case 34:
					result = _context46.sent;

					strictEqual(result, false);
					start();

				case 37:
				case 'end':
					return _context46.stop();
			}
		}
	}, _$$$$35, this);
}), 0, 1));
asyncTest("some true", 9, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$45(_48) {
	var result;
	return regeneratorRuntime.wrap(function _$$$$45$(_context56) {
		while (1) {
			switch (_context56.prev = _context56.next) {
				case 0:
					_context56.next = 2;
					return _streamline.await(_filename, 229, flows, 'some', 0, null, false, [true, [1, 2, 3, 4], _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$46(_49, val) {
						return regeneratorRuntime.wrap(function _$$$$46$(_context47) {
							while (1) {
								switch (_context47.prev = _context47.next) {
									case 0:
										_context47.next = 2;
										return _streamline.await(_filename, 230, null, delay, 0, null, false, [true, val]);

									case 2:
										_context47.t0 = _context47.sent;
										return _context47.abrupt('return', _context47.t0 < 3);

									case 4:
									case 'end':
										return _context47.stop();
								}
							}
						}, _$$$$46, this);
					}), 0, 2)]);

				case 2:
					result = _context56.sent;

					strictEqual(result, true);
					_context56.next = 6;
					return _streamline.await(_filename, 233, [1, 2, 3, 4], 'some_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$47(_50, val) {
						return regeneratorRuntime.wrap(function _$$$$47$(_context48) {
							while (1) {
								switch (_context48.prev = _context48.next) {
									case 0:
										_context48.next = 2;
										return _streamline.await(_filename, 234, null, delay, 0, null, false, [true, val]);

									case 2:
										_context48.t0 = _context48.sent;
										return _context48.abrupt('return', _context48.t0 < 3);

									case 4:
									case 'end':
										return _context48.stop();
								}
							}
						}, _$$$$47, this);
					}), 0, 2)]);

				case 6:
					result = _context56.sent;

					strictEqual(result, true);
					_context56.next = 10;
					return _streamline.await(_filename, 237, [1, 2, 3, 4], 'some_', 0, null, false, [true, 2, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$48(_51, val) {
						return regeneratorRuntime.wrap(function _$$$$48$(_context49) {
							while (1) {
								switch (_context49.prev = _context49.next) {
									case 0:
										_context49.next = 2;
										return _streamline.await(_filename, 238, null, delay, 0, null, false, [true, val]);

									case 2:
										_context49.t0 = _context49.sent;
										return _context49.abrupt('return', _context49.t0 < 3);

									case 4:
									case 'end':
										return _context49.stop();
								}
							}
						}, _$$$$48, this);
					}), 0, 2)]);

				case 10:
					result = _context56.sent;

					strictEqual(result, true);
					_context56.next = 14;
					return _streamline.await(_filename, 241, [1, 2, 3, 4], 'some_', 0, null, false, [true, {
						parallel: 2
					}, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$49(_52, val) {
						return regeneratorRuntime.wrap(function _$$$$49$(_context50) {
							while (1) {
								switch (_context50.prev = _context50.next) {
									case 0:
										_context50.next = 2;
										return _streamline.await(_filename, 244, null, delay, 0, null, false, [true, val]);

									case 2:
										_context50.t0 = _context50.sent;
										return _context50.abrupt('return', _context50.t0 < 3);

									case 4:
									case 'end':
										return _context50.stop();
								}
							}
						}, _$$$$49, this);
					}), 0, 2)]);

				case 14:
					result = _context56.sent;

					strictEqual(result, true);
					_context56.next = 18;
					return _streamline.await(_filename, 247, [1, 2, 3, 4], 'some_', 0, null, false, [true, -1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$50(_53, val) {
						return regeneratorRuntime.wrap(function _$$$$50$(_context51) {
							while (1) {
								switch (_context51.prev = _context51.next) {
									case 0:
										_context51.next = 2;
										return _streamline.await(_filename, 248, null, delay, 0, null, false, [true, val]);

									case 2:
										_context51.t0 = _context51.sent;
										return _context51.abrupt('return', _context51.t0 < 3);

									case 4:
									case 'end':
										return _context51.stop();
								}
							}
						}, _$$$$50, this);
					}), 0, 2)]);

				case 18:
					result = _context56.sent;

					strictEqual(result, true);
					_context56.next = 22;
					return _streamline.await(_filename, 251, sparse(), 'some_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$51(_54, val) {
						return regeneratorRuntime.wrap(function _$$$$51$(_context52) {
							while (1) {
								switch (_context52.prev = _context52.next) {
									case 0:
										_context52.next = 2;
										return _streamline.await(_filename, 252, null, delay, 0, null, false, [true, val]);

									case 2:
										_context52.t0 = _context52.sent;
										return _context52.abrupt('return', _context52.t0 > 30);

									case 4:
									case 'end':
										return _context52.stop();
								}
							}
						}, _$$$$51, this);
					}), 0, 2)]);

				case 22:
					result = _context56.sent;

					strictEqual(result, true);
					_context56.next = 26;
					return _streamline.await(_filename, 255, sparse(), 'some_', 0, null, false, [true, -1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$52(_55, val) {
						return regeneratorRuntime.wrap(function _$$$$52$(_context53) {
							while (1) {
								switch (_context53.prev = _context53.next) {
									case 0:
										_context53.next = 2;
										return _streamline.await(_filename, 256, null, delay, 0, null, false, [true, val]);

									case 2:
										_context53.t0 = _context53.sent;
										return _context53.abrupt('return', _context53.t0 > 30);

									case 4:
									case 'end':
										return _context53.stop();
								}
							}
						}, _$$$$52, this);
					}), 0, 2)]);

				case 26:
					result = _context56.sent;

					strictEqual(result, true);
					_context56.next = 30;
					return _streamline.await(_filename, 259, [1, 4, 9, 16], 'some_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$53(_56, val, i) {
						return regeneratorRuntime.wrap(function _$$$$53$(_context54) {
							while (1) {
								switch (_context54.prev = _context54.next) {
									case 0:
										_context54.next = 2;
										return _streamline.await(_filename, 260, null, delay, 0, null, false, [true, i]);

									case 2:
										_context54.t0 = _context54.sent;
										return _context54.abrupt('return', _context54.t0 === 2);

									case 4:
									case 'end':
										return _context54.stop();
								}
							}
						}, _$$$$53, this);
					}), 0, 3)]);

				case 30:
					result = _context56.sent;

					strictEqual(result, true);
					_context56.next = 34;
					return _streamline.await(_filename, 263, [1, 4, 9, 16], 'some_', 0, null, false, [true, -1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$54(_57, val, i) {
						return regeneratorRuntime.wrap(function _$$$$54$(_context55) {
							while (1) {
								switch (_context55.prev = _context55.next) {
									case 0:
										_context55.next = 2;
										return _streamline.await(_filename, 264, null, delay, 0, null, false, [true, i]);

									case 2:
										_context55.t0 = _context55.sent;
										return _context55.abrupt('return', _context55.t0 === 2);

									case 4:
									case 'end':
										return _context55.stop();
								}
							}
						}, _$$$$54, this);
					}), 0, 3)]);

				case 34:
					result = _context56.sent;

					strictEqual(result, true);
					start();

				case 37:
				case 'end':
					return _context56.stop();
			}
		}
	}, _$$$$45, this);
}), 0, 1));
asyncTest("some false", 9, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$55(_58) {
	var result;
	return regeneratorRuntime.wrap(function _$$$$55$(_context66) {
		while (1) {
			switch (_context66.prev = _context66.next) {
				case 0:
					_context66.next = 2;
					return _streamline.await(_filename, 270, flows, 'some', 0, null, false, [true, [1, 2, 3, 4], _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$56(_59, val) {
						return regeneratorRuntime.wrap(function _$$$$56$(_context57) {
							while (1) {
								switch (_context57.prev = _context57.next) {
									case 0:
										_context57.next = 2;
										return _streamline.await(_filename, 271, null, delay, 0, null, false, [true, val]);

									case 2:
										_context57.t0 = _context57.sent;
										return _context57.abrupt('return', _context57.t0 < 0);

									case 4:
									case 'end':
										return _context57.stop();
								}
							}
						}, _$$$$56, this);
					}), 0, 2)]);

				case 2:
					result = _context66.sent;

					strictEqual(result, false);
					_context66.next = 6;
					return _streamline.await(_filename, 274, [1, 2, 3, 4], 'some_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$57(_60, val) {
						return regeneratorRuntime.wrap(function _$$$$57$(_context58) {
							while (1) {
								switch (_context58.prev = _context58.next) {
									case 0:
										_context58.next = 2;
										return _streamline.await(_filename, 275, null, delay, 0, null, false, [true, val]);

									case 2:
										_context58.t0 = _context58.sent;
										return _context58.abrupt('return', _context58.t0 < 0);

									case 4:
									case 'end':
										return _context58.stop();
								}
							}
						}, _$$$$57, this);
					}), 0, 2)]);

				case 6:
					result = _context66.sent;

					strictEqual(result, false);
					_context66.next = 10;
					return _streamline.await(_filename, 278, [1, 2, 3, 4], 'some_', 0, null, false, [true, 2, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$58(_61, val) {
						return regeneratorRuntime.wrap(function _$$$$58$(_context59) {
							while (1) {
								switch (_context59.prev = _context59.next) {
									case 0:
										_context59.next = 2;
										return _streamline.await(_filename, 279, null, delay, 0, null, false, [true, val]);

									case 2:
										_context59.t0 = _context59.sent;
										return _context59.abrupt('return', _context59.t0 < 0);

									case 4:
									case 'end':
										return _context59.stop();
								}
							}
						}, _$$$$58, this);
					}), 0, 2)]);

				case 10:
					result = _context66.sent;

					strictEqual(result, false);
					_context66.next = 14;
					return _streamline.await(_filename, 282, [1, 2, 3, 4], 'some_', 0, null, false, [true, {
						parallel: 2
					}, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$59(_62, val) {
						return regeneratorRuntime.wrap(function _$$$$59$(_context60) {
							while (1) {
								switch (_context60.prev = _context60.next) {
									case 0:
										_context60.next = 2;
										return _streamline.await(_filename, 285, null, delay, 0, null, false, [true, val]);

									case 2:
										_context60.t0 = _context60.sent;
										return _context60.abrupt('return', _context60.t0 < 0);

									case 4:
									case 'end':
										return _context60.stop();
								}
							}
						}, _$$$$59, this);
					}), 0, 2)]);

				case 14:
					result = _context66.sent;

					strictEqual(result, false);
					_context66.next = 18;
					return _streamline.await(_filename, 288, [1, 2, 3, 4], 'some_', 0, null, false, [true, -1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$60(_63, val) {
						return regeneratorRuntime.wrap(function _$$$$60$(_context61) {
							while (1) {
								switch (_context61.prev = _context61.next) {
									case 0:
										_context61.next = 2;
										return _streamline.await(_filename, 289, null, delay, 0, null, false, [true, val]);

									case 2:
										_context61.t0 = _context61.sent;
										return _context61.abrupt('return', _context61.t0 < 0);

									case 4:
									case 'end':
										return _context61.stop();
								}
							}
						}, _$$$$60, this);
					}), 0, 2)]);

				case 18:
					result = _context66.sent;

					strictEqual(result, false);
					_context66.next = 22;
					return _streamline.await(_filename, 292, sparse(), 'some_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$61(_64, val) {
						return regeneratorRuntime.wrap(function _$$$$61$(_context62) {
							while (1) {
								switch (_context62.prev = _context62.next) {
									case 0:
										_context62.next = 2;
										return _streamline.await(_filename, 293, null, delay, 0, null, false, [true, val]);

									case 2:
										_context62.t0 = _context62.sent;
										return _context62.abrupt('return', !(_context62.t0 > 20));

									case 4:
									case 'end':
										return _context62.stop();
								}
							}
						}, _$$$$61, this);
					}), 0, 2)]);

				case 22:
					result = _context66.sent;

					strictEqual(result, false);
					_context66.next = 26;
					return _streamline.await(_filename, 296, sparse(), 'some_', 0, null, false, [true, -1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$62(_65, val) {
						return regeneratorRuntime.wrap(function _$$$$62$(_context63) {
							while (1) {
								switch (_context63.prev = _context63.next) {
									case 0:
										_context63.next = 2;
										return _streamline.await(_filename, 297, null, delay, 0, null, false, [true, val]);

									case 2:
										_context63.t0 = _context63.sent;
										return _context63.abrupt('return', !(_context63.t0 > 20));

									case 4:
									case 'end':
										return _context63.stop();
								}
							}
						}, _$$$$62, this);
					}), 0, 2)]);

				case 26:
					result = _context66.sent;

					strictEqual(result, false);
					_context66.next = 30;
					return _streamline.await(_filename, 300, [1, 4, 9, 16], 'some_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$63(_66, val, i) {
						return regeneratorRuntime.wrap(function _$$$$63$(_context64) {
							while (1) {
								switch (_context64.prev = _context64.next) {
									case 0:
										_context64.next = 2;
										return _streamline.await(_filename, 301, null, delay, 0, null, false, [true, i]);

									case 2:
										_context64.t0 = _context64.sent;
										return _context64.abrupt('return', _context64.t0 === 9);

									case 4:
									case 'end':
										return _context64.stop();
								}
							}
						}, _$$$$63, this);
					}), 0, 3)]);

				case 30:
					result = _context66.sent;

					strictEqual(result, false);
					_context66.next = 34;
					return _streamline.await(_filename, 304, [1, 4, 9, 16], 'some_', 0, null, false, [true, -1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$64(_67, val, i) {
						return regeneratorRuntime.wrap(function _$$$$64$(_context65) {
							while (1) {
								switch (_context65.prev = _context65.next) {
									case 0:
										_context65.next = 2;
										return _streamline.await(_filename, 305, null, delay, 0, null, false, [true, i]);

									case 2:
										_context65.t0 = _context65.sent;
										return _context65.abrupt('return', _context65.t0 === 9);

									case 4:
									case 'end':
										return _context65.stop();
								}
							}
						}, _$$$$64, this);
					}), 0, 3)]);

				case 34:
					result = _context66.sent;

					strictEqual(result, false);
					start();

				case 37:
				case 'end':
					return _context66.stop();
			}
		}
	}, _$$$$55, this);
}), 0, 1));
asyncTest("reduce", 3, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$65(_68) {
	var result;
	return regeneratorRuntime.wrap(function _$$$$65$(_context70) {
		while (1) {
			switch (_context70.prev = _context70.next) {
				case 0:
					_context70.next = 2;
					return _streamline.await(_filename, 311, flows, 'reduce', 0, null, false, [true, [1, 2, 3, 4], _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$66(_69, v, val) {
						return regeneratorRuntime.wrap(function _$$$$66$(_context67) {
							while (1) {
								switch (_context67.prev = _context67.next) {
									case 0:
										_context67.t0 = v;
										_context67.next = 3;
										return _streamline.await(_filename, 312, null, delay, 0, null, false, [true, val]);

									case 3:
										_context67.t1 = _context67.sent;
										return _context67.abrupt('return', _context67.t0 * _context67.t1);

									case 5:
									case 'end':
										return _context67.stop();
								}
							}
						}, _$$$$66, this);
					}), 0, 3), 1]);

				case 2:
					result = _context70.sent;

					strictEqual(result, 24);
					_context70.next = 6;
					return _streamline.await(_filename, 315, [1, 2, 3, 4], 'reduce_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$67(_70, v, val) {
						return regeneratorRuntime.wrap(function _$$$$67$(_context68) {
							while (1) {
								switch (_context68.prev = _context68.next) {
									case 0:
										_context68.t0 = v;
										_context68.next = 3;
										return _streamline.await(_filename, 316, null, delay, 0, null, false, [true, val]);

									case 3:
										_context68.t1 = _context68.sent;
										return _context68.abrupt('return', _context68.t0 * _context68.t1);

									case 5:
									case 'end':
										return _context68.stop();
								}
							}
						}, _$$$$67, this);
					}), 0, 3), 1]);

				case 6:
					result = _context70.sent;

					strictEqual(result, 24);
					_context70.next = 10;
					return _streamline.await(_filename, 319, sparse(), 'reduce_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$68(_71, v, val, i) {
						return regeneratorRuntime.wrap(function _$$$$68$(_context69) {
							while (1) {
								switch (_context69.prev = _context69.next) {
									case 0:
										_context69.t0 = v + '/';
										_context69.next = 3;
										return _streamline.await(_filename, 320, null, delay, 0, null, false, [true, val]);

									case 3:
										_context69.t1 = _context69.sent;
										_context69.t2 = _context69.t0 + _context69.t1;
										_context69.t3 = i;
										return _context69.abrupt('return', _context69.t2 + _context69.t3);

									case 7:
									case 'end':
										return _context69.stop();
								}
							}
						}, _$$$$68, this);
					}), 0, 4), '']);

				case 10:
					result = _context70.sent;

					strictEqual(result, '/332/445/997');
					start();

				case 13:
				case 'end':
					return _context70.stop();
			}
		}
	}, _$$$$65, this);
}), 0, 1));
asyncTest("reduceRight", 3, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$69(_72) {
	var result;
	return regeneratorRuntime.wrap(function _$$$$69$(_context74) {
		while (1) {
			switch (_context74.prev = _context74.next) {
				case 0:
					_context74.next = 2;
					return _streamline.await(_filename, 326, flows, 'reduceRight', 0, null, false, [true, [1, 2, 3, 4], _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$70(_73, v, val) {
						return regeneratorRuntime.wrap(function _$$$$70$(_context71) {
							while (1) {
								switch (_context71.prev = _context71.next) {
									case 0:
										_context71.t0 = v;
										_context71.next = 3;
										return _streamline.await(_filename, 327, null, delay, 0, null, false, [true, val]);

									case 3:
										_context71.t1 = _context71.sent;
										return _context71.abrupt('return', _context71.t0 * _context71.t1);

									case 5:
									case 'end':
										return _context71.stop();
								}
							}
						}, _$$$$70, this);
					}), 0, 3), 1]);

				case 2:
					result = _context74.sent;

					strictEqual(result, 24);
					_context74.next = 6;
					return _streamline.await(_filename, 330, [1, 2, 3, 4], 'reduceRight_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$71(_74, v, val) {
						return regeneratorRuntime.wrap(function _$$$$71$(_context72) {
							while (1) {
								switch (_context72.prev = _context72.next) {
									case 0:
										_context72.t0 = v;
										_context72.next = 3;
										return _streamline.await(_filename, 331, null, delay, 0, null, false, [true, val]);

									case 3:
										_context72.t1 = _context72.sent;
										return _context72.abrupt('return', _context72.t0 * _context72.t1);

									case 5:
									case 'end':
										return _context72.stop();
								}
							}
						}, _$$$$71, this);
					}), 0, 3), 1]);

				case 6:
					result = _context74.sent;

					strictEqual(result, 24);
					_context74.next = 10;
					return _streamline.await(_filename, 334, sparse(), 'reduceRight_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$72(_75, v, val, i) {
						return regeneratorRuntime.wrap(function _$$$$72$(_context73) {
							while (1) {
								switch (_context73.prev = _context73.next) {
									case 0:
										_context73.t0 = v + '/';
										_context73.next = 3;
										return _streamline.await(_filename, 335, null, delay, 0, null, false, [true, val]);

									case 3:
										_context73.t1 = _context73.sent;
										_context73.t2 = _context73.t0 + _context73.t1;
										_context73.t3 = i;
										return _context73.abrupt('return', _context73.t2 + _context73.t3);

									case 7:
									case 'end':
										return _context73.stop();
								}
							}
						}, _$$$$72, this);
					}), 0, 4), '']);

				case 10:
					result = _context74.sent;

					strictEqual(result, '/997/445/332');
					start();

				case 13:
				case 'end':
					return _context74.stop();
			}
		}
	}, _$$$$69, this);
}), 0, 1));
asyncTest("sort", 4, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$73(_76) {
	var array;
	return regeneratorRuntime.wrap(function _$$$$73$(_context79) {
		while (1) {
			switch (_context79.prev = _context79.next) {
				case 0:
					array = [1, 2, 3, 4];
					_context79.next = 3;
					return _streamline.await(_filename, 342, flows, 'sort', 0, null, false, [true, array, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$74(_77, a, b) {
						return regeneratorRuntime.wrap(function _$$$$74$(_context75) {
							while (1) {
								switch (_context75.prev = _context75.next) {
									case 0:
										_context75.next = 2;
										return _streamline.await(_filename, 343, null, delay, 0, null, false, [true, a - b]);

									case 2:
										return _context75.abrupt('return', _context75.sent);

									case 3:
									case 'end':
										return _context75.stop();
								}
							}
						}, _$$$$74, this);
					}), 0, 3)]);

				case 3:
					deepEqual(array, [1, 2, 3, 4], "In order array sort ok");
					_context79.next = 6;
					return _streamline.await(_filename, 346, array, 'sort_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$75(_78, a, b) {
						return regeneratorRuntime.wrap(function _$$$$75$(_context76) {
							while (1) {
								switch (_context76.prev = _context76.next) {
									case 0:
										_context76.next = 2;
										return _streamline.await(_filename, 347, null, delay, 0, null, false, [true, a - b]);

									case 2:
										return _context76.abrupt('return', _context76.sent);

									case 3:
									case 'end':
										return _context76.stop();
								}
							}
						}, _$$$$75, this);
					}), 0, 3)]);

				case 6:
					deepEqual(array, [1, 2, 3, 4], "In order array sort ok");
					array = [4, 3, 2, 1];
					_context79.next = 10;
					return _streamline.await(_filename, 351, array, 'sort_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$76(_79, a, b) {
						return regeneratorRuntime.wrap(function _$$$$76$(_context77) {
							while (1) {
								switch (_context77.prev = _context77.next) {
									case 0:
										_context77.next = 2;
										return _streamline.await(_filename, 352, null, delay, 0, null, false, [true, a - b]);

									case 2:
										return _context77.abrupt('return', _context77.sent);

									case 3:
									case 'end':
										return _context77.stop();
								}
							}
						}, _$$$$76, this);
					}), 0, 3)]);

				case 10:
					deepEqual(array, [1, 2, 3, 4], "Reverse array sort ok");
					array = [3, 1, 2, 4];
					_context79.next = 14;
					return _streamline.await(_filename, 356, array, 'sort_', 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$77(_80, a, b) {
						return regeneratorRuntime.wrap(function _$$$$77$(_context78) {
							while (1) {
								switch (_context78.prev = _context78.next) {
									case 0:
										_context78.next = 2;
										return _streamline.await(_filename, 357, null, delay, 0, null, false, [true, a - b]);

									case 2:
										return _context78.abrupt('return', _context78.sent);

									case 3:
									case 'end':
										return _context78.stop();
								}
							}
						}, _$$$$77, this);
					}), 0, 3)]);

				case 14:
					deepEqual(array, [1, 2, 3, 4], "Random array sort ok");
					start();

				case 16:
				case 'end':
					return _context79.stop();
			}
		}
	}, _$$$$73, this);
}), 0, 1));
asyncTest("collectAll", 4, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$78(_81) {
	var doIt, total, peak, count, results;
	return regeneratorRuntime.wrap(function _$$$$78$(_context81) {
		while (1) {
			switch (_context81.prev = _context81.next) {
				case 0:
					doIt = function doIt(i) {
						return _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$79(_82) {
							return regeneratorRuntime.wrap(function _$$$$79$(_context80) {
								while (1) {
									switch (_context80.prev = _context80.next) {
										case 0:
											count++;
											peak = Math.max(count, peak);
											_context80.next = 4;
											return _streamline.await(_filename, 371, null, setTimeout, 0, null, false, [true, 10]);

										case 4:
											_context80.next = 6;
											return _streamline.await(_filename, 372, null, delay, 0, null, false, [true, i]);

										case 6:
											_context80.t0 = _context80.sent;
											_context80.t1 = total;
											total = _context80.t0 + _context80.t1;

											count--;
											return _context80.abrupt('return', 2 * i);

										case 11:
										case 'end':
											return _context80.stop();
									}
								}
							}, _$$$$79, this);
						}), 0, 1);
					};

					total = 0;
					peak = 0;
					count = 0;
					_context81.next = 6;
					return _streamline.await(_filename, 378, flows.spray([doIt(1), doIt(2), doIt(3)]), 'collectAll', 0, null, false, [true]);

				case 6:
					results = _context81.sent;

					equal(total, 6);
					ok(peak >= 2);
					equal(count, 0);
					deepEqual(results, [2, 4, 6]);
					start();

				case 12:
				case 'end':
					return _context81.stop();
			}
		}
	}, _$$$$78, this);
}), 0, 1));
asyncTest("collectOne", 4, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$80(_83) {
	var doIt, total, peak, count, result;
	return regeneratorRuntime.wrap(function _$$$$80$(_context83) {
		while (1) {
			switch (_context83.prev = _context83.next) {
				case 0:
					doIt = function doIt(i) {
						return _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$81(_84) {
							return regeneratorRuntime.wrap(function _$$$$81$(_context82) {
								while (1) {
									switch (_context82.prev = _context82.next) {
										case 0:
											count++;
											peak = Math.max(count, peak);
											_context82.next = 4;
											return _streamline.await(_filename, 394, null, setTimeout, 0, null, false, [true, 10]);

										case 4:
											_context82.next = 6;
											return _streamline.await(_filename, 395, null, delay, 0, null, false, [true, i]);

										case 6:
											_context82.t0 = _context82.sent;
											_context82.t1 = total;
											total = _context82.t0 + _context82.t1;

											count--;
											return _context82.abrupt('return', 2 * i);

										case 11:
										case 'end':
											return _context82.stop();
									}
								}
							}, _$$$$81, this);
						}), 0, 1);
					};

					total = 0;
					peak = 0;
					count = 0;
					_context83.next = 6;
					return _streamline.await(_filename, 401, flows.spray([doIt(1), doIt(2), doIt(3)]), 'collectOne', 0, null, false, [true]);

				case 6:
					result = _context83.sent;

					ok(total == 1 || total == 2);
					ok(peak >= 2);
					ok(count > 0);
					ok(result == 2 || result == 4);
					start();

				case 12:
				case 'end':
					return _context83.stop();
			}
		}
	}, _$$$$80, this);
}), 0, 1));
asyncTest("collectAll with limit", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$82(_85) {
	var doIt, total, peak, count, results;
	return regeneratorRuntime.wrap(function _$$$$82$(_context85) {
		while (1) {
			switch (_context85.prev = _context85.next) {
				case 0:
					doIt = function doIt(i) {
						return _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$83(_86) {
							return regeneratorRuntime.wrap(function _$$$$83$(_context84) {
								while (1) {
									switch (_context84.prev = _context84.next) {
										case 0:
											count++;
											peak = Math.max(count, peak);
											_context84.next = 4;
											return _streamline.await(_filename, 417, null, setTimeout, 0, null, false, [true, 10]);

										case 4:
											_context84.next = 6;
											return _streamline.await(_filename, 418, null, delay, 0, null, false, [true, i]);

										case 6:
											_context84.t0 = _context84.sent;
											_context84.t1 = total;
											total = _context84.t0 + _context84.t1;

											count--;
											return _context84.abrupt('return', 2 * i);

										case 11:
										case 'end':
											return _context84.stop();
									}
								}
							}, _$$$$83, this);
						}), 0, 1);
					};

					total = 0;
					peak = 0;
					count = 0;
					_context85.next = 6;
					return _streamline.await(_filename, 424, flows.spray([doIt(1), doIt(2), doIt(3)], 2), 'collectAll', 0, null, false, [true]);

				case 6:
					results = _context85.sent;

					deepEqual([total, peak, count, results], [6, 2, 0, [2, 4, 6]]);
					start();

				case 9:
				case 'end':
					return _context85.stop();
			}
		}
	}, _$$$$82, this);
}), 0, 1));
asyncTest("contexts", 3, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$84(_87) {
	var testContext, result;
	return regeneratorRuntime.wrap(function _$$$$84$(_context89) {
		while (1) {
			switch (_context89.prev = _context89.next) {
				case 0:
					testContext = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$testContext$$(_88, x) {
						var y;
						return regeneratorRuntime.wrap(function _$$testContext$$$(_context86) {
							while (1) {
								switch (_context86.prev = _context86.next) {
									case 0:
										flows.setContext({
											val: x
										});
										_context86.next = 3;
										return _streamline.await(_filename, 433, null, delay, 0, null, false, [true, 2 * x]);

									case 3:
										y = _context86.sent;

										strictEqual(y, 2 * flows.getContext().val);
										return _context86.abrupt('return', y + 1);

									case 6:
									case 'end':
										return _context86.stop();
								}
							}
						}, _$$testContext$$, this);
					}), 0, 2);
					_context89.next = 3;
					return _streamline.await(_filename, 438, flows.spray([_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$85(_89) {
						return regeneratorRuntime.wrap(function _$$$$85$(_context87) {
							while (1) {
								switch (_context87.prev = _context87.next) {
									case 0:
										_context87.next = 2;
										return _streamline.await(_filename, 441, null, testContext, 0, null, false, [true, 3]);

									case 2:
										return _context87.abrupt('return', _context87.sent);

									case 3:
									case 'end':
										return _context87.stop();
								}
							}
						}, _$$$$85, this);
					}), 0, 1), _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$86(_90) {
						return regeneratorRuntime.wrap(function _$$$$86$(_context88) {
							while (1) {
								switch (_context88.prev = _context88.next) {
									case 0:
										_context88.next = 2;
										return _streamline.await(_filename, 445, null, testContext, 0, null, false, [true, 5]);

									case 2:
										return _context88.abrupt('return', _context88.sent);

									case 3:
									case 'end':
										return _context88.stop();
								}
							}
						}, _$$$$86, this);
					}), 0, 1)]), 'collectAll', 0, null, false, [true]);

				case 3:
					result = _context89.sent;

					deepEqual(result, [7, 11]);
					start();

				case 6:
				case 'end':
					return _context89.stop();
			}
		}
	}, _$$$$84, this);
}), 0, 1));

asyncTest("futures multiplex", 3, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$87(_91) {
	var doIt, result1, result2, result3, f1, f10;
	return regeneratorRuntime.wrap(function _$$$$87$(_context91) {
		while (1) {
			switch (_context91.prev = _context91.next) {
				case 0:
					doIt = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$doIt$$(future, _92) {
						return regeneratorRuntime.wrap(function _$$doIt$$$(_context90) {
							while (1) {
								switch (_context90.prev = _context90.next) {
									case 0:
										_context90.next = 2;
										return _streamline.await(_filename, 459, null, future, 0, null, false, [true]);

									case 2:
										_context90.t0 = _context90.sent;
										_context90.t1 = result1;
										result1 = _context90.t0 + _context90.t1;
										_context90.next = 7;
										return _streamline.await(_filename, 460, null, future, 0, null, false, [true]);

									case 7:
										_context90.t2 = _context90.sent;
										_context90.t3 = result2;
										result2 = _context90.t2 + _context90.t3;
										_context90.next = 12;
										return _streamline.await(_filename, 461, null, delay, 0, null, false, [true]);

									case 12:
										_context90.next = 14;
										return _streamline.await(_filename, 462, null, future, 0, null, false, [true]);

									case 14:
										_context90.t4 = _context90.sent;
										_context90.t5 = result3;
										result3 = _context90.t4 + _context90.t5;

									case 17:
									case 'end':
										return _context90.stop();
								}
							}
						}, _$$doIt$$, this);
					}), 1, 2);
					result1 = 0;
					result2 = 0;
					result3 = 0;
					f1 = _streamline.future(_filename, 465, null, delay, 0, null, false, [false, 1]);
					f10 = _streamline.future(_filename, 466, null, delay, 0, null, false, [false, 10]);
					_context91.next = 8;
					return _streamline.await(_filename, 468, flows, 'collect', 0, null, false, [true, [_streamline.future(_filename, 468, null, doIt, 1, null, false, [f1, false]), _streamline.future(_filename, 468, null, doIt, 1, null, false, [f10, false]), _streamline.future(_filename, 468, null, doIt, 1, null, false, [f1, false])]]);

				case 8:

					deepEqual(result1, 12);
					deepEqual(result2, 12);
					deepEqual(result3, 12);
					start();

				case 12:
				case 'end':
					return _context91.stop();
			}
		}
	}, _$$$$87, this);
}), 0, 1));

asyncTest("trampoline", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$88(_93) {
	var sums;
	return regeneratorRuntime.wrap(function _$$$$88$(_context94) {
		while (1) {
			switch (_context94.prev = _context94.next) {
				case 0:
					sums = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$sums$$(_94, n) {
						var fn;
						return regeneratorRuntime.wrap(function _$$sums$$$(_context93) {
							while (1) {
								switch (_context93.prev = _context93.next) {
									case 0:
										fn = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$89(_95) {
											return regeneratorRuntime.wrap(function _$$$$89$(_context92) {
												while (1) {
													switch (_context92.prev = _context92.next) {
														case 0:
															if (!(n > 0)) {
																	_context92.next = 8;
																	break;
																}

															_context92.t1 = n;
															_context92.next = 4;
															return _streamline.await(_filename, 479, null, sums, 0, null, false, [true, n - 1]);

														case 4:
															_context92.t2 = _context92.sent;
															_context92.t0 = _context92.t1 + _context92.t2;
															_context92.next = 9;
															break;

														case 8:
															_context92.t0 = 0;

														case 9:
															return _context92.abrupt('return', _context92.t0);

														case 10:
														case 'end':
															return _context92.stop();
													}
												}
											}, _$$$$89, this);
										}), 0, 1);

										if (!(n % 1000 === 0)) {
												_context93.next = 7;
												break;
											}

										_context93.next = 4;
										return _streamline.await(_filename, 481, flows, 'trampoline', 0, null, false, [true, fn]);

									case 4:
										return _context93.abrupt('return', _context93.sent);

									case 7:
										_context93.next = 9;
										return _streamline.await(_filename, 482, null, fn, 0, null, false, [true]);

									case 9:
										return _context93.abrupt('return', _context93.sent);

									case 10:
									case 'end':
										return _context93.stop();
								}
							}
						}, _$$sums$$, this);
					}), 0, 2);
					_context94.t0 = equal;
					_context94.next = 4;
					return _streamline.await(_filename, 484, null, sums, 0, null, false, [true, 100000]);

				case 4:
					_context94.t1 = _context94.sent;
					_context94.t2 = 50000 * 100001;
					(0, _context94.t0)(_context94.t1, _context94.t2);

					start();

				case 8:
				case 'end':
					return _context94.stop();
			}
		}
	}, _$$$$88, this);
}), 0, 1));

asyncTest("queue overflow", 5, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$90(_96) {
	var queue, produce, consume;
	return regeneratorRuntime.wrap(function _$$$$90$(_context97) {
		while (1) {
			switch (_context97.prev = _context97.next) {
				case 0:
					queue = flows.queue(2);
					// must produce and consume in parallel to avoid deadlock

					produce = _streamline.future(_filename, 491, null, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$91(_97) {
						return regeneratorRuntime.wrap(function _$$$$91$(_context95) {
							while (1) {
								switch (_context95.prev = _context95.next) {
									case 0:
										_context95.next = 2;
										return _streamline.await(_filename, 492, queue, 'write', 0, null, false, [true, 4]);

									case 2:
										_context95.next = 4;
										return _streamline.await(_filename, 493, queue, 'write', 0, null, false, [true, 9]);

									case 4:
										_context95.next = 6;
										return _streamline.await(_filename, 494, queue, 'write', 0, null, false, [true, 16]);

									case 6:
										_context95.next = 8;
										return _streamline.await(_filename, 495, queue, 'write', 0, null, false, [true, 25]);

									case 8:
									case 'end':
										return _context95.stop();
								}
							}
						}, _$$$$91, this);
					}), 0, 1), 0, null, false, [false]);
					consume = _streamline.future(_filename, 497, null, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$92(_98) {
						return regeneratorRuntime.wrap(function _$$$$92$(_context96) {
							while (1) {
								switch (_context96.prev = _context96.next) {
									case 0:
										_context96.t0 = strictEqual;
										_context96.next = 3;
										return _streamline.await(_filename, 498, queue, 'read', 0, null, false, [true]);

									case 3:
										_context96.t1 = _context96.sent;
										(0, _context96.t0)(_context96.t1, 4);
										_context96.t2 = strictEqual;
										_context96.next = 8;
										return _streamline.await(_filename, 499, queue, 'read', 0, null, false, [true]);

									case 8:
										_context96.t3 = _context96.sent;
										(0, _context96.t2)(_context96.t3, 9);
										_context96.t4 = strictEqual;
										_context96.next = 13;
										return _streamline.await(_filename, 500, queue, 'read', 0, null, false, [true]);

									case 13:
										_context96.t5 = _context96.sent;
										(0, _context96.t4)(_context96.t5, 16);
										_context96.t6 = strictEqual;
										_context96.next = 18;
										return _streamline.await(_filename, 501, queue, 'read', 0, null, false, [true]);

									case 18:
										_context96.t7 = _context96.sent;
										(0, _context96.t6)(_context96.t7, 25);

									case 20:
									case 'end':
										return _context96.stop();
								}
							}
						}, _$$$$92, this);
					}), 0, 1), 0, null, false, [false]);
					_context97.next = 5;
					return _streamline.await(_filename, 503, null, produce, 0, null, false, [true]);

				case 5:
					_context97.next = 7;
					return _streamline.await(_filename, 504, null, consume, 0, null, false, [true]);

				case 7:
					strictEqual(queue.peek(), undefined);
					start();

				case 9:
				case 'end':
					return _context97.stop();
			}
		}
	}, _$$$$90, this);
}), 0, 1));

asyncTest("queue length, contents, alter", 8, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$93(_99) {
	var queue;
	return regeneratorRuntime.wrap(function _$$$$93$(_context98) {
		while (1) {
			switch (_context98.prev = _context98.next) {
				case 0:
					queue = flows.queue();
					_context98.next = 3;
					return _streamline.await(_filename, 511, queue, 'write', 0, null, false, [true, 4]);

				case 3:
					_context98.next = 5;
					return _streamline.await(_filename, 512, queue, 'write', 0, null, false, [true, 9]);

				case 5:
					_context98.next = 7;
					return _streamline.await(_filename, 513, queue, 'write', 0, null, false, [true, 16]);

				case 7:
					_context98.next = 9;
					return _streamline.await(_filename, 514, queue, 'write', 0, null, false, [true, 25]);

				case 9:
					strictEqual(queue.length, 4);
					strictEqual(queue.peek(), 4);
					deepEqual(queue.contents(), [4, 9, 16, 25]);
					queue.adjust(function (arr) {
						return [arr[3], arr[1]];
					});
					strictEqual(queue.peek(), 25);
					_context98.t0 = strictEqual;
					_context98.next = 17;
					return _streamline.await(_filename, 522, queue, 'read', 0, null, false, [true]);

				case 17:
					_context98.t1 = _context98.sent;
					(0, _context98.t0)(_context98.t1, 25);

					strictEqual(queue.peek(), 9);
					_context98.t2 = strictEqual;
					_context98.next = 23;
					return _streamline.await(_filename, 524, queue, 'read', 0, null, false, [true]);

				case 23:
					_context98.t3 = _context98.sent;
					(0, _context98.t2)(_context98.t3, 9);

					strictEqual(queue.peek(), undefined);
					start();

				case 27:
				case 'end':
					return _context98.stop();
			}
		}
	}, _$$$$93, this);
}), 0, 1));

asyncTest("trampoline preserves context", 2, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$94(_100) {
	var globals, fn, result;
	return regeneratorRuntime.wrap(function _$$$$94$(_context100) {
		while (1) {
			switch (_context100.prev = _context100.next) {
				case 0:
					globals = require('streamline-runtime').globals;
					fn = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$95(_101) {
						return regeneratorRuntime.wrap(function _$$$$95$(_context99) {
							while (1) {
								switch (_context99.prev = _context99.next) {
									case 0:
										return _context99.abrupt('return', globals.context.val);

									case 1:
									case 'end':
										return _context99.stop();
								}
							}
						}, _$$$$95, this);
					}), 0, 1);

					globals.context.val = "abc";
					_context100.next = 5;
					return _streamline.await(_filename, 535, flows, 'trampoline', 0, null, false, [true, fn]);

				case 5:
					result = _context100.sent;

					strictEqual(result, "abc");
					strictEqual(globals.context.val, "abc");
					start();

				case 9:
				case 'end':
					return _context100.stop();
			}
		}
	}, _$$$$94, this);
}), 0, 1));

},{"streamline-runtime":2,"streamline-runtime/lib/callbacks/regenerator":5,"streamline-runtime/lib/callbacks/runtime":6}]},{},[12]);
