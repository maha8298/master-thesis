(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],2:[function(require,module,exports){
"use strict";

var regeneratorRuntime = typeof require === 'function' ? require("streamline-runtime/lib/callbacks/regenerator") : Streamline.require("streamline-runtime/lib/callbacks/regenerator");

var _streamline = typeof require === 'function' ? require("streamline-runtime/lib/callbacks/runtime") : Streamline.require("streamline-runtime/lib/callbacks/runtime");

var _filename = "builtins._js";
/**
 * Copyright (c) 2012 Bruno Jouhier <bruno.jouhier@sage.com>
 * MIT License
 */
/// !doc
/// 
/// # Streamline built-ins
///  
(function (exports) {
	var _parallel = function _parallel(options) {
		if (typeof options === "number") return options;
		if (typeof options.parallel === "number") return options.parallel;
		return options.parallel ? -1 : 1;
	};

	var VERSION = 3;

	var future = function future(fn, args, i) {
		var err,
		    result,
		    done,
		    q = [],
		    self = this;
		args = Array.prototype.slice.call(args);
		args[i] = function (e, r) {
			err = e;
			result = r;
			done = true;
			q && q.forEach(function (f) {
				f.call(self, e, r);
			});
			q = null;
		};
		fn.apply(this, args);
		return function F(cb) {
			if (!cb) return F;
			if (done) cb.call(self, err, result);else q.push(cb);
		};
	};

	var funnel = function funnel(max) {
		var _doOne = function _doOne() {
			var current = queue.shift();
			if (!current.cb) return current.fn();
			active++;
			current.fn(function (err, result) {
				active--;
				if (!closed) {
						current.cb(err, result);
						while (active < max && queue.length > 0) {
							_doOne();
						}
					}
			});
		};

		var overflow = function overflow(callback, fn) {
			queue.push({
				fn: fn,
				cb: callback
			});
		};

		max = max == null ? -1 : max;
		if (max === 0) max = exports.funnel.defaultSize;
		if (typeof max !== "number") throw new Error("bad max number: " + max);
		var queue = [],
		    active = 0,
		    closed = false;

		var fun = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$(_2, fn) {
			return regeneratorRuntime.wrap(function _$$$$$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							if (!(max < 0 || max === Infinity)) {
									_context.next = 4;
									break;
								}

							_context.next = 3;
							return _streamline.await(_filename, 64, null, fn, 0, null, false, [true]);

						case 3:
							return _context.abrupt("return", _context.sent);

						case 4:
							if (!(active < max)) {
									_context.next = 16;
									break;
								}

							active++;
							_context.prev = 6;
							_context.next = 9;
							return _streamline.await(_filename, 69, null, fn, 0, null, false, [true]);

						case 9:
							return _context.abrupt("return", _context.sent);

						case 10:
							_context.prev = 10;

							active--;
							while (active < max && queue.length > 0) {
								_doOne();
							}return _context.finish(10);

						case 14:
							_context.next = 19;
							break;

						case 16:
							_context.next = 18;
							return _streamline.await(_filename, 75, null, overflow, 0, null, false, [true, fn]);

						case 18:
							return _context.abrupt("return", _context.sent);

						case 19:
						case "end":
							return _context.stop();
					}
				}
			}, _$$$$, this, [[6,, 10, 14]]);
		}), 0, 2);

		fun.close = function () {
			queue = [];
			closed = true;
		};
		return fun;
	};
	funnel.defaultSize = 4;

	exports.funnel = funnel;

	if (Array.prototype.forEach_ && Array.prototype.forEach_.version_ >= VERSION) return;

	// bail out (silently) if JS does not support defineProperty (IE 8).
	try {
		Object.defineProperty({}, 'x', {});
	} catch (e) {
		return;
	}

	var has = Object.prototype.hasOwnProperty;

	/* eslint-disable no-extend-native */

	/// ## Array functions  
	/// 
	/// These functions are asynchronous variants of the EcmaScript 5 Array functions.
	/// 
	/// Common Rules: 
	/// 
	/// These variants are postfixed by an underscore.  
	/// They take the `_` callback as first parameter.  
	/// They pass the `_` callback as first argument to their `fn` callback.  
	/// Most of them have an optional `options` second parameter which controls the level of 
	/// parallelism. This `options` parameter may be specified either as `{ parallel: par }` 
	/// where `par` is an integer, or directly as a `par` integer value.  
	/// The `par` values are interpreted as follows:
	/// 
	/// * If absent or equal to 1, execution is sequential.
	/// * If > 1, at most `par` operations are parallelized.
	/// * if 0, a default number of operations are parallelized. 
	///   This default is defined by `flows.funnel.defaultSize` (4 by default - see `flows` module).
	/// * If < 0 or Infinity, operations are fully parallelized (no limit).
	/// 
	/// Functions:
	/// 
	/// * `array.forEach_(_[, options], fn[, thisObj])`  
	///   `fn` is called as `fn(_, elt, i, array)`.
	delete Array.prototype.forEach_;
	Object.defineProperty(Array.prototype, 'forEach_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$(_3, options, fn, thisObj) {
			var par, len, i;
			return regeneratorRuntime.wrap(function _$$value$$$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							if (typeof options === "function") {
									thisObj = fn;
									fn = options;
									options = 1;
								}
							par = _parallel(options);

							thisObj = thisObj !== undefined ? thisObj : this;
							len = this.length;

							if (!(par === 1 || len <= 1)) {
									_context2.next = 15;
									break;
								}

							i = 0;

						case 6:
							if (!(i < len)) {
									_context2.next = 13;
									break;
								}

							if (!has.call(this, i)) {
									_context2.next = 10;
									break;
								}

							_context2.next = 10;
							return _streamline.await(_filename, 148, fn, "call", 1, null, false, [thisObj, true, this[i], i, this]);

						case 10:
							i++;
							_context2.next = 6;
							break;

						case 13:
							_context2.next = 17;
							break;

						case 15:
							_context2.next = 17;
							return _streamline.await(_filename, 151, this, "map_", 0, null, false, [true, par, fn, thisObj]);

						case 17:
							return _context2.abrupt("return", this);

						case 18:
						case "end":
							return _context2.stop();
					}
				}
			}, _$$value$$, this);
		}), 0, 4)
	});
	Array.prototype.forEach_.version_ = VERSION;
	/// * `result = array.map_(_[, options], fn[, thisObj])`  
	///   `fn` is called as `fn(_, elt, i, array)`.
	delete Array.prototype.map_;
	Object.defineProperty(Array.prototype, 'map_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$2(_4, options, fn, thisObj) {
			var _this = this;

			var par, len, result, i, futures, j;
			return regeneratorRuntime.wrap(function _$$value$$2$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							if (typeof options === "function") {
									thisObj = fn;
									fn = options;
									options = 1;
								}
							par = _parallel(options);

							thisObj = thisObj !== undefined ? thisObj : this;
							len = this.length;

							if (!(par === 1 || len <= 1)) {
									_context4.next = 17;
									break;
								}

							result = new Array(len);
							i = 0;

						case 7:
							if (!(i < len)) {
									_context4.next = 15;
									break;
								}

							if (!has.call(this, i)) {
									_context4.next = 12;
									break;
								}

							_context4.next = 11;
							return _streamline.await(_filename, 177, fn, "call", 1, null, false, [thisObj, true, this[i], i, this]);

						case 11:
							result[i] = _context4.sent;

						case 12:
							i++;
							_context4.next = 7;
							break;

						case 15:
							_context4.next = 30;
							break;

						case 17:
							futures = [];

							i = 0;
							result = new Array(len);
							if (par <= 0) par = len;
							// cap with a hard limit to avoid memory issue with fibers
							par = Math.min(par, 256);
							for (j = 0; j < par; j++) {
								futures[j] = _streamline.future(_filename, 186, null, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$2(_5) {
									var k;
									return regeneratorRuntime.wrap(function _$$$$2$(_context3) {
										while (1) {
											switch (_context3.prev = _context3.next) {
												case 0:
													if (!(i < _this.length)) {
															_context3.next = 8;
															break;
														}

													k = i++;

													if (!has.call(_this, k)) {
															_context3.next = 6;
															break;
														}

													_context3.next = 5;
													return _streamline.await(_filename, 189, fn, "call", 1, null, false, [thisObj, true, _this[k], k, _this]);

												case 5:
													result[k] = _context3.sent;

												case 6:
													_context3.next = 0;
													break;

												case 8:
												case "end":
													return _context3.stop();
											}
										}
									}, _$$$$2, _this);
								}), 0, 1), 0, null, false, [false]);
							}j = 0;

						case 24:
							if (!(j < par)) {
									_context4.next = 30;
									break;
								}

							_context4.next = 27;
							return _streamline.await(_filename, 192, futures, j, 0, null, false, [true]);

						case 27:
							j++;
							_context4.next = 24;
							break;

						case 30:
							return _context4.abrupt("return", result);

						case 31:
						case "end":
							return _context4.stop();
					}
				}
			}, _$$value$$2, this);
		}), 0, 4)
	});
	/// * `result = array.filter_(_[, options], fn[, thisObj])`  
	///   `fn` is called as `fn(_, elt, i, array)`.
	delete Array.prototype.filter_;
	Object.defineProperty(Array.prototype, 'filter_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$3(_6, options, fn, thisObj) {
			var par, result, len, i, elt;
			return regeneratorRuntime.wrap(function _$$value$$3$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							if (typeof options === "function") {
									thisObj = fn;
									fn = options;
									options = 1;
								}
							par = _parallel(options);

							thisObj = thisObj !== undefined ? thisObj : this;
							result = [];
							len = this.length;

							if (!(par === 1 || len <= 1)) {
									_context6.next = 19;
									break;
								}

							i = 0;

						case 7:
							if (!(i < len)) {
									_context6.next = 17;
									break;
								}

							if (!has.call(this, i)) {
									_context6.next = 14;
									break;
								}

							elt = this[i];
							_context6.next = 12;
							return _streamline.await(_filename, 218, fn, "call", 1, null, false, [thisObj, true, elt, i, this]);

						case 12:
							if (!_context6.sent) {
									_context6.next = 14;
									break;
								}

							result.push(elt);

						case 14:
							i++;
							_context6.next = 7;
							break;

						case 17:
							_context6.next = 21;
							break;

						case 19:
							_context6.next = 21;
							return _streamline.await(_filename, 222, this, "map_", 0, null, false, [true, par, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$3(_7, elt, i, arr) {
								return regeneratorRuntime.wrap(function _$$$$3$(_context5) {
									while (1) {
										switch (_context5.prev = _context5.next) {
											case 0:
												_context5.next = 2;
												return _streamline.await(_filename, 223, fn, "call", 1, null, false, [thisObj, true, elt, i, arr]);

											case 2:
												if (!_context5.sent) {
														_context5.next = 4;
														break;
													}

												result.push(elt);

											case 4:
											case "end":
												return _context5.stop();
										}
									}
								}, _$$$$3, this);
							}), 0, 4), thisObj]);

						case 21:
							return _context6.abrupt("return", result);

						case 22:
						case "end":
							return _context6.stop();
					}
				}
			}, _$$value$$3, this);
		}), 0, 4)
	});
	/// * `bool = array.every_(_[, options], fn[, thisObj])`  
	///   `fn` is called as `fn(_, elt, i, array)`.
	delete Array.prototype.every_;
	Object.defineProperty(Array.prototype, 'every_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$4(_8, options, fn, thisObj) {
			var par, len, i, fun, futures;
			return regeneratorRuntime.wrap(function _$$value$$4$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							if (typeof options === "function") {
									thisObj = fn;
									fn = options;
									options = 1;
								}
							par = _parallel(options);

							thisObj = thisObj !== undefined ? thisObj : this;
							len = this.length;

							if (!(par === 1 || len <= 1)) {
									_context8.next = 19;
									break;
								}

							i = 0;

						case 6:
							if (!(i < len)) {
									_context8.next = 17;
									break;
								}

							_context8.t0 = has.call(this, i);

							if (!_context8.t0) {
									_context8.next = 12;
									break;
								}

							_context8.next = 11;
							return _streamline.await(_filename, 248, fn, "call", 1, null, false, [thisObj, true, this[i], i, this]);

						case 11:
							_context8.t0 = !_context8.sent;

						case 12:
							if (!_context8.t0) {
									_context8.next = 14;
									break;
								}

							return _context8.abrupt("return", false);

						case 14:
							i++;
							_context8.next = 6;
							break;

						case 17:
							_context8.next = 34;
							break;

						case 19:
							fun = funnel(par);
							futures = this.map(function (elt, i, arr) {
								return _streamline.future(_filename, 253, null, fun, 0, null, false, [false, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$4(_9) {
									return regeneratorRuntime.wrap(function _$$$$4$(_context7) {
										while (1) {
											switch (_context7.prev = _context7.next) {
												case 0:
													_context7.next = 2;
													return _streamline.await(_filename, 254, fn, "call", 1, null, false, [thisObj, true, elt, i, arr]);

												case 2:
													return _context7.abrupt("return", _context7.sent);

												case 3:
												case "end":
													return _context7.stop();
											}
										}
									}, _$$$$4, this);
								}), 0, 1)]);
							});
							i = 0;

						case 22:
							if (!(i < len)) {
									_context8.next = 34;
									break;
								}

							_context8.t1 = has.call(this, i);

							if (!_context8.t1) {
									_context8.next = 28;
									break;
								}

							_context8.next = 27;
							return _streamline.await(_filename, 258, futures, i, 0, null, false, [true]);

						case 27:
							_context8.t1 = !_context8.sent;

						case 28:
							if (!_context8.t1) {
									_context8.next = 31;
									break;
								}

							fun.close();
							return _context8.abrupt("return", false);

						case 31:
							i++;
							_context8.next = 22;
							break;

						case 34:
							return _context8.abrupt("return", true);

						case 35:
						case "end":
							return _context8.stop();
					}
				}
			}, _$$value$$4, this);
		}), 0, 4)
	});
	/// * `bool = array.some_(_[, options], fn[, thisObj])`  
	///   `fn` is called as `fn(_, elt, i, array)`.
	delete Array.prototype.some_;
	Object.defineProperty(Array.prototype, 'some_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$5(_10, options, fn, thisObj) {
			var par, len, i, fun, futures;
			return regeneratorRuntime.wrap(function _$$value$$5$(_context10) {
				while (1) {
					switch (_context10.prev = _context10.next) {
						case 0:
							if (typeof options === "function") {
									thisObj = fn;
									fn = options;
									options = 1;
								}
							par = _parallel(options);

							thisObj = thisObj !== undefined ? thisObj : this;
							len = this.length;

							if (!(par === 1 || len <= 1)) {
									_context10.next = 19;
									break;
								}

							i = 0;

						case 6:
							if (!(i < len)) {
									_context10.next = 17;
									break;
								}

							_context10.t0 = has.call(this, i);

							if (!_context10.t0) {
									_context10.next = 12;
									break;
								}

							_context10.next = 11;
							return _streamline.await(_filename, 285, fn, "call", 1, null, false, [thisObj, true, this[i], i, this]);

						case 11:
							_context10.t0 = _context10.sent;

						case 12:
							if (!_context10.t0) {
									_context10.next = 14;
									break;
								}

							return _context10.abrupt("return", true);

						case 14:
							i++;
							_context10.next = 6;
							break;

						case 17:
							_context10.next = 34;
							break;

						case 19:
							fun = funnel(par);
							futures = this.map(function (elt, i, arr) {
								return _streamline.future(_filename, 290, null, fun, 0, null, false, [false, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$5(_11) {
									return regeneratorRuntime.wrap(function _$$$$5$(_context9) {
										while (1) {
											switch (_context9.prev = _context9.next) {
												case 0:
													_context9.next = 2;
													return _streamline.await(_filename, 291, fn, "call", 1, null, false, [thisObj, true, elt, i, arr]);

												case 2:
													return _context9.abrupt("return", _context9.sent);

												case 3:
												case "end":
													return _context9.stop();
											}
										}
									}, _$$$$5, this);
								}), 0, 1)]);
							});
							i = 0;

						case 22:
							if (!(i < len)) {
									_context10.next = 34;
									break;
								}

							_context10.t1 = has.call(this, i);

							if (!_context10.t1) {
									_context10.next = 28;
									break;
								}

							_context10.next = 27;
							return _streamline.await(_filename, 295, futures, i, 0, null, false, [true]);

						case 27:
							_context10.t1 = _context10.sent;

						case 28:
							if (!_context10.t1) {
									_context10.next = 31;
									break;
								}

							fun.close();
							return _context10.abrupt("return", true);

						case 31:
							i++;
							_context10.next = 22;
							break;

						case 34:
							return _context10.abrupt("return", false);

						case 35:
						case "end":
							return _context10.stop();
					}
				}
			}, _$$value$$5, this);
		}), 0, 4)
	});
	/// * `result = array.reduce_(_, fn, val[, thisObj])`  
	///   `fn` is called as `val = fn(_, val, elt, i, array)`.
	delete Array.prototype.reduce_;
	Object.defineProperty(Array.prototype, 'reduce_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$6(_12, fn, v, thisObj) {
			var len, i;
			return regeneratorRuntime.wrap(function _$$value$$6$(_context11) {
				while (1) {
					switch (_context11.prev = _context11.next) {
						case 0:
							thisObj = thisObj !== undefined ? thisObj : this;
							len = this.length;
							i = 0;

						case 3:
							if (!(i < len)) {
									_context11.next = 11;
									break;
								}

							if (!has.call(this, i)) {
									_context11.next = 8;
									break;
								}

							_context11.next = 7;
							return _streamline.await(_filename, 315, fn, "call", 1, null, false, [thisObj, true, v, this[i], i, this]);

						case 7:
							v = _context11.sent;

						case 8:
							i++;
							_context11.next = 3;
							break;

						case 11:
							return _context11.abrupt("return", v);

						case 12:
						case "end":
							return _context11.stop();
					}
				}
			}, _$$value$$6, this);
		}), 0, 4)
	});
	/// * `result = array.reduceRight_(_, fn, val[, thisObj])`  
	///   `fn` is called as `val = fn(_, val, elt, i, array)`.
	delete Array.prototype.reduceRight_;
	Object.defineProperty(Array.prototype, 'reduceRight_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$7(_13, fn, v, thisObj) {
			var len, i;
			return regeneratorRuntime.wrap(function _$$value$$7$(_context12) {
				while (1) {
					switch (_context12.prev = _context12.next) {
						case 0:
							thisObj = thisObj !== undefined ? thisObj : this;
							len = this.length;
							i = len - 1;

						case 3:
							if (!(i >= 0)) {
									_context12.next = 11;
									break;
								}

							if (!has.call(this, i)) {
									_context12.next = 8;
									break;
								}

							_context12.next = 7;
							return _streamline.await(_filename, 331, fn, "call", 1, null, false, [thisObj, true, v, this[i], i, this]);

						case 7:
							v = _context12.sent;

						case 8:
							i--;
							_context12.next = 3;
							break;

						case 11:
							return _context12.abrupt("return", v);

						case 12:
						case "end":
							return _context12.stop();
					}
				}
			}, _$$value$$7, this);
		}), 0, 4)
	});

	/// * `array = array.sort_(_, compare [, beg [, end]])`  
	///   `compare` is called as `cmp = compare(_, elt1, elt2)`.  
	///   Note: this function _changes_ the original array (and returns it).
	delete Array.prototype.sort_;
	Object.defineProperty(Array.prototype, 'sort_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$8(_14, compare, beg, end) {
			var _qsort, array;

			return regeneratorRuntime.wrap(function _$$value$$8$(_context14) {
				while (1) {
					switch (_context14.prev = _context14.next) {
						case 0:
							_qsort = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$_qsort$$(_15, beg, end) {
								var tmp, mid, o, nbeg, nend;
								return regeneratorRuntime.wrap(function _$$_qsort$$$(_context13) {
									while (1) {
										switch (_context13.prev = _context13.next) {
											case 0:
												if (!(beg >= end)) {
														_context13.next = 2;
														break;
													}

												return _context13.abrupt("return");

											case 2:
												if (!(end === beg + 1)) {
														_context13.next = 11;
														break;
													}

												_context13.next = 5;
												return _streamline.await(_filename, 355, null, compare, 0, null, false, [true, array[beg], array[end]]);

											case 5:
												_context13.t0 = _context13.sent;

												if (!(_context13.t0 > 0)) {
														_context13.next = 10;
														break;
													}

												tmp = array[beg];
												array[beg] = array[end];
												array[end] = tmp;

											case 10:
												return _context13.abrupt("return");

											case 11:
												mid = Math.floor((beg + end) / 2);
												o = array[mid];
												nbeg = beg;
												nend = end;

											case 15:
												if (!(nbeg <= nend)) {
														_context13.next = 39;
														break;
													}

											case 16:
												_context13.t1 = nbeg < end;

												if (!_context13.t1) {
														_context13.next = 22;
														break;
													}

												_context13.next = 20;
												return _streamline.await(_filename, 369, null, compare, 0, null, false, [true, array[nbeg], o]);

											case 20:
												_context13.t2 = _context13.sent;
												_context13.t1 = _context13.t2 < 0;

											case 22:
												if (!_context13.t1) {
														_context13.next = 26;
														break;
													}

												nbeg++;
												_context13.next = 16;
												break;

											case 26:
												_context13.t3 = beg < nend;

												if (!_context13.t3) {
														_context13.next = 32;
														break;
													}

												_context13.next = 30;
												return _streamline.await(_filename, 370, null, compare, 0, null, false, [true, o, array[nend]]);

											case 30:
												_context13.t4 = _context13.sent;
												_context13.t3 = _context13.t4 < 0;

											case 32:
												if (!_context13.t3) {
														_context13.next = 36;
														break;
													}

												nend--;

												_context13.next = 26;
												break;

											case 36:
												if (nbeg <= nend) {
														tmp = array[nbeg];
														array[nbeg] = array[nend];
														array[nend] = tmp;
														nbeg++;
														nend--;
													}
												_context13.next = 15;
												break;

											case 39:
												if (!(nbeg < end)) {
														_context13.next = 42;
														break;
													}

												_context13.next = 42;
												return _streamline.await(_filename, 381, null, _qsort, 0, null, false, [true, nbeg, end]);

											case 42:
												if (!(beg < nend)) {
														_context13.next = 45;
														break;
													}

												_context13.next = 45;
												return _streamline.await(_filename, 382, null, _qsort, 0, null, false, [true, beg, nend]);

											case 45:
											case "end":
												return _context13.stop();
										}
									}
								}, _$$_qsort$$, this);
							}), 0, 3);
							array = this;

							beg = beg || 0;
							end = end == null ? array.length - 1 : end;

							_context14.next = 6;
							return _streamline.await(_filename, 384, null, _qsort, 0, null, false, [true, beg, end]);

						case 6:
							return _context14.abrupt("return", array);

						case 7:
						case "end":
							return _context14.stop();
					}
				}
			}, _$$value$$8, this);
		}), 0, 4)
	});

	/// 
	/// ## Function functions  
	/// 
	/// * `result = fn.apply_(_, thisObj, args[, index])`  
	///   Helper to use `Function.prototype.apply` inside streamlined functions.  
	///   Equivalent to `result = fn.apply(thisObj, argsWith_)` where `argsWith_` is 
	///   a modified `args` in which the callback has been inserted at `index` 
	///   (at the end of the argument list if `index` is omitted or negative).
	delete Function.prototype.apply_;
	Object.defineProperty(Function.prototype, 'apply_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: function value(callback, thisObj, args, index) {
			args = Array.prototype.slice.call(args, 0);
			args.splice(index != null && index >= 0 ? index : args.length, 0, callback);
			return this.apply(thisObj, args);
		}
	});
})(typeof exports !== 'undefined' ? exports : Streamline.builtins = Streamline.builtins || {});
},{"streamline-runtime/lib/callbacks/regenerator":3,"streamline-runtime/lib/callbacks/runtime":4}],3:[function(require,module,exports){
"use strict";
module.exports = require("regenerator-runtime");
},{"regenerator-runtime":7}],4:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var regeneratorRuntime = typeof require === 'function' ? require('streamline-runtime/lib/callbacks/regenerator') : Streamline.require('streamline-runtime/lib/callbacks/regenerator');

var makeArgs = function makeArgs(i) {
	if (i <= 0) return "";
	return i > 1 ? makeArgs(i - 1) + ', a' + i : "a1";
};

var isGenerator = function isGenerator(val) {
	return val && (Object.prototype.toString.call(val) === "[object Generator]" || val.toString() === "[object Generator]");
};

var Frame = function Frame(file, line, fn) {
	this.fn = fn;
	this.file = file || "unknown";
	this.line = line || 0;
};

var pushFrame = function pushFrame(g) {
	if (glob.emitter) glob.emitter.emit('enter', g.frame);
	g.frame = g.frame || glob.frame;
	glob.frame = null;
};

var popFrame = function popFrame(g) {
	if (glob.emitter) glob.emitter.emit('exit', g.frame);
};

var run = function run(fn, g, cb, options) {
	var rsm = glob.resume;
	var emit = function emit(ev, g) {
		if (glob.emitter) glob.emitter.emit(ev, g.frame);
	};

	try {
		if (glob.frame) {
				g.frame = glob.frame;
				g.frame.g = g;
				glob.frame = null;
			} else {
				g.frame = new Frame("", 0, fn);
			}

		glob.resume = function (err, val) {
			if (glob.yielded) {
					emit("resume", g);
					glob.yielded = false;
				}
			while (g) {
				if (options && options.interrupt && options.interrupt()) return;
				try {
					// ES6 is deprecating send in favor of next. Following line makes us compatible with both.
					var send = g.send || g.next;
					var v = err ? g.throw(err) : send.call(g, val);
					val = v.value;
					err = null;
					// if we get PENDING, the current call completed with a pending I/O
					// resume will be called again when the I/O completes. So just save the context and return here.
					if (val === glob.PENDING) {
							if (!glob.yielded) {
									emit("yield", g);
									glob.yielded = true;
								}
							return;
						}
					// if we get [PENDING, e, r], the current call invoked its callback synchronously
					// we just loop to send/throw what the callback gave us.
					if (val && val[0] === glob.PENDING) {
							err = val[1];
							val = val[2];
							if (err) err = wrapError(err, g);
						}
						// else, if g is done we unwind it we send val to the parent generator (or through cb if we are at the top)
					else if (v.done) {
								//g.close();
								popFrame(g);
								g = g.prev;
							}
							// else if val is not a generator we have an error. Yield was not applied to a generators
						else {
								if (!isGenerator(val)) {
										throw new Error("invalid value was yielded. Expected a generator, got " + val);
									}
								// we got a new generator which means that g called another generator function
								// the new generator become current and we loop with g.send(undefined) (equiv to g.next()) 
								val.prev = g;
								g = val;
								pushFrame(g);
								val = undefined;
							}
				} catch (ex) {
					// the send/throw call failed.
					// we unwind the current generator and we rethrow into the parent generator (or through cb if at the top)
					//g.close();
					err = wrapError(ex, g);
					popFrame(g);
					g = g.prev;
					val = undefined;
				}
			}
			// we have exhausted the stack of generators. 
			// return the result or error through the callback.
			cb(err, val);
		};

		// start the resume loop
		glob.resume();
	} finally {
		// restore resume global
		glob.resume = rsm;
	}
};

var mapResults = function mapResults(options, args) {
	if (options && (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === "object") {
			if (options.returnArray) return args;
			if (options.returnObject) return options.returnObject.reduce(function (res, key, i) {
				res[key] = args[i];
				return res;
			}, {});
		}
	return args[0];
};

var invoke = function invoke(that, fn, args, index, index2, returnArray) {
	// Set things up so that call returns:
	// * PENDING if it completes with a pending I/O (and cb will be called later)
	// * [PENDING, e, r] if the callback is called synchronously.
	var result = glob.PENDING,
	    sync = true;
	var rsm = glob.resume;

	// convert args to array so that args.length gets correctly set if index is args.length
	args = Array.prototype.slice.call(args, 0);
	var cx = glob.context;
	var callback = function callback(e, r) {
		var oldContext = glob.context;
		var oldResume = glob.resume;
		try {
			if (returnArray) r = Array.prototype.slice.call(arguments, 1);
			glob.context = cx;
			glob.resume = rsm;
			if (sync) {
					result = [glob.PENDING, e, r];
				} else {
					glob.resume(e, r);
				}
		} finally {
			glob.context = oldContext;
			glob.resume = oldResume;
		}
	};
	if (index2 != null) {
			args[index] = function (r) {
				callback(null, r);
			};
			args[index2] = function (e) {
				callback(e);
			};
		} else {
			args[index] = callback;
		}
	fn.apply(that, args);
	sync = false;
	return result;
};

var makeUnstarror = function makeUnstarror(i) {
	return eval("(function(fn, options)" + unstarBody.replace(/function\s*F\(\)/, "function F(" + makeArgs(i) + ")") + ")");
};

var unstar = function unstar(fn, index, arity) {
	var i = arity != null ? arity : index == null ? fn.length + 1 : fn.length;
	var unstarror = unstarrors[i] || (unstarrors[i] = makeUnstarror(i));
	return unstarror(fn, index);
};

var wrapError = function wrapError(err, g) {
	if (!(err instanceof Error)) return err; // handle throw "some string";
	for (var gg = err.g; gg; gg = gg.prev) {
		if (gg === g) return err;
	}
	err = Object.create(err);
	err.g = g;
	if (!stackGetter) {
			Object.defineProperty(err, '__raw_stack__', {
				value: err.stack,
				enumerable: false,
				writable: false,
				configurable: false
			});
		}
	Object.defineProperty(err, 'stack', {
		get: function get() {
			return stackTrace(this);
		}
	});
	return err;
};

var stackTrace = function stackTrace(err) {
	var starredStack = function starredStack(e) {
		if (!e || !e.g) return "";
		var s = starredStack(Object.getPrototypeOf(e));
		for (var g = e.g; g.prev; g = g.prev) {
			var fname = g.prev.frame.name || "";
			var m = /\$\$(.*)\$\$/.exec(fname);
			if (m) fname = m[1];
			s += '    at ' + fname + ' (' + g.frame.file + ':' + g.frame.line + ')\n';
		}
		return s;
	};

	var extra;

	var rawStack = stackGetter ? stackGetter.call(err) : err.__raw_stack__;
	var m = / +at (GeneratorFunctionPrototype|(undefined|\[object Generator\])\.next|.*\.next \(<anonymous>\))/.exec(rawStack);
	var cut = m && m.index;
	if (cut < 0) cut = rawStack.indexOf('\n') + 1;
	var result = rawStack.substring(0, cut).replace(/\n.*regenerator.runtime.*/g, '') + //
	'    <<< yield stack >>>\n' + starredStack(err) + //
	'    <<< raw stack >>>\n' + rawStack.substring(cut);
	return result;
};

/**
 * Copyright (c) 2013 Bruno Jouhier <bruno.jouhier@sage.com>
 * MIT License
 */
var util = require('../util');
var glob = util.getGlobals('callbacks');

var counters = {
	slowAwait: 0,
	fastAwait: 0
};

if (typeof glob.yielded === "undefined") glob.yielded = true;
glob.PENDING = glob.PENDING || {};

Object.defineProperty(Frame.prototype, "name", {
	get: function get() {
		var fn = this.fn;
		return fn && (fn.__name__ || fn.name) || "unknown";
	}
});

Object.defineProperty(Frame.prototype, "info", {
	get: function get() {
		return this;
	}
});

var star = function star(fn, index, index2, returnArray) {
	return (/*#__PURE__*/regeneratorRuntime.mark(function _callee() {
			var _args = arguments;
			return regeneratorRuntime.wrap(function _callee$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							_context.next = 2;
							return invoke(this, fn, _args, index, index2, returnArray);

						case 2:
							return _context.abrupt('return', _context.sent);

						case 3:
						case 'end':
							return _context.stop();
					}
				}
			}, _callee, this);
		})
	);
};

var unstarTemplate = function unstarTemplate(fn, options) {
	var index = options && (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' ? options.callbackIndex : options;
	if (index == null) index = fn.length;

	var F = function F() {
		var cb = arguments[index];
		if (typeof cb !== "function") {
				if (glob.allowBooleanPlaceholders && typeof cb === 'boolean') {
						if (cb) cb = util.defaultCallback;else return exports.future("", 0, null, wrapper.bind(this), index)(arguments);
					} else throw util.argError(fn.name, index, "function", typeof cb === 'undefined' ? 'undefined' : _typeof(cb));
			}
		var g = fn.apply(this, arguments);
		run.call(this, fn, g, cb);
	};
	// track the original name for stack frames
	F.__name__ = fn.name;
	return F;
};

var unstarBody = unstarTemplate.toString();
unstarBody = unstarBody.substring(unstarBody.indexOf('{'));
var unstarrors = [];

var stackGetter = (Object.getOwnPropertyDescriptor(new Error(), 'stack') || {}).get;

var keys = [];

exports.await = function (file, line, object, property, index1, index2, returnArray, args) {
	var bound = typeof property !== "function";
	var fn = bound ? object[property] : property;
	glob.frame = new Frame(file, line, fn);
	var key = '';
	if (index2 == null && !returnArray) {
			key = keys[index1] || (keys[index1] = 'starred-' + index1);
			var wrapper = fn[key];
			if (wrapper) {
					counters.fastAwait++;
					if (Array.isArray(args)) return wrapper.apply(object, args);else return bound ? wrapper.bind(object) : wrapper;
				}
		}
	counters.slowAwait++;
	if (typeof fn !== "function") throw util.typeError("cannot call", "function", fn);
	wrapper = star(fn, index1, index2, returnArray);
	if (!bound && key) {
			fn[key] = wrapper;
		}
	if (Array.isArray(args)) return wrapper.apply(object, args);else return bound ? wrapper.bind(object) : wrapper;
};

exports.async = function (fn, index, arity) {
	if (typeof fn !== "function") throw util.typeError("cannot wrap function", "function", fn);
	var unstarred = unstar(fn, index, arity);
	unstarred["starred-" + index] = fn;
	return unstarred;
};

exports.new = function (file, line, constructor, index) {
	if (typeof constructor !== "function") throw util.typeError("cannot instantiate", "function", constructor);
	glob.frame = new Frame(file, line, constructor);
	var starred = star(constructor, index);
	return (/*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
			var that,
			    _args2 = arguments;
			return regeneratorRuntime.wrap(function _callee2$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							that = Object.create(constructor.prototype);
							_context2.next = 3;
							return starred.apply(that, _args2);

						case 3:
							return _context2.abrupt('return', that);

						case 4:
						case 'end':
							return _context2.stop();
					}
				}
			}, _callee2, this);
		})
	);
};

exports.future = require('../future');
require('./builtins');
},{"../future":5,"../util":6,"./builtins":2,"streamline-runtime/lib/callbacks/regenerator":3}],5:[function(require,module,exports){
(function (setImmediate){
"use strict";

var util = require('./util');

module.exports = function (file, line, object, property, index, dummy1, dummy2, args) {
	var bound = typeof property !== "function";
	var fn = bound ? object[property] : property;
	var self = bound ? object : this;
	if (typeof fn !== "function") throw new Error("cannot create future", "function", fn);
	var result = function futured() {
		var err, result, done, q = [];
		var args = Array.prototype.slice.call(arguments);
		var callback = function (e, r) {
			//if (e) console.error(e);
			err = e;
			result = r;
			done = true;
			q && q.forEach(function (f) {
				if (sync) {
					setImmediate(function () {
						f.call(self, e, r);
					});
				} else {
					f.call(self, e, r);
				}
			});
			q = null;
		};
		args[index] = callback;
		var sync = true;
		fn.apply(self, args);
		sync = false;
		var future = function (cb) {
			if (typeof cb !== "function") throw argError(fn.name, index, "function", cb);
			if (done) {
				cb.call(self, err, result);
			}
			else q.push(cb);
		};
		// computed property so that we don't allocate promise if we don't need to
		Object.defineProperty(future, 'promise', {
			get: function () {
				return new Promise(function (resolve, reject) {
					if (done) {
						if (err) reject(err);
						else resolve(result);
					} else {
						q.push(function (e, r) {
							if (e) reject(e);
							else resolve(r);
						})
					}
				});
			}
		});
		return future;
	};
	return Array.isArray(args) ? result.apply(object, args) : result;
}

}).call(this,require("timers").setImmediate)
},{"./util":6,"timers":8}],6:[function(require,module,exports){
(function (process,global){
"use strict";
// colors package does not work in browser - fails on reference to node's `process` global
var idem = function (x) { return x; };
var colors;
if (typeof (process) !== 'undefined' && !process.browser) {
	try {
		colors = require(idem('colors'));
	} catch (ex) {
		// console.error(ex.stack);
	}
}
if (!colors) colors = ['black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white', 'gray'].reduce(function (r, c) {
	r[c] = idem;
	return r;
}, {});

function log(message) {
	console.error(colors.gray("[STREAMLINE-RUNTIME] " + message));
}
function warn(message) {
	console.error(colors.magenta("[STREAMLINE-RUNTIME] " + message));
}
function error(message) {
	console.error(colors.red("[STREAMLINE-RUNTIME] " + message));
}

function trace(obj) {
	if (obj instanceof TypeError) util.error(obj.stack);
	//else console.error(obj);
};

function typeName(val) {
	return val === null ? "null" : typeof val;
}

function typeError(message, expected, got) {
	var err = new TypeError(message + ": expected " + expected + ", got " + typeName(got));
	console.error(err.stack);
	throw err;
}

function argError(fname, index, expected, got) {
	return typeError("invalid argument " + index + " to function `" + fname + "`", expected, got);
}

function getGlobals(runtime) {
	var glob = typeof global === "object" ? global : window;
	var secret = "_20c7abceb95c4eb88b7ca1895b1170d1";
	var g = (glob[secret] = (glob[secret] || { context: {} }));
	if (runtime && g.runtime !== runtime) {
		if (g.runtime) console.warn("[STREAMLINE-RUNTIME] " + runtime + " runtime loaded on top of " + g.runtime);
		else g.runtime = runtime;
	}
	return g;
}

function defaultCallback(err) {
	if (err) throw err;
}

// fix names in stack traces
var origPrepareStackTrace = Error.prepareStackTrace;
if (origPrepareStackTrace) Error.prepareStackTrace = function (_, stack) {
	// eval stack frames from streamline-runtime fibers are botched: column number is 0, 
	// which causes an error in source-map-support.js / mapEvalOrigin.
	// So we filter them out.
	// We also filter out frames that streamline inserts between calls (fibers mode only).
	var canSkip = false;
	stack = stack.filter(function (frame) {
		var sourceName = frame.getFileName() || frame.getScriptNameOrSourceURL() || '';
		var isStreamline = /streamline-runtime.lib.fibers.runtime/.test(sourceName);
		if (!isStreamline) canSkip = true;
		if (canSkip && isStreamline) return false;
		var origin = frame.isEval() && frame.getEvalOrigin();
		return (!(origin && /\bstreamline-runtime\b/.test(origin)));
	});
	var result;
	try {
		result = origPrepareStackTrace.call(this, _, stack);
	} catch (ex) {
		result = "\n*** STACKTRACE PREPARE FAILED: " + ex.message + " ***\n" + stack.join('\n');
	}
	result = result.replace(/_\$\$(.*)\$\$\d*/g, function (all, x) { return x; })
		.replace(/Function\.(.*) \[as awaitWrapper-0\]/g, function (all, x) { return x; });
	return result;
};

function defaultRuntime() {
	var _defRT;
	return _defRT || (_defRT = (function () {
		try {
			require(idem('fibers'));
			return 'fibers';
		} catch (ex) { }
		try {
			eval("(function*(){})");
			return 'generators';
		} catch (ex) { }
		return "callbacks";
	})());
}

module.exports = {
	log: log,
	warn: warn,
	error: error,
	trace: trace,
	typeName: typeName,
	typeError: typeError,
	argError: argError,
	getGlobals: getGlobals,
	defaultCallback: defaultCallback,
	defaultRuntime: defaultRuntime,
};
var util = module.exports;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":1}],7:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

},{}],8:[function(require,module,exports){
(function (setImmediate,clearImmediate){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":1,"timers":8}],9:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var regeneratorRuntime = typeof require === 'function' ? require("streamline-runtime/lib/callbacks/regenerator") : Streamline.require("streamline-runtime/lib/callbacks/regenerator");

var _streamline = typeof require === 'function' ? require("streamline-runtime/lib/callbacks/runtime") : Streamline.require("streamline-runtime/lib/callbacks/runtime");

var _filename = "/Users/bruno/dev/streamline/test/common/eval-test._js";

var evalTest = function evalTest(f, val) {
	f(function (err, result) {
		var str = err ? "ERR: " + err : result;
		strictEqual(str, val, val);
		start();
	});
};

var delay = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$delay$$(_2, val) {
	return regeneratorRuntime.wrap(function _$$delay$$$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					_context.next = 2;
					return _streamline.await(_filename, 12, null, setTimeout, 0, null, false, [true, 0]);

				case 2:
					return _context.abrupt("return", val);

				case 3:
				case "end":
					return _context.stop();
			}
		}
	}, _$$delay$$, this);
}), 0, 2);

var delayFail = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$delayFail$$(_3, err) {
	return regeneratorRuntime.wrap(function _$$delayFail$$$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					_context2.next = 2;
					return _streamline.await(_filename, 17, null, setTimeout, 0, null, false, [true, 0]);

				case 2:
					throw err;

				case 3:
				case "end":
					return _context2.stop();
			}
		}
	}, _$$delayFail$$, this);
}), 0, 2);

var throwError = function throwError(message) {
	throw new Error(message);
};

var twoResults = function twoResults(a, b, cb) {
	setTimeout(function () {
		cb(null, a, b);
	}, 0);
};

var twoResultsSync = function twoResultsSync(a, b, cb) {
	cb(null, a, b);
};

QUnit.module(module.id);

asyncTest("eval return", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$(_4) {
	return regeneratorRuntime.wrap(function _$$$$$(_context4) {
		while (1) {
			switch (_context4.prev = _context4.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$(_5) {
						return regeneratorRuntime.wrap(function _$$f$$$(_context3) {
							while (1) {
								switch (_context3.prev = _context3.next) {
									case 0:
										_context3.next = 2;
										return _streamline.await(_filename, 27, null, delay, 0, null, false, [true, 5]);

									case 2:
										return _context3.abrupt("return", _context3.sent);

									case 3:
									case "end":
										return _context3.stop();
								}
							}
						}, _$$f$$, this);
					}), 0, 1), 5);

				case 1:
				case "end":
					return _context4.stop();
			}
		}
	}, _$$$$, this);
}), 0, 1));
asyncTest("eval if true", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$2(_6) {
	return regeneratorRuntime.wrap(function _$$$$2$(_context6) {
		while (1) {
			switch (_context6.prev = _context6.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$2(_7) {
						return regeneratorRuntime.wrap(function _$$f$$2$(_context5) {
							while (1) {
								switch (_context5.prev = _context5.next) {
									case 0:
										if (!true) {
												_context5.next = 4;
												break;
											}

										_context5.next = 3;
										return _streamline.await(_filename, 32, null, delay, 0, null, false, [true, 3]);

									case 3:
										return _context5.abrupt("return", _context5.sent);

									case 4:
										return _context5.abrupt("return", 4);

									case 5:
									case "end":
										return _context5.stop();
								}
							}
						}, _$$f$$2, this);
					}), 0, 1), 3);

				case 1:
				case "end":
					return _context6.stop();
			}
		}
	}, _$$$$2, this);
}), 0, 1));
asyncTest("eval if false", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$3(_8) {
	return regeneratorRuntime.wrap(function _$$$$3$(_context8) {
		while (1) {
			switch (_context8.prev = _context8.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$3(_9) {
						return regeneratorRuntime.wrap(function _$$f$$3$(_context7) {
							while (1) {
								switch (_context7.prev = _context7.next) {
									case 0:
										if (!false) {
												_context7.next = 4;
												break;
											}

										_context7.next = 3;
										return _streamline.await(_filename, 38, null, delay, 0, null, false, [true, 3]);

									case 3:
										return _context7.abrupt("return", _context7.sent);

									case 4:
										return _context7.abrupt("return", 4);

									case 5:
									case "end":
										return _context7.stop();
								}
							}
						}, _$$f$$3, this);
					}), 0, 1), 4);

				case 1:
				case "end":
					return _context8.stop();
			}
		}
	}, _$$$$3, this);
}), 0, 1));
asyncTest("eval while", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$4(_10) {
	return regeneratorRuntime.wrap(function _$$$$4$(_context10) {
		while (1) {
			switch (_context10.prev = _context10.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$4(_11) {
						var i, result;
						return regeneratorRuntime.wrap(function _$$f$$4$(_context9) {
							while (1) {
								switch (_context9.prev = _context9.next) {
									case 0:
										i = 1, result = 1;

									case 1:
										if (!(i < 5)) {
												_context9.next = 8;
												break;
											}

										_context9.next = 4;
										return _streamline.await(_filename, 47, null, delay, 0, null, false, [true, i * result]);

									case 4:
										result = _context9.sent;

										i++;
										_context9.next = 1;
										break;

									case 8:
										return _context9.abrupt("return", result);

									case 9:
									case "end":
										return _context9.stop();
								}
							}
						}, _$$f$$4, this);
					}), 0, 1), 24);

				case 1:
				case "end":
					return _context10.stop();
			}
		}
	}, _$$$$4, this);
}), 0, 1));
asyncTest("eval for", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$5(_12) {
	return regeneratorRuntime.wrap(function _$$$$5$(_context12) {
		while (1) {
			switch (_context12.prev = _context12.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$5(_13) {
						var result, i;
						return regeneratorRuntime.wrap(function _$$f$$5$(_context11) {
							while (1) {
								switch (_context11.prev = _context11.next) {
									case 0:
										result = 1;
										i = 1;

									case 2:
										if (!(i < 5)) {
												_context11.next = 13;
												break;
											}

										_context11.next = 5;
										return _streamline.await(_filename, 57, null, delay, 0, null, false, [true, i]);

									case 5:
										_context11.t0 = _context11.sent;
										_context11.next = 8;
										return _streamline.await(_filename, 57, null, delay, 0, null, false, [true, result]);

									case 8:
										_context11.t1 = _context11.sent;
										result = _context11.t0 * _context11.t1;

									case 10:
										i++;
										_context11.next = 2;
										break;

									case 13:
										return _context11.abrupt("return", result);

									case 14:
									case "end":
										return _context11.stop();
								}
							}
						}, _$$f$$5, this);
					}), 0, 1), 24);

				case 1:
				case "end":
					return _context12.stop();
			}
		}
	}, _$$$$5, this);
}), 0, 1));
asyncTest("eval for in", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$6(_14) {
	return regeneratorRuntime.wrap(function _$$$$6$(_context14) {
		while (1) {
			switch (_context14.prev = _context14.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$6(_15) {
						var foo, result, k;
						return regeneratorRuntime.wrap(function _$$f$$6$(_context13) {
							while (1) {
								switch (_context13.prev = _context13.next) {
									case 0:
										foo = {
											a: 1,
											b: 2,
											c: 3,
											d: 5
										};
										result = 1;
										_context13.t0 = regeneratorRuntime.keys(foo);

									case 3:
										if ((_context13.t1 = _context13.t0()).done) {
												_context13.next = 22;
												break;
											}

										k = _context13.t1.value;
										_context13.t2 = _streamline;
										_context13.t3 = _filename;
										_context13.t4 = delay;
										_context13.next = 10;
										return _streamline.await(_filename, 72, null, delay, 0, null, false, [true, k]);

									case 10:
										_context13.t5 = _context13.sent;
										_context13.t6 = foo[_context13.t5];
										_context13.t7 = [true, _context13.t6];
										_context13.next = 15;
										return _context13.t2.await.call(_context13.t2, _context13.t3, 72, null, _context13.t4, 0, null, false, _context13.t7);

									case 15:
										_context13.t8 = _context13.sent;
										_context13.next = 18;
										return _streamline.await(_filename, 72, null, delay, 0, null, false, [true, result]);

									case 18:
										_context13.t9 = _context13.sent;
										result = _context13.t8 * _context13.t9;
										_context13.next = 3;
										break;

									case 22:
										return _context13.abrupt("return", result);

									case 23:
									case "end":
										return _context13.stop();
								}
							}
						}, _$$f$$6, this);
					}), 0, 1), 30);

				case 1:
				case "end":
					return _context14.stop();
			}
		}
	}, _$$$$6, this);
}), 0, 1));
asyncTest("fully async for in", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$7(_16) {
	return regeneratorRuntime.wrap(function _$$$$7$(_context16) {
		while (1) {
			switch (_context16.prev = _context16.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$7(_17) {
						var result, i;
						return regeneratorRuntime.wrap(function _$$f$$7$(_context15) {
							while (1) {
								switch (_context15.prev = _context15.next) {
									case 0:
										result = 1;
										_context15.next = 3;
										return _streamline.await(_filename, 80, null, delay, 0, null, false, [true, 2]);

									case 3:
										i = _context15.sent;

									case 4:
										_context15.t0 = i;
										_context15.next = 7;
										return _streamline.await(_filename, 80, null, delay, 0, null, false, [true, 5]);

									case 7:
										_context15.t1 = _context15.sent;

										if (!(_context15.t0 < _context15.t1)) {
												_context15.next = 22;
												break;
											}

										_context15.next = 11;
										return _streamline.await(_filename, 81, null, delay, 0, null, false, [true, result]);

									case 11:
										_context15.t2 = _context15.sent;
										_context15.next = 14;
										return _streamline.await(_filename, 81, null, delay, 0, null, false, [true, i]);

									case 14:
										_context15.t3 = _context15.sent;
										result = _context15.t2 * _context15.t3;

									case 16:
										_context15.next = 18;
										return _streamline.await(_filename, 80, null, delay, 0, null, false, [true, i]);

									case 18:
										_context15.t4 = _context15.sent;
										i = _context15.t4 + 1;
										_context15.next = 4;
										break;

									case 22:
										return _context15.abrupt("return", result);

									case 23:
									case "end":
										return _context15.stop();
								}
							}
						}, _$$f$$7, this);
					}), 0, 1), 24);

				case 1:
				case "end":
					return _context16.stop();
			}
		}
	}, _$$$$7, this);
}), 0, 1));
asyncTest("break in loop", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$8(_18) {
	return regeneratorRuntime.wrap(function _$$$$8$(_context18) {
		while (1) {
			switch (_context18.prev = _context18.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$8(_19) {
						var result, i;
						return regeneratorRuntime.wrap(function _$$f$$8$(_context17) {
							while (1) {
								switch (_context17.prev = _context17.next) {
									case 0:
										result = 1;
										i = 1;

									case 2:
										if (!(i < 10)) {
												_context17.next = 15;
												break;
											}

										if (!(i == 5)) {
												_context17.next = 5;
												break;
											}

										return _context17.abrupt("break", 15);

									case 5:
										_context17.next = 7;
										return _streamline.await(_filename, 91, null, delay, 0, null, false, [true, result]);

									case 7:
										_context17.t0 = _context17.sent;
										_context17.next = 10;
										return _streamline.await(_filename, 91, null, delay, 0, null, false, [true, i]);

									case 10:
										_context17.t1 = _context17.sent;
										result = _context17.t0 * _context17.t1;

									case 12:
										i++;
										_context17.next = 2;
										break;

									case 15:
										return _context17.abrupt("return", result);

									case 16:
									case "end":
										return _context17.stop();
								}
							}
						}, _$$f$$8, this);
					}), 0, 1), 24);

				case 1:
				case "end":
					return _context18.stop();
			}
		}
	}, _$$$$8, this);
}), 0, 1));
asyncTest("continue", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$9(_20) {
	return regeneratorRuntime.wrap(function _$$$$9$(_context20) {
		while (1) {
			switch (_context20.prev = _context20.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$9(_21) {
						var result, i;
						return regeneratorRuntime.wrap(function _$$f$$9$(_context19) {
							while (1) {
								switch (_context19.prev = _context19.next) {
									case 0:
										result = 1;
										i = 1;

									case 2:
										if (!(i < 10)) {
												_context19.next = 15;
												break;
											}

										if (!(i >= 5)) {
												_context19.next = 5;
												break;
											}

										return _context19.abrupt("continue", 12);

									case 5:
										_context19.next = 7;
										return _streamline.await(_filename, 101, null, delay, 0, null, false, [true, result]);

									case 7:
										_context19.t0 = _context19.sent;
										_context19.next = 10;
										return _streamline.await(_filename, 101, null, delay, 0, null, false, [true, i]);

									case 10:
										_context19.t1 = _context19.sent;
										result = _context19.t0 * _context19.t1;

									case 12:
										i++;
										_context19.next = 2;
										break;

									case 15:
										return _context19.abrupt("return", result);

									case 16:
									case "end":
										return _context19.stop();
								}
							}
						}, _$$f$$9, this);
					}), 0, 1), 24);

				case 1:
				case "end":
					return _context20.stop();
			}
		}
	}, _$$$$9, this);
}), 0, 1));
asyncTest("break in while", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$10(_22) {
	return regeneratorRuntime.wrap(function _$$$$10$(_context22) {
		while (1) {
			switch (_context22.prev = _context22.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$10(_23) {
						var i, result;
						return regeneratorRuntime.wrap(function _$$f$$10$(_context21) {
							while (1) {
								switch (_context21.prev = _context21.next) {
									case 0:
										i = 1, result = 1;

									case 1:
										if (!(i < 10)) {
												_context21.next = 14;
												break;
											}

										if (!(i == 5)) {
												_context21.next = 4;
												break;
											}

										return _context21.abrupt("break", 14);

									case 4:
										_context21.next = 6;
										return _streamline.await(_filename, 112, null, delay, 0, null, false, [true, result]);

									case 6:
										_context21.t0 = _context21.sent;
										_context21.next = 9;
										return _streamline.await(_filename, 112, null, delay, 0, null, false, [true, i]);

									case 9:
										_context21.t1 = _context21.sent;
										result = _context21.t0 * _context21.t1;

										i++;
										_context21.next = 1;
										break;

									case 14:
										return _context21.abrupt("return", result);

									case 15:
									case "end":
										return _context21.stop();
								}
							}
						}, _$$f$$10, this);
					}), 0, 1), 24);

				case 1:
				case "end":
					return _context22.stop();
			}
		}
	}, _$$$$10, this);
}), 0, 1));
asyncTest("continue in while", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$11(_24) {
	return regeneratorRuntime.wrap(function _$$$$11$(_context24) {
		while (1) {
			switch (_context24.prev = _context24.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$11(_25) {
						var i, result;
						return regeneratorRuntime.wrap(function _$$f$$11$(_context23) {
							while (1) {
								switch (_context23.prev = _context23.next) {
									case 0:
										i = 1, result = 1;

									case 1:
										if (!(i < 10)) {
												_context23.next = 14;
												break;
											}

										i++;

										if (!(i >= 5)) {
												_context23.next = 5;
												break;
											}

										return _context23.abrupt("continue", 1);

									case 5:
										_context23.next = 7;
										return _streamline.await(_filename, 125, null, delay, 0, null, false, [true, result]);

									case 7:
										_context23.t0 = _context23.sent;
										_context23.next = 10;
										return _streamline.await(_filename, 125, null, delay, 0, null, false, [true, i]);

									case 10:
										_context23.t1 = _context23.sent;
										result = _context23.t0 * _context23.t1;
										_context23.next = 1;
										break;

									case 14:
										return _context23.abrupt("return", result);

									case 15:
									case "end":
										return _context23.stop();
								}
							}
						}, _$$f$$11, this);
					}), 0, 1), 24);

				case 1:
				case "end":
					return _context24.stop();
			}
		}
	}, _$$$$11, this);
}), 0, 1));
asyncTest("for (;;)", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$12(_26) {
	return regeneratorRuntime.wrap(function _$$$$12$(_context26) {
		while (1) {
			switch (_context26.prev = _context26.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$12(_27) {
						var i;
						return regeneratorRuntime.wrap(function _$$f$$12$(_context25) {
							while (1) {
								switch (_context25.prev = _context25.next) {
									case 0:
										i = 0;

									case 1:
										_context25.next = 3;
										return _streamline.await(_filename, 134, null, delay, 0, null, false, [true, ++i]);

									case 3:
										_context25.t0 = _context25.sent;

										if (!(_context25.t0 === 10)) {
												_context25.next = 6;
												break;
											}

										return _context25.abrupt("return", i);

									case 6:
										_context25.next = 1;
										break;

									case 8:
									case "end":
										return _context25.stop();
								}
							}
						}, _$$f$$12, this);
					}), 0, 1), 10);

				case 1:
				case "end":
					return _context26.stop();
			}
		}
	}, _$$$$12, this);
}), 0, 1));
asyncTest("eval lazy", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$13(_28) {
	return regeneratorRuntime.wrap(function _$$$$13$(_context28) {
		while (1) {
			switch (_context28.prev = _context28.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$13(_29) {
						var result;
						return regeneratorRuntime.wrap(function _$$f$$13$(_context27) {
							while (1) {
								switch (_context27.prev = _context27.next) {
									case 0:
										result = 1;
										_context27.t1 = _streamline;
										_context27.t2 = _filename;
										_context27.t3 = delay;
										_context27.next = 6;
										return _streamline.await(_filename, 141, null, delay, 0, null, false, [true, result + 8]);

									case 6:
										_context27.t4 = _context27.sent;
										_context27.t5 = _context27.t4 < 5;
										_context27.t6 = [true, _context27.t5];
										_context27.next = 11;
										return _context27.t1.await.call(_context27.t1, _context27.t2, 141, null, _context27.t3, 0, null, false, _context27.t6);

									case 11:
										_context27.t0 = _context27.sent;

										if (!_context27.t0) {
												_context27.next = 14;
												break;
											}

										_context27.t0 = true;

									case 14:
										if (!_context27.t0) {
												_context27.next = 18;
												break;
											}

										_context27.t7 = 2;
										_context27.next = 19;
										break;

									case 18:
										_context27.t7 = 4;

									case 19:
										return _context27.abrupt("return", _context27.t7);

									case 20:
									case "end":
										return _context27.stop();
								}
							}
						}, _$$f$$13, this);
					}), 0, 1), 4);

				case 1:
				case "end":
					return _context28.stop();
			}
		}
	}, _$$$$13, this);
}), 0, 1));
asyncTest("eval lazy full async", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$14(_30) {
	return regeneratorRuntime.wrap(function _$$$$14$(_context30) {
		while (1) {
			switch (_context30.prev = _context30.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$14(_31) {
						var result;
						return regeneratorRuntime.wrap(function _$$f$$14$(_context29) {
							while (1) {
								switch (_context29.prev = _context29.next) {
									case 0:
										result = 1;
										_context29.t1 = _streamline;
										_context29.t2 = _filename;
										_context29.t3 = delay;
										_context29.next = 6;
										return _streamline.await(_filename, 147, null, delay, 0, null, false, [true, result + 8]);

									case 6:
										_context29.t4 = _context29.sent;
										_context29.t5 = _context29.t4 < 5;
										_context29.t6 = [true, _context29.t5];
										_context29.next = 11;
										return _context29.t1.await.call(_context29.t1, _context29.t2, 147, null, _context29.t3, 0, null, false, _context29.t6);

									case 11:
										_context29.t0 = _context29.sent;

										if (!_context29.t0) {
												_context29.next = 14;
												break;
											}

										_context29.t0 = true;

									case 14:
										if (!_context29.t0) {
												_context29.next = 20;
												break;
											}

										_context29.next = 17;
										return _streamline.await(_filename, 147, null, delay, 0, null, false, [true, 2]);

									case 17:
										_context29.t7 = _context29.sent;
										_context29.next = 23;
										break;

									case 20:
										_context29.next = 22;
										return _streamline.await(_filename, 147, null, delay, 0, null, false, [true, 4]);

									case 22:
										_context29.t7 = _context29.sent;

									case 23:
										return _context29.abrupt("return", _context29.t7);

									case 24:
									case "end":
										return _context29.stop();
								}
							}
						}, _$$f$$14, this);
					}), 0, 1), 4);

				case 1:
				case "end":
					return _context30.stop();
			}
		}
	}, _$$$$14, this);
}), 0, 1));
asyncTest("try catch 1", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$15(_32) {
	return regeneratorRuntime.wrap(function _$$$$15$(_context32) {
		while (1) {
			switch (_context32.prev = _context32.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$15(_33) {
						return regeneratorRuntime.wrap(function _$$f$$15$(_context31) {
							while (1) {
								switch (_context31.prev = _context31.next) {
									case 0:
										_context31.prev = 0;
										_context31.next = 3;
										return _streamline.await(_filename, 153, null, delay, 0, null, false, [true, "ok"]);

									case 3:
										return _context31.abrupt("return", _context31.sent);

									case 6:
										_context31.prev = 6;
										_context31.t0 = _context31["catch"](0);
										_context31.next = 10;
										return _streamline.await(_filename, 155, null, delay, 0, null, false, [true, "err"]);

									case 10:
										return _context31.abrupt("return", _context31.sent);

									case 11:
									case "end":
										return _context31.stop();
								}
							}
						}, _$$f$$15, this, [[0, 6]]);
					}), 0, 1), "ok");

				case 1:
				case "end":
					return _context32.stop();
			}
		}
	}, _$$$$15, this);
}), 0, 1));
asyncTest("try catch 2", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$16(_34) {
	return regeneratorRuntime.wrap(function _$$$$16$(_context34) {
		while (1) {
			switch (_context34.prev = _context34.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$16(_35) {
						return regeneratorRuntime.wrap(function _$$f$$16$(_context33) {
							while (1) {
								switch (_context33.prev = _context33.next) {
									case 0:
										_context33.prev = 0;
										_context33.next = 3;
										return _streamline.await(_filename, 162, null, delay, 0, null, false, [true, "thrown"]);

									case 3:
										throw _context33.sent;

									case 6:
										_context33.prev = 6;
										_context33.t0 = _context33["catch"](0);
										_context33.next = 10;
										return _streamline.await(_filename, 164, null, delay, 0, null, false, [true, "caught "]);

									case 10:
										_context33.t1 = _context33.sent;
										_context33.t2 = _context33.t0;
										return _context33.abrupt("return", _context33.t1 + _context33.t2);

									case 13:
									case "end":
										return _context33.stop();
								}
							}
						}, _$$f$$16, this, [[0, 6]]);
					}), 0, 1), "caught thrown");

				case 1:
				case "end":
					return _context34.stop();
			}
		}
	}, _$$$$16, this);
}), 0, 1));
asyncTest("try catch 3", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$17(_36) {
	return regeneratorRuntime.wrap(function _$$$$17$(_context36) {
		while (1) {
			switch (_context36.prev = _context36.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$17(_37) {
						return regeneratorRuntime.wrap(function _$$f$$17$(_context35) {
							while (1) {
								switch (_context35.prev = _context35.next) {
									case 0:
										_context35.prev = 0;
										_context35.next = 3;
										return _streamline.await(_filename, 171, null, delay, 0, null, false, [true, "thrown"]);

									case 3:
										throw _context35.sent;

									case 6:
										_context35.prev = 6;
										_context35.t0 = _context35["catch"](0);
										_context35.next = 10;
										return _streamline.await(_filename, 173, null, delay, 0, null, false, [true, "caught "]);

									case 10:
										_context35.t1 = _context35.sent;
										_context35.t2 = _context35.t0;
										return _context35.abrupt("return", _context35.t1 + _context35.t2);

									case 13:
									case "end":
										return _context35.stop();
								}
							}
						}, _$$f$$17, this, [[0, 6]]);
					}), 0, 1), "caught thrown");

				case 1:
				case "end":
					return _context36.stop();
			}
		}
	}, _$$$$17, this);
}), 0, 1));
asyncTest("try catch 5", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$18(_38) {
	return regeneratorRuntime.wrap(function _$$$$18$(_context38) {
		while (1) {
			switch (_context38.prev = _context38.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$18(_39) {
						return regeneratorRuntime.wrap(function _$$f$$18$(_context37) {
							while (1) {
								switch (_context37.prev = _context37.next) {
									case 0:
										_context37.prev = 0;
										_context37.next = 3;
										return _streamline.await(_filename, 180, null, delayFail, 0, null, false, [true, "delay fail"]);

									case 3:
										_context37.next = 12;
										break;

									case 5:
										_context37.prev = 5;
										_context37.t0 = _context37["catch"](0);
										_context37.next = 9;
										return _streamline.await(_filename, 182, null, delay, 0, null, false, [true, "caught "]);

									case 9:
										_context37.t1 = _context37.sent;
										_context37.t2 = _context37.t0;
										return _context37.abrupt("return", _context37.t1 + _context37.t2);

									case 12:
									case "end":
										return _context37.stop();
								}
							}
						}, _$$f$$18, this, [[0, 5]]);
					}), 0, 1), "caught delay fail");

				case 1:
				case "end":
					return _context38.stop();
			}
		}
	}, _$$$$18, this);
}), 0, 1));
asyncTest("try catch 6", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$19(_40) {
	return regeneratorRuntime.wrap(function _$$$$19$(_context40) {
		while (1) {
			switch (_context40.prev = _context40.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$19(_41) {
						return regeneratorRuntime.wrap(function _$$f$$19$(_context39) {
							while (1) {
								switch (_context39.prev = _context39.next) {
									case 0:
										_context39.prev = 0;

										throwError("direct");
										_context39.next = 4;
										return _streamline.await(_filename, 190, null, delay, 0, null, false, [true, "ok"]);

									case 4:
										return _context39.abrupt("return", _context39.sent);

									case 7:
										_context39.prev = 7;
										_context39.t0 = _context39["catch"](0);
										_context39.next = 11;
										return _streamline.await(_filename, 192, null, delay, 0, null, false, [true, "caught "]);

									case 11:
										_context39.t1 = _context39.sent;
										_context39.t2 = _context39.t0.message;
										return _context39.abrupt("return", _context39.t1 + _context39.t2);

									case 14:
									case "end":
										return _context39.stop();
								}
							}
						}, _$$f$$19, this, [[0, 7]]);
					}), 0, 1), "caught direct");

				case 1:
				case "end":
					return _context40.stop();
			}
		}
	}, _$$$$19, this);
}), 0, 1));
asyncTest("try catch 7", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$20(_42) {
	return regeneratorRuntime.wrap(function _$$$$20$(_context42) {
		while (1) {
			switch (_context42.prev = _context42.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$20(_43) {
						var message;
						return regeneratorRuntime.wrap(function _$$f$$20$(_context41) {
							while (1) {
								switch (_context41.prev = _context41.next) {
									case 0:
										_context41.prev = 0;
										_context41.next = 3;
										return _streamline.await(_filename, 199, null, delay, 0, null, false, [true, "indirect"]);

									case 3:
										message = _context41.sent;

										throwError(message);
										_context41.next = 7;
										return _streamline.await(_filename, 201, null, delay, 0, null, false, [true, "ok"]);

									case 7:
										return _context41.abrupt("return", _context41.sent);

									case 10:
										_context41.prev = 10;
										_context41.t0 = _context41["catch"](0);
										_context41.next = 14;
										return _streamline.await(_filename, 203, null, delay, 0, null, false, [true, "caught "]);

									case 14:
										_context41.t1 = _context41.sent;
										_context41.t2 = _context41.t0.message;
										return _context41.abrupt("return", _context41.t1 + _context41.t2);

									case 17:
									case "end":
										return _context41.stop();
								}
							}
						}, _$$f$$20, this, [[0, 10]]);
					}), 0, 1), "caught indirect");

				case 1:
				case "end":
					return _context42.stop();
			}
		}
	}, _$$$$20, this);
}), 0, 1));
asyncTest("try finally 1", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$21(_44) {
	return regeneratorRuntime.wrap(function _$$$$21$(_context44) {
		while (1) {
			switch (_context44.prev = _context44.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$21(_45) {
						var x;
						return regeneratorRuntime.wrap(function _$$f$$21$(_context43) {
							while (1) {
								switch (_context43.prev = _context43.next) {
									case 0:
										x = "";
										_context43.prev = 1;
										_context43.next = 4;
										return _streamline.await(_filename, 211, null, delay, 0, null, false, [true, "try"]);

									case 4:
										x += _context43.sent;

									case 5:
										_context43.prev = 5;
										_context43.next = 8;
										return _streamline.await(_filename, 213, null, delay, 0, null, false, [true, " finally"]);

									case 8:
										x += _context43.sent;
										return _context43.finish(5);

									case 10:
										x += " end";
										return _context43.abrupt("return", x);

									case 12:
									case "end":
										return _context43.stop();
								}
							}
						}, _$$f$$21, this, [[1,, 5, 10]]);
					}), 0, 1), "try finally end");

				case 1:
				case "end":
					return _context44.stop();
			}
		}
	}, _$$$$21, this);
}), 0, 1));
asyncTest("try finally 2", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$22(_46) {
	return regeneratorRuntime.wrap(function _$$$$22$(_context46) {
		while (1) {
			switch (_context46.prev = _context46.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$22(_47) {
						var x;
						return regeneratorRuntime.wrap(function _$$f$$22$(_context45) {
							while (1) {
								switch (_context45.prev = _context45.next) {
									case 0:
										x = "";
										_context45.prev = 1;
										_context45.next = 4;
										return _streamline.await(_filename, 223, null, delay, 0, null, false, [true, "try"]);

									case 4:
										x += _context45.sent;
										return _context45.abrupt("return", x);

									case 6:
										_context45.prev = 6;
										_context45.next = 9;
										return _streamline.await(_filename, 226, null, delay, 0, null, false, [true, " finally"]);

									case 9:
										x += _context45.sent;
										return _context45.finish(6);

									case 11:
										x += " end";
										return _context45.abrupt("return", x);

									case 13:
									case "end":
										return _context45.stop();
								}
							}
						}, _$$f$$22, this, [[1,, 6, 11]]);
					}), 0, 1), "try");

				case 1:
				case "end":
					return _context46.stop();
			}
		}
	}, _$$$$22, this);
}), 0, 1));
asyncTest("try finally 3", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$23(_48) {
	return regeneratorRuntime.wrap(function _$$$$23$(_context48) {
		while (1) {
			switch (_context48.prev = _context48.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$23(_49) {
						var x;
						return regeneratorRuntime.wrap(function _$$f$$23$(_context47) {
							while (1) {
								switch (_context47.prev = _context47.next) {
									case 0:
										x = "";
										_context47.prev = 1;
										_context47.next = 4;
										return _streamline.await(_filename, 236, null, delay, 0, null, false, [true, "try"]);

									case 4:
										x += _context47.sent;
										throw "bad try";

									case 6:
										_context47.prev = 6;
										_context47.next = 9;
										return _streamline.await(_filename, 239, null, delay, 0, null, false, [true, " finally"]);

									case 9:
										x += _context47.sent;
										return _context47.finish(6);

									case 11:
										x += " end";
										return _context47.abrupt("return", x);

									case 13:
									case "end":
										return _context47.stop();
								}
							}
						}, _$$f$$23, this, [[1,, 6, 11]]);
					}), 0, 1), "ERR: bad try");

				case 1:
				case "end":
					return _context48.stop();
			}
		}
	}, _$$$$23, this);
}), 0, 1));
asyncTest("try finally 4", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$24(_50) {
	return regeneratorRuntime.wrap(function _$$$$24$(_context50) {
		while (1) {
			switch (_context50.prev = _context50.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$24(_51) {
						var x;
						return regeneratorRuntime.wrap(function _$$f$$24$(_context49) {
							while (1) {
								switch (_context49.prev = _context49.next) {
									case 0:
										x = "";
										_context49.prev = 1;
										_context49.next = 4;
										return _streamline.await(_filename, 249, null, delay, 0, null, false, [true, "try"]);

									case 4:
										x += _context49.sent;

										throwError("except");

									case 6:
										_context49.prev = 6;
										_context49.next = 9;
										return _streamline.await(_filename, 252, null, delay, 0, null, false, [true, " finally"]);

									case 9:
										x += _context49.sent;
										return _context49.finish(6);

									case 11:
										x += " end";
										return _context49.abrupt("return", x);

									case 13:
									case "end":
										return _context49.stop();
								}
							}
						}, _$$f$$24, this, [[1,, 6, 11]]);
					}), 0, 1), "ERR: Error: except");

				case 1:
				case "end":
					return _context50.stop();
			}
		}
	}, _$$$$24, this);
}), 0, 1));
asyncTest("try finally 5", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$25(_52) {
	return regeneratorRuntime.wrap(function _$$$$25$(_context52) {
		while (1) {
			switch (_context52.prev = _context52.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$25(_53) {
						var x;
						return regeneratorRuntime.wrap(function _$$f$$25$(_context51) {
							while (1) {
								switch (_context51.prev = _context51.next) {
									case 0:
										x = "";
										_context51.prev = 1;
										_context51.prev = 2;
										_context51.next = 5;
										return _streamline.await(_filename, 263, null, delay, 0, null, false, [true, "try"]);

									case 5:
										x += _context51.sent;

										throwError("except");
										x += " unreached";

									case 8:
										_context51.prev = 8;
										_context51.next = 11;
										return _streamline.await(_filename, 267, null, delay, 0, null, false, [true, " finally"]);

									case 11:
										x += _context51.sent;
										return _context51.finish(8);

									case 13:
										x += " end";
										return _context51.abrupt("return", x);

									case 17:
										_context51.prev = 17;
										_context51.t0 = _context51["catch"](1);
										return _context51.abrupt("return", x + "/" + _context51.t0.message);

									case 20:
									case "end":
										return _context51.stop();
								}
							}
						}, _$$f$$25, this, [[1, 17], [2,, 8, 13]]);
					}), 0, 1), "try finally/except");

				case 1:
				case "end":
					return _context52.stop();
			}
		}
	}, _$$$$25, this);
}), 0, 1));
asyncTest("try catch finally 1", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$26(_54) {
	return regeneratorRuntime.wrap(function _$$$$26$(_context54) {
		while (1) {
			switch (_context54.prev = _context54.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$26(_55) {
						var x;
						return regeneratorRuntime.wrap(function _$$f$$26$(_context53) {
							while (1) {
								switch (_context53.prev = _context53.next) {
									case 0:
										x = "";
										_context53.prev = 1;
										_context53.prev = 2;
										_context53.next = 5;
										return _streamline.await(_filename, 281, null, delay, 0, null, false, [true, "try"]);

									case 5:
										x += _context53.sent;
										throw new Error("except");

									case 10:
										_context53.prev = 10;
										_context53.t0 = _context53["catch"](2);
										_context53.next = 14;
										return _streamline.await(_filename, 285, null, delay, 0, null, false, [true, " catch " + _context53.t0.message]);

									case 14:
										x += _context53.sent;
										throw _context53.t0;

									case 16:
										_context53.prev = 16;
										_context53.next = 19;
										return _streamline.await(_filename, 288, null, delay, 0, null, false, [true, " finally"]);

									case 19:
										x += _context53.sent;
										return _context53.finish(16);

									case 21:
										x += " end";
										return _context53.abrupt("return", x);

									case 25:
										_context53.prev = 25;
										_context53.t1 = _context53["catch"](1);
										return _context53.abrupt("return", x + "/" + _context53.t1.message);

									case 28:
									case "end":
										return _context53.stop();
								}
							}
						}, _$$f$$26, this, [[1, 25], [2, 10, 16, 21]]);
					}), 0, 1), "try catch except finally/except");

				case 1:
				case "end":
					return _context54.stop();
			}
		}
	}, _$$$$26, this);
}), 0, 1));
asyncTest("try catch finally 2", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$27(_56) {
	return regeneratorRuntime.wrap(function _$$$$27$(_context56) {
		while (1) {
			switch (_context56.prev = _context56.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$27(_57) {
						var x;
						return regeneratorRuntime.wrap(function _$$f$$27$(_context55) {
							while (1) {
								switch (_context55.prev = _context55.next) {
									case 0:
										x = "";
										_context55.prev = 1;
										_context55.prev = 2;
										_context55.next = 5;
										return _streamline.await(_filename, 302, null, delay, 0, null, false, [true, "try"]);

									case 5:
										x += _context55.sent;

										throwError("except");
										x += " unreached";
										_context55.next = 14;
										break;

									case 10:
										_context55.prev = 10;
										_context55.t0 = _context55["catch"](2);

										x += " catch " + _context55.t0.message;
										throw _context55.t0;

									case 14:
										_context55.prev = 14;

										x += " finally";
										return _context55.finish(14);

									case 17:
										x += " end";
										return _context55.abrupt("return", x);

									case 21:
										_context55.prev = 21;
										_context55.t1 = _context55["catch"](1);
										return _context55.abrupt("return", x + "/" + _context55.t1.message);

									case 24:
									case "end":
										return _context55.stop();
								}
							}
						}, _$$f$$27, this, [[1, 21], [2, 10, 14, 17]]);
					}), 0, 1), "try catch except finally/except");

				case 1:
				case "end":
					return _context56.stop();
			}
		}
	}, _$$$$27, this);
}), 0, 1));
asyncTest("nested try/catch 1", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$28(_58) {
	return regeneratorRuntime.wrap(function _$$$$28$(_context58) {
		while (1) {
			switch (_context58.prev = _context58.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$28(_59) {
						var x;
						return regeneratorRuntime.wrap(function _$$f$$28$(_context57) {
							while (1) {
								switch (_context57.prev = _context57.next) {
									case 0:
										x = "";
										_context57.prev = 1;
										_context57.prev = 2;
										_context57.next = 5;
										return _streamline.await(_filename, 323, null, delay, 0, null, false, [true, "try"]);

									case 5:
										x += _context57.sent;
										_context57.next = 13;
										break;

									case 8:
										_context57.prev = 8;
										_context57.t0 = _context57["catch"](2);
										_context57.next = 12;
										return _streamline.await(_filename, 325, null, delay, 0, null, false, [true, " inner catch " + _context57.t0.message]);

									case 12:
										x += _context57.sent;

									case 13:
										throwError(" except");
										_context57.next = 19;
										break;

									case 16:
										_context57.prev = 16;
										_context57.t1 = _context57["catch"](1);
										return _context57.abrupt("return", x + " outer catch" + _context57.t1.message);

									case 19:
									case "end":
										return _context57.stop();
								}
							}
						}, _$$f$$28, this, [[1, 16], [2, 8]]);
					}), 0, 1), "try outer catch except");

				case 1:
				case "end":
					return _context58.stop();
			}
		}
	}, _$$$$28, this);
}), 0, 1));
asyncTest("nested try/catch 2", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$29(_60) {
	return regeneratorRuntime.wrap(function _$$$$29$(_context60) {
		while (1) {
			switch (_context60.prev = _context60.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$29(_61) {
						var x;
						return regeneratorRuntime.wrap(function _$$f$$29$(_context59) {
							while (1) {
								switch (_context59.prev = _context59.next) {
									case 0:
										x = "";
										_context59.prev = 1;
										_context59.prev = 2;
										_context59.next = 5;
										return _streamline.await(_filename, 338, null, delay, 0, null, false, [true, "try"]);

									case 5:
										x += _context59.sent;
										_context59.next = 11;
										break;

									case 8:
										_context59.prev = 8;
										_context59.t0 = _context59["catch"](2);

										x += " inner catch " + _context59.t0.message;

									case 11:
										throw new Error(" except");

									case 14:
										_context59.prev = 14;
										_context59.t1 = _context59["catch"](1);
										return _context59.abrupt("return", x + " outer catch" + _context59.t1.message);

									case 17:
									case "end":
										return _context59.stop();
								}
							}
						}, _$$f$$29, this, [[1, 14], [2, 8]]);
					}), 0, 1), "try outer catch except");

				case 1:
				case "end":
					return _context60.stop();
			}
		}
	}, _$$$$29, this);
}), 0, 1));
asyncTest("nested try/catch 3", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$30(_62) {
	return regeneratorRuntime.wrap(function _$$$$30$(_context62) {
		while (1) {
			switch (_context62.prev = _context62.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$30(_63) {
						var x;
						return regeneratorRuntime.wrap(function _$$f$$30$(_context61) {
							while (1) {
								switch (_context61.prev = _context61.next) {
									case 0:
										x = "";
										_context61.prev = 1;
										_context61.prev = 2;
										_context61.next = 5;
										return _streamline.await(_filename, 353, null, delay, 0, null, false, [true, "try"]);

									case 5:
										x += _context61.sent;
										_context61.next = 13;
										break;

									case 8:
										_context61.prev = 8;
										_context61.t0 = _context61["catch"](2);
										_context61.next = 12;
										return _streamline.await(_filename, 355, null, delay, 0, null, false, [true, " inner catch " + _context61.t0.message]);

									case 12:
										x += _context61.sent;

									case 13:
										throw new Error(" except");

									case 16:
										_context61.prev = 16;
										_context61.t1 = _context61["catch"](1);
										return _context61.abrupt("return", x + " outer catch" + _context61.t1.message);

									case 19:
									case "end":
										return _context61.stop();
								}
							}
						}, _$$f$$30, this, [[1, 16], [2, 8]]);
					}), 0, 1), "try outer catch except");

				case 1:
				case "end":
					return _context62.stop();
			}
		}
	}, _$$$$30, this);
}), 0, 1));
asyncTest("nested try/finally 1", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$31(_64) {
	return regeneratorRuntime.wrap(function _$$$$31$(_context64) {
		while (1) {
			switch (_context64.prev = _context64.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$31(_65) {
						var x;
						return regeneratorRuntime.wrap(function _$$f$$31$(_context63) {
							while (1) {
								switch (_context63.prev = _context63.next) {
									case 0:
										x = "";
										_context63.prev = 1;
										_context63.prev = 2;
										_context63.next = 5;
										return _streamline.await(_filename, 368, null, delay, 0, null, false, [true, "try"]);

									case 5:
										x += _context63.sent;

									case 6:
										_context63.prev = 6;
										_context63.next = 9;
										return _streamline.await(_filename, 370, null, delay, 0, null, false, [true, " inner finally"]);

									case 9:
										x += _context63.sent;
										return _context63.finish(6);

									case 11:
										throwError(" except");
										_context63.next = 17;
										break;

									case 14:
										_context63.prev = 14;
										_context63.t0 = _context63["catch"](1);
										return _context63.abrupt("return", x + " outer catch" + _context63.t0.message);

									case 17:
									case "end":
										return _context63.stop();
								}
							}
						}, _$$f$$31, this, [[1, 14], [2,, 6, 11]]);
					}), 0, 1), "try inner finally outer catch except");

				case 1:
				case "end":
					return _context64.stop();
			}
		}
	}, _$$$$31, this);
}), 0, 1));
asyncTest("nested try/finally 2", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$32(_66) {
	return regeneratorRuntime.wrap(function _$$$$32$(_context66) {
		while (1) {
			switch (_context66.prev = _context66.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$32(_67) {
						var x;
						return regeneratorRuntime.wrap(function _$$f$$32$(_context65) {
							while (1) {
								switch (_context65.prev = _context65.next) {
									case 0:
										x = "";
										_context65.prev = 1;
										_context65.prev = 2;
										_context65.next = 5;
										return _streamline.await(_filename, 383, null, delay, 0, null, false, [true, "try"]);

									case 5:
										x += _context65.sent;

									case 6:
										_context65.prev = 6;

										x += " inner finally";
										return _context65.finish(6);

									case 9:
										throwError(" except");
										_context65.next = 15;
										break;

									case 12:
										_context65.prev = 12;
										_context65.t0 = _context65["catch"](1);
										return _context65.abrupt("return", x + " outer catch" + _context65.t0.message);

									case 15:
									case "end":
										return _context65.stop();
								}
							}
						}, _$$f$$32, this, [[1, 12], [2,, 6, 9]]);
					}), 0, 1), "try inner finally outer catch except");

				case 1:
				case "end":
					return _context66.stop();
			}
		}
	}, _$$$$32, this);
}), 0, 1));
asyncTest("nested try/finally 3", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$33(_68) {
	return regeneratorRuntime.wrap(function _$$$$33$(_context68) {
		while (1) {
			switch (_context68.prev = _context68.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$33(_69) {
						var x;
						return regeneratorRuntime.wrap(function _$$f$$33$(_context67) {
							while (1) {
								switch (_context67.prev = _context67.next) {
									case 0:
										x = "";
										_context67.prev = 1;
										_context67.prev = 2;
										_context67.next = 5;
										return _streamline.await(_filename, 398, null, delay, 0, null, false, [true, "try"]);

									case 5:
										x += _context67.sent;

									case 6:
										_context67.prev = 6;
										_context67.next = 9;
										return _streamline.await(_filename, 400, null, delay, 0, null, false, [true, " inner finally"]);

									case 9:
										x += _context67.sent;
										return _context67.finish(6);

									case 11:
										throw new Error(" except");

									case 14:
										_context67.prev = 14;
										_context67.t0 = _context67["catch"](1);
										return _context67.abrupt("return", x + " outer catch" + _context67.t0.message);

									case 17:
									case "end":
										return _context67.stop();
								}
							}
						}, _$$f$$33, this, [[1, 14], [2,, 6, 11]]);
					}), 0, 1), "try inner finally outer catch except");

				case 1:
				case "end":
					return _context68.stop();
			}
		}
	}, _$$$$33, this);
}), 0, 1));
asyncTest("and ok", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$34(_70) {
	return regeneratorRuntime.wrap(function _$$$$34$(_context70) {
		while (1) {
			switch (_context70.prev = _context70.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$34(_71) {
						var x;
						return regeneratorRuntime.wrap(function _$$f$$34$(_context69) {
							while (1) {
								switch (_context69.prev = _context69.next) {
									case 0:
										x = "<<";
										_context69.next = 3;
										return _streamline.await(_filename, 411, null, delay, 0, null, false, [true, true]);

									case 3:
										_context69.t0 = _context69.sent;

										if (!_context69.t0) {
												_context69.next = 8;
												break;
											}

										_context69.next = 7;
										return _streamline.await(_filename, 411, null, delay, 0, null, false, [true, true]);

									case 7:
										_context69.t0 = _context69.sent;

									case 8:
										if (!_context69.t0) {
												_context69.next = 12;
												break;
											}

										x += "T1";
										_context69.next = 13;
										break;

									case 12:
										x += "F1";

									case 13:
										_context69.next = 15;
										return _streamline.await(_filename, 413, null, delay, 0, null, false, [true, true]);

									case 15:
										_context69.t1 = _context69.sent;

										if (!_context69.t1) {
												_context69.next = 20;
												break;
											}

										_context69.next = 19;
										return _streamline.await(_filename, 413, null, delay, 0, null, false, [true, false]);

									case 19:
										_context69.t1 = _context69.sent;

									case 20:
										if (!_context69.t1) {
												_context69.next = 24;
												break;
											}

										x += "T2";
										_context69.next = 25;
										break;

									case 24:
										x += "F2";

									case 25:
										_context69.next = 27;
										return _streamline.await(_filename, 415, null, delay, 0, null, false, [true, false]);

									case 27:
										_context69.t2 = _context69.sent;

										if (!_context69.t2) {
												_context69.next = 32;
												break;
											}

										_context69.next = 31;
										return _streamline.await(_filename, 415, null, delay, 0, null, false, [true, true]);

									case 31:
										_context69.t2 = _context69.sent;

									case 32:
										if (!_context69.t2) {
												_context69.next = 36;
												break;
											}

										x += "T3";
										_context69.next = 37;
										break;

									case 36:
										x += "F3";

									case 37:
										_context69.next = 39;
										return _streamline.await(_filename, 417, null, delay, 0, null, false, [true, false]);

									case 39:
										_context69.t3 = _context69.sent;

										if (!_context69.t3) {
												_context69.next = 44;
												break;
											}

										_context69.next = 43;
										return _streamline.await(_filename, 417, null, delay, 0, null, false, [true, false]);

									case 43:
										_context69.t3 = _context69.sent;

									case 44:
										if (!_context69.t3) {
												_context69.next = 48;
												break;
											}

										x += "T4";
										_context69.next = 49;
										break;

									case 48:
										x += "F4";

									case 49:
										_context69.next = 51;
										return _streamline.await(_filename, 419, null, delay, 0, null, false, [true, false]);

									case 51:
										_context69.t4 = _context69.sent;

										if (!_context69.t4) {
												_context69.next = 56;
												break;
											}

										_context69.next = 55;
										return _streamline.await(_filename, 419, null, delayFail, 0, null, false, [true, "bad"]);

									case 55:
										_context69.t4 = _context69.sent;

									case 56:
										if (!_context69.t4) {
												_context69.next = 60;
												break;
											}

										x += "T5";
										_context69.next = 61;
										break;

									case 60:
										x += "F5";

									case 61:
										x += ">>";
										return _context69.abrupt("return", x);

									case 63:
									case "end":
										return _context69.stop();
								}
							}
						}, _$$f$$34, this);
					}), 0, 1), "<<T1F2F3F4F5>>");

				case 1:
				case "end":
					return _context70.stop();
			}
		}
	}, _$$$$34, this);
}), 0, 1));
asyncTest("or ok", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$35(_72) {
	return regeneratorRuntime.wrap(function _$$$$35$(_context72) {
		while (1) {
			switch (_context72.prev = _context72.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$35(_73) {
						var x;
						return regeneratorRuntime.wrap(function _$$f$$35$(_context71) {
							while (1) {
								switch (_context71.prev = _context71.next) {
									case 0:
										x = "<<";
										_context71.next = 3;
										return _streamline.await(_filename, 428, null, delay, 0, null, false, [true, true]);

									case 3:
										_context71.t0 = _context71.sent;

										if (_context71.t0) {
												_context71.next = 8;
												break;
											}

										_context71.next = 7;
										return _streamline.await(_filename, 428, null, delay, 0, null, false, [true, true]);

									case 7:
										_context71.t0 = _context71.sent;

									case 8:
										if (!_context71.t0) {
												_context71.next = 12;
												break;
											}

										x += "T1";
										_context71.next = 13;
										break;

									case 12:
										x += "F1";

									case 13:
										_context71.next = 15;
										return _streamline.await(_filename, 430, null, delay, 0, null, false, [true, true]);

									case 15:
										_context71.t1 = _context71.sent;

										if (_context71.t1) {
												_context71.next = 20;
												break;
											}

										_context71.next = 19;
										return _streamline.await(_filename, 430, null, delay, 0, null, false, [true, false]);

									case 19:
										_context71.t1 = _context71.sent;

									case 20:
										if (!_context71.t1) {
												_context71.next = 24;
												break;
											}

										x += "T2";
										_context71.next = 25;
										break;

									case 24:
										x += "F2";

									case 25:
										_context71.next = 27;
										return _streamline.await(_filename, 432, null, delay, 0, null, false, [true, false]);

									case 27:
										_context71.t2 = _context71.sent;

										if (_context71.t2) {
												_context71.next = 32;
												break;
											}

										_context71.next = 31;
										return _streamline.await(_filename, 432, null, delay, 0, null, false, [true, true]);

									case 31:
										_context71.t2 = _context71.sent;

									case 32:
										if (!_context71.t2) {
												_context71.next = 36;
												break;
											}

										x += "T3";
										_context71.next = 37;
										break;

									case 36:
										x += "F3";

									case 37:
										_context71.next = 39;
										return _streamline.await(_filename, 434, null, delay, 0, null, false, [true, false]);

									case 39:
										_context71.t3 = _context71.sent;

										if (_context71.t3) {
												_context71.next = 44;
												break;
											}

										_context71.next = 43;
										return _streamline.await(_filename, 434, null, delay, 0, null, false, [true, false]);

									case 43:
										_context71.t3 = _context71.sent;

									case 44:
										if (!_context71.t3) {
												_context71.next = 48;
												break;
											}

										x += "T4";
										_context71.next = 49;
										break;

									case 48:
										x += "F4";

									case 49:
										_context71.next = 51;
										return _streamline.await(_filename, 436, null, delay, 0, null, false, [true, true]);

									case 51:
										_context71.t4 = _context71.sent;

										if (_context71.t4) {
												_context71.next = 56;
												break;
											}

										_context71.next = 55;
										return _streamline.await(_filename, 436, null, delayFail, 0, null, false, [true, "bad"]);

									case 55:
										_context71.t4 = _context71.sent;

									case 56:
										if (!_context71.t4) {
												_context71.next = 60;
												break;
											}

										x += "T5";
										_context71.next = 61;
										break;

									case 60:
										x += "F5";

									case 61:
										x += ">>";
										return _context71.abrupt("return", x);

									case 63:
									case "end":
										return _context71.stop();
								}
							}
						}, _$$f$$35, this);
					}), 0, 1), "<<T1T2T3F4T5>>");

				case 1:
				case "end":
					return _context72.stop();
			}
		}
	}, _$$$$35, this);
}), 0, 1));
asyncTest("switch with default", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$36(_74) {
	return regeneratorRuntime.wrap(function _$$$$36$(_context75) {
		while (1) {
			switch (_context75.prev = _context75.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$36(_75) {
						var g;
						return regeneratorRuntime.wrap(function _$$f$$36$(_context74) {
							while (1) {
								switch (_context74.prev = _context74.next) {
									case 0:
										g = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$g$$(_76, i) {
											var result;
											return regeneratorRuntime.wrap(function _$$g$$$(_context73) {
												while (1) {
													switch (_context73.prev = _context73.next) {
														case 0:
															result = "a";
															_context73.next = 3;
															return _streamline.await(_filename, 446, null, delay, 0, null, false, [true, i]);

														case 3:
															_context73.t0 = _context73.sent;
															_context73.next = _context73.t0 === 1 ? 6 : _context73.t0 === 2 ? 10 : _context73.t0 === 3 ? 13 : _context73.t0 === 4 ? 13 : 17;
															break;

														case 6:
															_context73.next = 8;
															return _streamline.await(_filename, 448, null, delay, 0, null, false, [true, "b"]);

														case 8:
															result = _context73.sent;
															return _context73.abrupt("break", 20);

														case 10:
															_context73.next = 12;
															return _streamline.await(_filename, 451, null, delay, 0, null, false, [true, "c"]);

														case 12:
															return _context73.abrupt("return", _context73.sent);

														case 13:
															_context73.next = 15;
															return _streamline.await(_filename, 454, null, delay, 0, null, false, [true, "d"]);

														case 15:
															result = _context73.sent;
															return _context73.abrupt("break", 20);

														case 17:
															_context73.next = 19;
															return _streamline.await(_filename, 457, null, delay, 0, null, false, [true, "e"]);

														case 19:
															result = _context73.sent;

														case 20:
															return _context73.abrupt("return", result);

														case 21:
														case "end":
															return _context73.stop();
													}
												}
											}, _$$g$$, this);
										}), 0, 2);
										_context74.next = 3;
										return _streamline.await(_filename, 462, null, g, 0, null, false, [true, 0]);

									case 3:
										_context74.t0 = _context74.sent;
										_context74.next = 6;
										return _streamline.await(_filename, 462, null, g, 0, null, false, [true, 1]);

									case 6:
										_context74.t1 = _context74.sent;
										_context74.t2 = _context74.t0 + _context74.t1;
										_context74.next = 10;
										return _streamline.await(_filename, 462, null, g, 0, null, false, [true, 2]);

									case 10:
										_context74.t3 = _context74.sent;
										_context74.t4 = _context74.t2 + _context74.t3;
										_context74.next = 14;
										return _streamline.await(_filename, 462, null, g, 0, null, false, [true, 3]);

									case 14:
										_context74.t5 = _context74.sent;
										_context74.t6 = _context74.t4 + _context74.t5;
										_context74.next = 18;
										return _streamline.await(_filename, 462, null, g, 0, null, false, [true, 4]);

									case 18:
										_context74.t7 = _context74.sent;
										_context74.t8 = _context74.t6 + _context74.t7;
										_context74.next = 22;
										return _streamline.await(_filename, 462, null, g, 0, null, false, [true, 5]);

									case 22:
										_context74.t9 = _context74.sent;
										return _context74.abrupt("return", _context74.t8 + _context74.t9);

									case 24:
									case "end":
										return _context74.stop();
								}
							}
						}, _$$f$$36, this);
					}), 0, 1), "ebcdde");

				case 1:
				case "end":
					return _context75.stop();
			}
		}
	}, _$$$$36, this);
}), 0, 1));
asyncTest("switch without default", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$37(_77) {
	return regeneratorRuntime.wrap(function _$$$$37$(_context78) {
		while (1) {
			switch (_context78.prev = _context78.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$37(_78) {
						var g;
						return regeneratorRuntime.wrap(function _$$f$$37$(_context77) {
							while (1) {
								switch (_context77.prev = _context77.next) {
									case 0:
										g = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$g$$2(_79, i) {
											var result;
											return regeneratorRuntime.wrap(function _$$g$$2$(_context76) {
												while (1) {
													switch (_context76.prev = _context76.next) {
														case 0:
															result = "a";
															_context76.next = 3;
															return _streamline.await(_filename, 469, null, delay, 0, null, false, [true, i]);

														case 3:
															_context76.t0 = _context76.sent;
															_context76.next = _context76.t0 === 1 ? 6 : _context76.t0 === 2 ? 8 : _context76.t0 === 3 ? 9 : _context76.t0 === 4 ? 9 : 11;
															break;

														case 6:
															result = "b";
															return _context76.abrupt("break", 11);

														case 8:
															return _context76.abrupt("return", "c");

														case 9:
															result = "d";
															return _context76.abrupt("break", 11);

														case 11:
															return _context76.abrupt("return", result);

														case 12:
														case "end":
															return _context76.stop();
													}
												}
											}, _$$g$$2, this);
										}), 0, 2);
										_context77.next = 3;
										return _streamline.await(_filename, 483, null, g, 0, null, false, [true, 0]);

									case 3:
										_context77.t0 = _context77.sent;
										_context77.next = 6;
										return _streamline.await(_filename, 483, null, g, 0, null, false, [true, 1]);

									case 6:
										_context77.t1 = _context77.sent;
										_context77.t2 = _context77.t0 + _context77.t1;
										_context77.next = 10;
										return _streamline.await(_filename, 483, null, g, 0, null, false, [true, 2]);

									case 10:
										_context77.t3 = _context77.sent;
										_context77.t4 = _context77.t2 + _context77.t3;
										_context77.next = 14;
										return _streamline.await(_filename, 483, null, g, 0, null, false, [true, 3]);

									case 14:
										_context77.t5 = _context77.sent;
										_context77.t6 = _context77.t4 + _context77.t5;
										_context77.next = 18;
										return _streamline.await(_filename, 483, null, g, 0, null, false, [true, 4]);

									case 18:
										_context77.t7 = _context77.sent;
										_context77.t8 = _context77.t6 + _context77.t7;
										_context77.next = 22;
										return _streamline.await(_filename, 483, null, g, 0, null, false, [true, 5]);

									case 22:
										_context77.t9 = _context77.sent;
										return _context77.abrupt("return", _context77.t8 + _context77.t9);

									case 24:
									case "end":
										return _context77.stop();
								}
							}
						}, _$$f$$37, this);
					}), 0, 1), "abcdda");

				case 1:
				case "end":
					return _context78.stop();
			}
		}
	}, _$$$$37, this);
}), 0, 1));
asyncTest("switch with fall through", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$38(_80) {
	return regeneratorRuntime.wrap(function _$$$$38$(_context81) {
		while (1) {
			switch (_context81.prev = _context81.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$38(_81) {
						var g;
						return regeneratorRuntime.wrap(function _$$f$$38$(_context80) {
							while (1) {
								switch (_context80.prev = _context80.next) {
									case 0:
										g = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$g$$3(_82, i) {
											var result;
											return regeneratorRuntime.wrap(function _$$g$$3$(_context79) {
												while (1) {
													switch (_context79.prev = _context79.next) {
														case 0:
															result = "/";
															_context79.next = 3;
															return _streamline.await(_filename, 490, null, delay, 0, null, false, [true, i]);

														case 3:
															_context79.t0 = _context79.sent;
															_context79.next = _context79.t0 === 1 ? 6 : _context79.t0 === 2 ? 10 : _context79.t0 === 3 ? 13 : _context79.t0 === 4 ? 13 : _context79.t0 === 5 ? 14 : _context79.t0 === 6 ? 18 : 21;
															break;

														case 6:
															_context79.next = 8;
															return _streamline.await(_filename, 492, null, delay, 0, null, false, [true, "b"]);

														case 8:
															result += _context79.sent;
															return _context79.abrupt("break", 24);

														case 10:
															_context79.next = 12;
															return _streamline.await(_filename, 495, null, delay, 0, null, false, [true, "c"]);

														case 12:
															result += _context79.sent;

														case 13:
															result += "d";

														case 14:
															_context79.next = 16;
															return _streamline.await(_filename, 500, null, delay, 0, null, false, [true, "e"]);

														case 16:
															result += _context79.sent;
															return _context79.abrupt("break", 24);

														case 18:
															_context79.next = 20;
															return _streamline.await(_filename, 503, null, delay, 0, null, false, [true, "f"]);

														case 20:
															result += _context79.sent;

														case 21:
															_context79.next = 23;
															return _streamline.await(_filename, 505, null, delay, 0, null, false, [true, "g"]);

														case 23:
															result += _context79.sent;

														case 24:
															return _context79.abrupt("return", result);

														case 25:
														case "end":
															return _context79.stop();
													}
												}
											}, _$$g$$3, this);
										}), 0, 2);
										_context80.next = 3;
										return _streamline.await(_filename, 510, null, g, 0, null, false, [true, 0]);

									case 3:
										_context80.t0 = _context80.sent;
										_context80.next = 6;
										return _streamline.await(_filename, 510, null, g, 0, null, false, [true, 1]);

									case 6:
										_context80.t1 = _context80.sent;
										_context80.t2 = _context80.t0 + _context80.t1;
										_context80.next = 10;
										return _streamline.await(_filename, 510, null, g, 0, null, false, [true, 2]);

									case 10:
										_context80.t3 = _context80.sent;
										_context80.t4 = _context80.t2 + _context80.t3;
										_context80.next = 14;
										return _streamline.await(_filename, 510, null, g, 0, null, false, [true, 3]);

									case 14:
										_context80.t5 = _context80.sent;
										_context80.t6 = _context80.t4 + _context80.t5;
										_context80.next = 18;
										return _streamline.await(_filename, 510, null, g, 0, null, false, [true, 4]);

									case 18:
										_context80.t7 = _context80.sent;
										_context80.t8 = _context80.t6 + _context80.t7;
										_context80.next = 22;
										return _streamline.await(_filename, 510, null, g, 0, null, false, [true, 5]);

									case 22:
										_context80.t9 = _context80.sent;
										_context80.t10 = _context80.t8 + _context80.t9;
										_context80.next = 26;
										return _streamline.await(_filename, 510, null, g, 0, null, false, [true, 6]);

									case 26:
										_context80.t11 = _context80.sent;
										_context80.t12 = _context80.t10 + _context80.t11;
										_context80.next = 30;
										return _streamline.await(_filename, 510, null, g, 0, null, false, [true, 7]);

									case 30:
										_context80.t13 = _context80.sent;
										return _context80.abrupt("return", _context80.t12 + _context80.t13);

									case 32:
									case "end":
										return _context80.stop();
								}
							}
						}, _$$f$$38, this);
					}), 0, 1), "/g/b/cde/de/de/e/fg/g");

				case 1:
				case "end":
					return _context81.stop();
			}
		}
	}, _$$$$38, this);
}), 0, 1));
asyncTest("this", 5, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$39(_83) {
	return regeneratorRuntime.wrap(function _$$$$39$(_context88) {
		while (1) {
			switch (_context88.prev = _context88.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$39(_84) {
						var O, delay2, o;
						return regeneratorRuntime.wrap(function _$$f$$39$(_context87) {
							while (1) {
								switch (_context87.prev = _context87.next) {
									case 0:
										O = function O(x) {
											this.x = x;
										};

										delay2 = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$delay2$$(val, _85) {
											return regeneratorRuntime.wrap(function _$$delay2$$$(_context82) {
												while (1) {
													switch (_context82.prev = _context82.next) {
														case 0:
															_context82.next = 2;
															return _streamline.await(_filename, 546, null, delay, 0, null, false, [true, val]);

														case 2:
															return _context82.abrupt("return", _context82.sent);

														case 3:
														case "end":
															return _context82.stop();
													}
												}
											}, _$$delay2$$, this);
										}), 1, 2);


										O.prototype.test1 = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$40(_86) {
											var self;
											return regeneratorRuntime.wrap(function _$$$$40$(_context83) {
												while (1) {
													switch (_context83.prev = _context83.next) {
														case 0:
															self = this;
															_context83.next = 3;
															return _streamline.await(_filename, 521, null, delay, 0, null, false, [true, this.x + 1]);

														case 3:
															this.x = _context83.sent;

															strictEqual(this, self);

														case 5:
														case "end":
															return _context83.stop();
													}
												}
											}, _$$$$40, this);
										}), 0, 1);
										O.prototype.test2 = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$41(_87) {
											var self;
											return regeneratorRuntime.wrap(function _$$$$41$(_context84) {
												while (1) {
													switch (_context84.prev = _context84.next) {
														case 0:
															self = this;
															_context84.prev = 1;
															_context84.next = 4;
															return _streamline.await(_filename, 527, null, delay, 0, null, false, [true, this.x + 1]);

														case 4:
															this.x = _context84.sent;

															strictEqual(this, self);
															_context84.next = 11;
															break;

														case 8:
															_context84.prev = 8;
															_context84.t0 = _context84["catch"](1);

															ok(false);

														case 11:
														case "end":
															return _context84.stop();
													}
												}
											}, _$$$$41, this, [[1, 8]]);
										}), 0, 1);
										O.prototype.test3 = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$42(_88) {
											var self;
											return regeneratorRuntime.wrap(function _$$$$42$(_context85) {
												while (1) {
													switch (_context85.prev = _context85.next) {
														case 0:
															self = this;
															_context85.prev = 1;
															_context85.next = 4;
															return _streamline.await(_filename, 536, null, delay, 0, null, false, [true, this.x + 1]);

														case 4:
															this.x = _context85.sent;

															throwError("test3");
															ok(false);
															_context85.next = 15;
															break;

														case 9:
															_context85.prev = 9;
															_context85.t0 = _context85["catch"](1);

															strictEqual(this, self);
															_context85.next = 14;
															return _streamline.await(_filename, 541, null, delay, 0, null, false, [true, this.x + 1]);

														case 14:
															this.x = _context85.sent;

														case 15:
														case "end":
															return _context85.stop();
													}
												}
											}, _$$$$42, this, [[1, 9]]);
										}), 0, 1);

										O.prototype.test4 = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$43(_89) {
											var self, v1, v2;
											return regeneratorRuntime.wrap(function _$$$$43$(_context86) {
												while (1) {
													switch (_context86.prev = _context86.next) {
														case 0:
															self = this;
															v1 = _streamline.future(_filename, 551, null, delay2, 1, null, false, [this.x + 1, false]);
															v2 = _streamline.future(_filename, 552, null, delay2, 1, null, false, [1, false]);
															_context86.next = 5;
															return _streamline.await(_filename, 553, null, v1, 0, null, false, [true]);

														case 5:
															_context86.t0 = _context86.sent;
															_context86.next = 8;
															return _streamline.await(_filename, 553, null, v2, 0, null, false, [true]);

														case 8:
															_context86.t1 = _context86.sent;
															this.x = _context86.t0 + _context86.t1;

															strictEqual(this, self);

														case 11:
														case "end":
															return _context86.stop();
													}
												}
											}, _$$$$43, this);
										}), 0, 1);
										o = new O(1);
										_context87.next = 9;
										return _streamline.await(_filename, 557, o, "test1", 0, null, false, [true]);

									case 9:
										_context87.next = 11;
										return _streamline.await(_filename, 558, o, "test2", 0, null, false, [true]);

									case 11:
										_context87.next = 13;
										return _streamline.await(_filename, 559, o, "test3", 0, null, false, [true]);

									case 13:
										_context87.next = 15;
										return _streamline.await(_filename, 560, o, "test4", 0, null, false, [true]);

									case 15:
										return _context87.abrupt("return", o.x);

									case 16:
									case "end":
										return _context87.stop();
								}
							}
						}, _$$f$$39, this);
					}), 0, 1), 7);

				case 1:
				case "end":
					return _context88.stop();
			}
		}
	}, _$$$$39, this);
}), 0, 1));
asyncTest("scoping", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$44(_90) {
	return regeneratorRuntime.wrap(function _$$$$44$(_context91) {
		while (1) {
			switch (_context91.prev = _context91.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$40(_91) {
						var test;
						return regeneratorRuntime.wrap(function _$$f$$40$(_context90) {
							while (1) {
								switch (_context90.prev = _context90.next) {
									case 0:
										test = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$test$$(_92) {
											var bar, foo;
											return regeneratorRuntime.wrap(function _$$test$$$(_context89) {
												while (1) {
													switch (_context89.prev = _context89.next) {
														case 0:
															bar = function bar() {
																return foo;
															};

															foo = "abc";
															_context89.next = 4;
															return _streamline.await(_filename, 573, null, delay, 0, null, false, [true]);

														case 4:
															foo = "xyz";
															return _context89.abrupt("return", bar);

														case 6:
														case "end":
															return _context89.stop();
													}
												}
											}, _$$test$$, this);
										}), 0, 1);
										_context90.next = 3;
										return _streamline.await(_filename, 578, null, test, 0, null, false, [true]);

									case 3:
										_context90.t0 = _context90.sent;
										return _context90.abrupt("return", (0, _context90.t0)());

									case 5:
									case "end":
										return _context90.stop();
								}
							}
						}, _$$f$$40, this);
					}), 0, 1), "xyz");

				case 1:
				case "end":
					return _context91.stop();
			}
		}
	}, _$$$$44, this);
}), 0, 1));
asyncTest("return undefined", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$45(_93) {
	return regeneratorRuntime.wrap(function _$$$$45$(_context94) {
		while (1) {
			switch (_context94.prev = _context94.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$41(_94) {
						var test;
						return regeneratorRuntime.wrap(function _$$f$$41$(_context93) {
							while (1) {
								switch (_context93.prev = _context93.next) {
									case 0:
										test = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$test$$2(_95) {
											return regeneratorRuntime.wrap(function _$$test$$2$(_context92) {
												while (1) {
													switch (_context92.prev = _context92.next) {
														case 0:
															_context92.next = 2;
															return _streamline.await(_filename, 584, null, delay, 0, null, false, [true]);

														case 2:
															return _context92.abrupt("return");

														case 3:
														case "end":
															return _context92.stop();
													}
												}
											}, _$$test$$2, this);
										}), 0, 1);
										_context93.next = 3;
										return _streamline.await(_filename, 588, null, test, 0, null, false, [true]);

									case 3:
										return _context93.abrupt("return", _context93.sent);

									case 4:
									case "end":
										return _context93.stop();
								}
							}
						}, _$$f$$41, this);
					}), 0, 1), undefined);

				case 1:
				case "end":
					return _context94.stop();
			}
		}
	}, _$$$$45, this);
}), 0, 1));
asyncTest("futures test", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$46(_96) {
	return regeneratorRuntime.wrap(function _$$$$46$(_context97) {
		while (1) {
			switch (_context97.prev = _context97.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$42(_97) {
						var delay2, a, b, c, d;
						return regeneratorRuntime.wrap(function _$$f$$42$(_context96) {
							while (1) {
								switch (_context96.prev = _context96.next) {
									case 0:
										delay2 = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$delay2$$2(val, _98) {
											return regeneratorRuntime.wrap(function _$$delay2$$2$(_context95) {
												while (1) {
													switch (_context95.prev = _context95.next) {
														case 0:
															_context95.next = 2;
															return _streamline.await(_filename, 594, null, delay, 0, null, false, [true, val]);

														case 2:
															return _context95.abrupt("return", _context95.sent);

														case 3:
														case "end":
															return _context95.stop();
													}
												}
											}, _$$delay2$$2, this);
										}), 1, 2);
										a = _streamline.future(_filename, 597, null, delay2, 1, null, false, ['a', false]);
										b = _streamline.future(_filename, 598, null, delay2, 1, null, false, ['b', false]);
										c = _streamline.future(_filename, 599, null, delay2, 1, null, false, ['c', false]);
										d = _streamline.future(_filename, 600, null, delay2, 1, null, false, ['d', false]);
										_context96.next = 7;
										return _streamline.await(_filename, 601, null, a, 0, null, false, [true]);

									case 7:
										_context96.t0 = _context96.sent;
										_context96.next = 10;
										return _streamline.await(_filename, 601, null, b, 0, null, false, [true]);

									case 10:
										_context96.t1 = _context96.sent;
										_context96.t2 = _context96.t0 + _context96.t1;
										_context96.next = 14;
										return _streamline.await(_filename, 601, null, d, 0, null, false, [true]);

									case 14:
										_context96.t3 = _context96.sent;
										_context96.t4 = _context96.t2 + _context96.t3;
										_context96.next = 18;
										return _streamline.await(_filename, 601, null, c, 0, null, false, [true]);

									case 18:
										_context96.t5 = _context96.sent;
										return _context96.abrupt("return", _context96.t4 + _context96.t5);

									case 20:
									case "end":
										return _context96.stop();
								}
							}
						}, _$$f$$42, this);
					}), 0, 1), "abdc");

				case 1:
				case "end":
					return _context97.stop();
			}
		}
	}, _$$$$46, this);
}), 0, 1));
asyncTest("last case without break", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$47(_99) {
	return regeneratorRuntime.wrap(function _$$$$47$(_context99) {
		while (1) {
			switch (_context99.prev = _context99.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$43(_100) {
						return regeneratorRuntime.wrap(function _$$f$$43$(_context98) {
							while (1) {
								switch (_context98.prev = _context98.next) {
									case 0:
										_context98.t0 = true;
										_context98.next = _context98.t0 === true ? 3 : 5;
										break;

									case 3:
										_context98.next = 5;
										return _streamline.await(_filename, 608, null, delay, 0, null, false, [true]);

									case 5:
										return _context98.abrupt("return", 1);

									case 6:
									case "end":
										return _context98.stop();
								}
							}
						}, _$$f$$43, this);
					}), 0, 1), 1);

				case 1:
				case "end":
					return _context99.stop();
			}
		}
	}, _$$$$47, this);
}), 0, 1));

asyncTest("async comma operator", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$48(_101) {
	return regeneratorRuntime.wrap(function _$$$$48$(_context101) {
		while (1) {
			switch (_context101.prev = _context101.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$44(_102) {
						var a;
						return regeneratorRuntime.wrap(function _$$f$$44$(_context100) {
							while (1) {
								switch (_context100.prev = _context100.next) {
									case 0:
										a = 4;
										a++;
										_context100.next = 4;
										return _streamline.await(_filename, 617, null, delay, 0, null, false, [true, 2 * a]);

									case 4:
										a = _context100.sent;
										_context100.next = 7;
										return _streamline.await(_filename, 617, null, delay, 0, null, false, [true, a + 1]);

									case 7:
										return _context100.abrupt("return", _context100.sent);

									case 8:
									case "end":
										return _context100.stop();
								}
							}
						}, _$$f$$44, this);
					}), 0, 1), 11);

				case 1:
				case "end":
					return _context101.stop();
			}
		}
	}, _$$$$48, this);
}), 0, 1));

asyncTest("async constructor", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$49(_103) {
	return regeneratorRuntime.wrap(function _$$$$49$(_context104) {
		while (1) {
			switch (_context104.prev = _context104.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$45(_104) {
						var Foo;
						return regeneratorRuntime.wrap(function _$$f$$45$(_context103) {
							while (1) {
								switch (_context103.prev = _context103.next) {
									case 0:
										Foo = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$Foo$$(val, _105) {
											return regeneratorRuntime.wrap(function _$$Foo$$$(_context102) {
												while (1) {
													switch (_context102.prev = _context102.next) {
														case 0:
															_context102.next = 2;
															return _streamline.await(_filename, 624, null, delay, 0, null, false, [true]);

														case 2:
															this.x = val;

														case 3:
														case "end":
															return _context102.stop();
													}
												}
											}, _$$Foo$$, this);
										}), 1, 2);

										Foo.prototype.y = function () {
											return this.x + 1;
										};
										_context103.next = 4;
										return _streamline.new(_filename, 630, Foo, 1)(5, true);

									case 4:
										return _context103.abrupt("return", _context103.sent.y());

									case 5:
									case "end":
										return _context103.stop();
								}
							}
						}, _$$f$$45, this);
					}), 0, 1), 6);

				case 1:
				case "end":
					return _context104.stop();
			}
		}
	}, _$$$$49, this);
}), 0, 1));

asyncTest("fibo false async", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$50(_106) {
	return regeneratorRuntime.wrap(function _$$$$50$(_context107) {
		while (1) {
			switch (_context107.prev = _context107.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$46(_107) {
						var fibo;
						return regeneratorRuntime.wrap(function _$$f$$46$(_context106) {
							while (1) {
								switch (_context106.prev = _context106.next) {
									case 0:
										fibo = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$fibo$$(_108, n) {
											return regeneratorRuntime.wrap(function _$$fibo$$$(_context105) {
												while (1) {
													switch (_context105.prev = _context105.next) {
														case 0:
															if (!(n > 1)) {
																	_context105.next = 10;
																	break;
																}

															_context105.next = 3;
															return _streamline.await(_filename, 637, null, fibo, 0, null, false, [true, n - 1]);

														case 3:
															_context105.t1 = _context105.sent;
															_context105.next = 6;
															return _streamline.await(_filename, 637, null, fibo, 0, null, false, [true, n - 2]);

														case 6:
															_context105.t2 = _context105.sent;
															_context105.t0 = _context105.t1 + _context105.t2;
															_context105.next = 11;
															break;

														case 10:
															_context105.t0 = 1;

														case 11:
															return _context105.abrupt("return", _context105.t0);

														case 12:
														case "end":
															return _context105.stop();
													}
												}
											}, _$$fibo$$, this);
										}), 0, 2);
										_context106.next = 3;
										return _streamline.await(_filename, 639, null, fibo, 0, null, false, [true, 16]);

									case 3:
										return _context106.abrupt("return", _context106.sent);

									case 4:
									case "end":
										return _context106.stop();
								}
							}
						}, _$$f$$46, this);
					}), 0, 1), 1597);

				case 1:
				case "end":
					return _context107.stop();
			}
		}
	}, _$$$$50, this);
}), 0, 1));

asyncTest("coffeescript wrapper 1", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$51(_109) {
	return regeneratorRuntime.wrap(function _$$$$51$(_context110) {
		while (1) {
			switch (_context110.prev = _context110.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$47(_110) {
						return regeneratorRuntime.wrap(function _$$f$$47$(_context109) {
							while (1) {
								switch (_context109.prev = _context109.next) {
									case 0:
										_context109.next = 2;
										return (/*#__PURE__*/regeneratorRuntime.mark(function _callee() {
												return regeneratorRuntime.wrap(function _callee$(_context108) {
													while (1) {
														switch (_context108.prev = _context108.next) {
															case 0:
																_context108.next = 2;
																return _streamline.await(_filename, 646, null, delay, 0, null, false, [true, "cs1"]);

															case 2:
																return _context108.abrupt("return", _context108.sent);

															case 3:
															case "end":
																return _context108.stop();
														}
													}
												}, _callee, this);
											})()
										);

									case 2:
										return _context109.abrupt("return", _context109.sent);

									case 3:
									case "end":
										return _context109.stop();
								}
							}
						}, _$$f$$47, this);
					}), 0, 1), "cs1");

				case 1:
				case "end":
					return _context110.stop();
			}
		}
	}, _$$$$51, this);
}), 0, 1));

asyncTest("coffeescript wrapper 2", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$52(_111) {
	return regeneratorRuntime.wrap(function _$$$$52$(_context113) {
		while (1) {
			switch (_context113.prev = _context113.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$48(_112) {
						return regeneratorRuntime.wrap(function _$$f$$48$(_context112) {
							while (1) {
								switch (_context112.prev = _context112.next) {
									case 0:
										_context112.next = 2;
										return (/*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
												return regeneratorRuntime.wrap(function _callee2$(_context111) {
													while (1) {
														switch (_context111.prev = _context111.next) {
															case 0:
																_context111.next = 2;
																return _streamline.await(_filename, 654, null, delay, 0, null, false, [true, "cs2"]);

															case 2:
																return _context111.abrupt("return", _context111.sent);

															case 3:
															case "end":
																return _context111.stop();
														}
													}
												}, _callee2, this);
											}).call(this)
										);

									case 2:
										return _context112.abrupt("return", _context112.sent);

									case 3:
									case "end":
										return _context112.stop();
								}
							}
						}, _$$f$$48, this);
					}), 0, 1), "cs2");

				case 1:
				case "end":
					return _context113.stop();
			}
		}
	}, _$$$$52, this);
}), 0, 1));

asyncTest("coffeescript wrapper 2b", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$53(_113) {
	return regeneratorRuntime.wrap(function _$$$$53$(_context116) {
		while (1) {
			switch (_context116.prev = _context116.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$49(_114) {
						var _this;

						return regeneratorRuntime.wrap(function _$$f$$49$(_context115) {
							while (1) {
								switch (_context115.prev = _context115.next) {
									case 0:
										_this = this;
										_context115.next = 3;
										return (/*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
												return regeneratorRuntime.wrap(function _callee3$(_context114) {
													while (1) {
														switch (_context114.prev = _context114.next) {
															case 0:
																_context114.next = 2;
																return _streamline.await(_filename, 663, null, delay, 0, null, false, [true, "cs2"]);

															case 2:
																return _context114.abrupt("return", _context114.sent);

															case 3:
															case "end":
																return _context114.stop();
														}
													}
												}, _callee3, this);
											}).call(_this)
										);

									case 3:
										return _context115.abrupt("return", _context115.sent);

									case 4:
									case "end":
										return _context115.stop();
								}
							}
						}, _$$f$$49, this);
					}), 0, 1), "cs2");

				case 1:
				case "end":
					return _context116.stop();
			}
		}
	}, _$$$$53, this);
}), 0, 1));

asyncTest("coffeescript wrapper 3", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$54(_115) {
	return regeneratorRuntime.wrap(function _$$$$54$(_context119) {
		while (1) {
			switch (_context119.prev = _context119.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$50(_116) {
						var _args118 = arguments;
						return regeneratorRuntime.wrap(function _$$f$$50$(_context118) {
							while (1) {
								switch (_context118.prev = _context118.next) {
									case 0:
										_context118.next = 2;
										return (/*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
												return regeneratorRuntime.wrap(function _callee4$(_context117) {
													while (1) {
														switch (_context117.prev = _context117.next) {
															case 0:
																_context117.next = 2;
																return _streamline.await(_filename, 671, null, delay, 0, null, false, [true, "cs3"]);

															case 2:
																return _context117.abrupt("return", _context117.sent);

															case 3:
															case "end":
																return _context117.stop();
														}
													}
												}, _callee4, this);
											}).apply(this, _args118)
										);

									case 2:
										return _context118.abrupt("return", _context118.sent);

									case 3:
									case "end":
										return _context118.stop();
								}
							}
						}, _$$f$$50, this);
					}), 0, 1), "cs3");

				case 1:
				case "end":
					return _context119.stop();
			}
		}
	}, _$$$$54, this);
}), 0, 1));

asyncTest("coffeescript wrapper 3b", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$55(_117) {
	return regeneratorRuntime.wrap(function _$$$$55$(_context122) {
		while (1) {
			switch (_context122.prev = _context122.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$51(_118) {
						var _this,
						    _args121 = arguments;

						return regeneratorRuntime.wrap(function _$$f$$51$(_context121) {
							while (1) {
								switch (_context121.prev = _context121.next) {
									case 0:
										_this = this;
										_context121.next = 3;
										return (/*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
												return regeneratorRuntime.wrap(function _callee5$(_context120) {
													while (1) {
														switch (_context120.prev = _context120.next) {
															case 0:
																_context120.next = 2;
																return _streamline.await(_filename, 680, null, delay, 0, null, false, [true, "cs3"]);

															case 2:
																return _context120.abrupt("return", _context120.sent);

															case 3:
															case "end":
																return _context120.stop();
														}
													}
												}, _callee5, this);
											}).apply(_this, _args121)
										);

									case 3:
										return _context121.abrupt("return", _context121.sent);

									case 4:
									case "end":
										return _context121.stop();
								}
							}
						}, _$$f$$51, this);
					}), 0, 1), "cs3");

				case 1:
				case "end":
					return _context122.stop();
			}
		}
	}, _$$$$55, this);
}), 0, 1));

asyncTest("sync try/catch in async", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$56(_119) {
	return regeneratorRuntime.wrap(function _$$$$56$(_context124) {
		while (1) {
			switch (_context124.prev = _context124.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$52(_120) {
						return regeneratorRuntime.wrap(function _$$f$$52$(_context123) {
							while (1) {
								switch (_context123.prev = _context123.next) {
									case 0:
										_context123.prev = 0;
										throw new Error("catch me");

									case 4:
										_context123.prev = 4;
										_context123.t0 = _context123["catch"](0);
										return _context123.abrupt("return", "got it");

									case 7:
									case "end":
										return _context123.stop();
								}
							}
						}, _$$f$$52, this, [[0, 4]]);
					}), 0, 1), "got it");

				case 1:
				case "end":
					return _context124.stop();
			}
		}
	}, _$$$$56, this);
}), 0, 1));

asyncTest("sync try/catch inside conditional", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$57(_121) {
	return regeneratorRuntime.wrap(function _$$$$57$(_context126) {
		while (1) {
			switch (_context126.prev = _context126.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$53(_122) {
						return regeneratorRuntime.wrap(function _$$f$$53$(_context125) {
							while (1) {
								switch (_context125.prev = _context125.next) {
									case 0:
										if (true) {
												try {} catch (ex) {}
											}

									case 1:
									case "end":
										return _context125.stop();
								}
							}
						}, _$$f$$53, this);
					}), 0, 1), undefined);

				case 1:
				case "end":
					return _context126.stop();
			}
		}
	}, _$$$$57, this);
}), 0, 1));

asyncTest("labelled break", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$58(_123) {
	return regeneratorRuntime.wrap(function _$$$$58$(_context128) {
		while (1) {
			switch (_context128.prev = _context128.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$54(_124) {
						var result, i, j;
						return regeneratorRuntime.wrap(function _$$f$$54$(_context127) {
							while (1) {
								switch (_context127.prev = _context127.next) {
									case 0:
										result = '';
										i = 1;

									case 2:
										if (!(i < 10)) {
												_context127.next = 40;
												break;
											}

										j = 5;

									case 4:
										if (!(j < 10)) {
												_context127.next = 34;
												break;
											}

										_context127.next = 7;
										return _streamline.await(_filename, 710, null, delay, 0, null, false, [true, result]);

									case 7:
										_context127.t0 = _context127.sent;
										result = _context127.t0 + '!';

										if (!(i == 1 && j == 7)) {
												_context127.next = 11;
												break;
											}

										return _context127.abrupt("break", 34);

									case 11:
										if (!(i == 2 && j == 7)) {
												_context127.next = 13;
												break;
											}

										return _context127.abrupt("break", 34);

									case 13:
										if (!(i == 3 && j == 7)) {
												_context127.next = 15;
												break;
											}

										return _context127.abrupt("continue", 31);

									case 15:
										if (!(i == 4 && j == 7)) {
												_context127.next = 17;
												break;
											}

										return _context127.abrupt("continue", 37);

									case 17:
										if (!(i == 5 && j == 7)) {
												_context127.next = 19;
												break;
											}

										return _context127.abrupt("break", 40);

									case 19:
										_context127.next = 21;
										return _streamline.await(_filename, 716, null, delay, 0, null, false, [true, result]);

									case 21:
										_context127.t1 = _context127.sent;
										_context127.next = 24;
										return _streamline.await(_filename, 716, null, delay, 0, null, false, [true, i]);

									case 24:
										_context127.t2 = _context127.sent;
										_context127.t3 = _context127.t1 + _context127.t2;
										_context127.next = 28;
										return _streamline.await(_filename, 716, null, delay, 0, null, false, [true, j]);

									case 28:
										_context127.t4 = _context127.sent;
										_context127.t5 = _context127.t3 + _context127.t4;
										result = _context127.t5 + '-';

									case 31:
										j++;
										_context127.next = 4;
										break;

									case 34:
										_context127.next = 36;
										return _streamline.await(_filename, 718, null, delay, 0, null, false, [true, '/']);

									case 36:
										result += _context127.sent;

									case 37:
										i++;
										_context127.next = 2;
										break;

									case 40:
										return _context127.abrupt("return", result);

									case 41:
									case "end":
										return _context127.stop();
								}
							}
						}, _$$f$$54, this);
					}), 0, 1), '!15-!16-!/!25-!26-!/!35-!36-!!38-!39-/!45-!46-!!55-!56-!');

				case 1:
				case "end":
					return _context128.stop();
			}
		}
	}, _$$$$58, this);
}), 0, 1));

/* this one raises a compile error in babel (normal) - we don't need it any more so nuke it
asyncTest("octal literal", 1, function(_) {
	evalTest(function f(_) {
		return 010;
	}, 8);
})
*/

asyncTest("typeof rewriting bug (fibers)", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$59(_125) {
	return regeneratorRuntime.wrap(function _$$$$59$(_context130) {
		while (1) {
			switch (_context130.prev = _context130.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$55(_126) {
						var hello;
						return regeneratorRuntime.wrap(function _$$f$$55$(_context129) {
							while (1) {
								switch (_context129.prev = _context129.next) {
									case 0:
										hello = "hello";
										return _context129.abrupt("return", typeof hello === "undefined" ? "undefined" : _typeof(hello));

									case 2:
									case "end":
										return _context129.stop();
								}
							}
						}, _$$f$$55, this);
					}), 0, 1), "string");

				case 1:
				case "end":
					return _context130.stop();
			}
		}
	}, _$$$$59, this);
}), 0, 1));

asyncTest("ASI problems", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$60(_127) {
	return regeneratorRuntime.wrap(function _$$$$60$(_context132) {
		while (1) {
			switch (_context132.prev = _context132.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$56(_128) {
						var s;
						return regeneratorRuntime.wrap(function _$$f$$56$(_context131) {
							while (1) {
								switch (_context131.prev = _context131.next) {
									case 0:
										s = "a";
										_context131.next = 3;
										return _streamline.await(_filename, 742, null, delay, 0, null, false, [true, s]);

									case 3:
										s = _context131.sent;
										_context131.next = 6;
										return _streamline.await(_filename, 743, null, delay, 0, null, false, [true, s]);

									case 6:
										s = _context131.sent;
										_context131.next = 9;
										return _streamline.await(_filename, 744, null, delay, 0, null, false, [true, s]);

									case 9:
										_context131.next = 11;
										return _streamline.await(_filename, 745, null, delay, 0, null, false, [true, s]);

									case 11:
										return _context131.abrupt("return", s);

									case 12:
									case "end":
										return _context131.stop();
								}
							}
						}, _$$f$$56, this);
					}), 0, 1), "a");

				case 1:
				case "end":
					return _context132.stop();
			}
		}
	}, _$$$$60, this);
}), 0, 1));

asyncTest("multiple results _", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$61(_129) {
	return regeneratorRuntime.wrap(function _$$$$61$(_context134) {
		while (1) {
			switch (_context134.prev = _context134.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$57(_130) {
						var results;
						return regeneratorRuntime.wrap(function _$$f$$57$(_context133) {
							while (1) {
								switch (_context133.prev = _context133.next) {
									case 0:
										_context133.next = 2;
										return _streamline.await(_filename, 762, null, twoResults, 2, null, false, ['abc', 'def', true]);

									case 2:
										results = _context133.sent;
										return _context133.abrupt("return", results);

									case 4:
									case "end":
										return _context133.stop();
								}
							}
						}, _$$f$$57, this);
					}), 0, 1), "abc");

				case 1:
				case "end":
					return _context134.stop();
			}
		}
	}, _$$$$61, this);
}), 0, 1));

asyncTest("multiple results [_]", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$62(_131) {
	return regeneratorRuntime.wrap(function _$$$$62$(_context136) {
		while (1) {
			switch (_context136.prev = _context136.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$58(_132) {
						var results;
						return regeneratorRuntime.wrap(function _$$f$$58$(_context135) {
							while (1) {
								switch (_context135.prev = _context135.next) {
									case 0:
										_context135.next = 2;
										return _streamline.await(_filename, 769, null, twoResults, 2, null, true, ['abc', 'def', true]);

									case 2:
										results = _context135.sent;
										return _context135.abrupt("return", results.join('-'));

									case 4:
									case "end":
										return _context135.stop();
								}
							}
						}, _$$f$$58, this);
					}), 0, 1), "abc-def");

				case 1:
				case "end":
					return _context136.stop();
			}
		}
	}, _$$$$62, this);
}), 0, 1));

asyncTest("multiple results with future", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$63(_133) {
	return regeneratorRuntime.wrap(function _$$$$63$(_context139) {
		while (1) {
			switch (_context139.prev = _context139.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$59(_134) {
						var wrapper, results;
						return regeneratorRuntime.wrap(function _$$f$$59$(_context138) {
							while (1) {
								switch (_context138.prev = _context138.next) {
									case 0:
										wrapper = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$wrapper$$(a, b, _135) {
											return regeneratorRuntime.wrap(function _$$wrapper$$$(_context137) {
												while (1) {
													switch (_context137.prev = _context137.next) {
														case 0:
															_context137.next = 2;
															return _streamline.await(_filename, 776, null, twoResults, 2, null, true, [a, b, true]);

														case 2:
															return _context137.abrupt("return", _context137.sent);

														case 3:
														case "end":
															return _context137.stop();
													}
												}
											}, _$$wrapper$$, this);
										}), 2, 3);
										_context138.next = 3;
										return _streamline.await(_filename, 777, null, _streamline.future(_filename, 777, null, wrapper, 2, null, false, ['abc', 'def', false]), 0, null, false, [true]);

									case 3:
										results = _context138.sent;
										return _context138.abrupt("return", results.join('-'));

									case 5:
									case "end":
										return _context138.stop();
								}
							}
						}, _$$f$$59, this);
					}), 0, 1), "abc-def");

				case 1:
				case "end":
					return _context139.stop();
			}
		}
	}, _$$$$63, this);
}), 0, 1));

asyncTest("multiple results synchronously", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$64(_136) {
	return regeneratorRuntime.wrap(function _$$$$64$(_context141) {
		while (1) {
			switch (_context141.prev = _context141.next) {
				case 0:
					evalTest(_streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$60(_137) {
						var results;
						return regeneratorRuntime.wrap(function _$$f$$60$(_context140) {
							while (1) {
								switch (_context140.prev = _context140.next) {
									case 0:
										_context140.next = 2;
										return _streamline.await(_filename, 784, null, twoResultsSync, 2, null, true, ['abc', 'def', true]);

									case 2:
										results = _context140.sent;
										return _context140.abrupt("return", results.join('-'));

									case 4:
									case "end":
										return _context140.stop();
								}
							}
						}, _$$f$$60, this);
					}), 0, 1), "abc-def");

				case 1:
				case "end":
					return _context141.stop();
			}
		}
	}, _$$$$64, this);
}), 0, 1));

asyncTest("this in futures", 2, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$65(_138) {
	var c;
	return regeneratorRuntime.wrap(function _$$$$65$(_context143) {
		while (1) {
			switch (_context143.prev = _context143.next) {
				case 0:
					c = {
						v: 1,
						test: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$test$$3(_139) {
							return regeneratorRuntime.wrap(function _$$test$$3$(_context142) {
								while (1) {
									switch (_context142.prev = _context142.next) {
										case 0:
											return _context142.abrupt("return", this.v);

										case 1:
										case "end":
											return _context142.stop();
									}
								}
							}, _$$test$$3, this);
						}), 0, 1)
					};
					_context143.t0 = strictEqual;
					_context143.next = 4;
					return _streamline.await(_filename, 794, c, "test", 0, null, false, [true]);

				case 4:
					_context143.t1 = _context143.sent;
					(0, _context143.t0)(_context143.t1, 1, "direct call");
					_context143.t2 = strictEqual;
					_context143.next = 9;
					return _streamline.await(_filename, 795, null, _streamline.future(_filename, 795, c, "test", 0, null, false, [false]), 0, null, false, [true]);

				case 9:
					_context143.t3 = _context143.sent;
					(0, _context143.t2)(_context143.t3, 1, "future call");

					start();

				case 12:
				case "end":
					return _context143.stop();
			}
		}
	}, _$$$$65, this);
}), 0, 1));

asyncTest("arity of async functions", 3, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$66(_140) {
	var f, g;
	return regeneratorRuntime.wrap(function _$$$$66$(_context146) {
		while (1) {
			switch (_context146.prev = _context146.next) {
				case 0:
					f = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$67(_141, a, b, c, d, e, f, g, h, i) {
						return regeneratorRuntime.wrap(function _$$$$67$(_context144) {
							while (1) {
								switch (_context144.prev = _context144.next) {
									case 0:
										return _context144.abrupt("return", a + b);

									case 1:
									case "end":
										return _context144.stop();
								}
							}
						}, _$$$$67, this);
					}), 0, 10);
					g = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$68(_142, a) {
						return regeneratorRuntime.wrap(function _$$$$68$(_context145) {
							while (1) {
								switch (_context145.prev = _context145.next) {
									case 0:
										_context145.next = 2;
										return _streamline.await(_filename, 801, null, f, 0, null, false, [true, 1, 2]);

									case 2:
										return _context145.abrupt("return", _context145.sent);

									case 3:
									case "end":
										return _context145.stop();
								}
							}
						}, _$$$$68, this);
					}), 0, 2);

					strictEqual(f.length, 10, "f.length === 10");
					strictEqual(g.length, 2, "g.length === 2");
					_context146.t0 = strictEqual;
					_context146.next = 7;
					return _streamline.await(_filename, 804, null, g, 0, null, false, [true]);

				case 7:
					_context146.t1 = _context146.sent;
					(0, _context146.t0)(_context146.t1, 3, "g(_) === 3");

					start();

				case 10:
				case "end":
					return _context146.stop();
			}
		}
	}, _$$$$66, this);
}), 0, 1));

asyncTest("futures on function(i, cb)", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$69(_143) {
	var f, fut;
	return regeneratorRuntime.wrap(function _$$$$69$(_context147) {
		while (1) {
			switch (_context147.prev = _context147.next) {
				case 0:
					f = function f(i, cb) {
						setTimeout(function () {
							cb(null, i + 1);
						}, 0);
					};

					fut = _streamline.future(_filename, 814, null, f, 1, null, false, [5, false]);
					_context147.t0 = strictEqual;
					_context147.next = 5;
					return _streamline.await(_filename, 815, null, fut, 0, null, false, [true]);

				case 5:
					_context147.t1 = _context147.sent;
					(0, _context147.t0)(_context147.t1, 6, "fut(_) === 6");

					start();

				case 8:
				case "end":
					return _context147.stop();
			}
		}
	}, _$$$$69, this);
}), 0, 1));

asyncTest("do while", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$70(_144) {
	var read, i, s, v;
	return regeneratorRuntime.wrap(function _$$$$70$(_context149) {
		while (1) {
			switch (_context149.prev = _context149.next) {
				case 0:
					read = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$read$$(_145) {
						return regeneratorRuntime.wrap(function _$$read$$$(_context148) {
							while (1) {
								switch (_context148.prev = _context148.next) {
									case 0:
										_context148.next = 2;
										return _streamline.await(_filename, 822, null, delay, 0, null, false, [true, ++i]);

									case 2:
										return _context148.abrupt("return", _context148.sent);

									case 3:
									case "end":
										return _context148.stop();
								}
							}
						}, _$$read$$, this);
					}), 0, 1);
					i = 0;
					s = "";
					_context149.next = 5;
					return _streamline.await(_filename, 825, null, read, 0, null, false, [true]);

				case 5:
					v = _context149.sent;

				case 6:
					s += v;

				case 7:
					_context149.next = 9;
					return _streamline.await(_filename, 828, null, read, 0, null, false, [true]);

				case 9:
					_context149.t0 = v = _context149.sent;

					if (_context149.t0 < 5) {
							_context149.next = 6;
							break;
						}

				case 11:
					strictEqual(s, "1234");
					start();

				case 13:
				case "end":
					return _context149.stop();
			}
		}
	}, _$$$$70, this);
}), 0, 1));

asyncTest("return undefined", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$71(_146) {
	var read, f;
	return regeneratorRuntime.wrap(function _$$$$71$(_context152) {
		while (1) {
			switch (_context152.prev = _context152.next) {
				case 0:
					read = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$read$$2(_147) {
						return regeneratorRuntime.wrap(function _$$read$$2$(_context150) {
							while (1) {
								switch (_context150.prev = _context150.next) {
									case 0:
										_context150.next = 2;
										return _streamline.await(_filename, 835, null, delay, 0, null, false, [true, 1]);

									case 2:
										return _context150.abrupt("return", _context150.sent);

									case 3:
									case "end":
										return _context150.stop();
								}
							}
						}, _$$read$$2, this);
					}), 0, 1);
					f = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$f$$61(_148) {
						return regeneratorRuntime.wrap(function _$$f$$61$(_context151) {
							while (1) {
								switch (_context151.prev = _context151.next) {
									case 0:
										_context151.next = 2;
										return _streamline.await(_filename, 838, null, read, 0, null, false, [true]);

									case 2:
									case "end":
										return _context151.stop();
								}
							}
						}, _$$f$$61, this);
					}), 0, 1);
					_context152.t0 = strictEqual;
					_context152.next = 5;
					return _streamline.await(_filename, 840, null, f, 0, null, false, [true]);

				case 5:
					_context152.t1 = _context152.sent;
					_context152.t2 = undefined;
					(0, _context152.t0)(_context152.t1, _context152.t2);

					start();

				case 9:
				case "end":
					return _context152.stop();
			}
		}
	}, _$$$$71, this);
}), 0, 1));

if (typeof Promise !== 'undefined') asyncTest("promises", 7, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$72(_149) {
	var test, p1, p2, p3, p4;
	return regeneratorRuntime.wrap(function _$$$$72$(_context154) {
		while (1) {
			switch (_context154.prev = _context154.next) {
				case 0:
					test = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$test$$4(v, _150) {
						return regeneratorRuntime.wrap(function _$$test$$4$(_context153) {
							while (1) {
								switch (_context153.prev = _context153.next) {
									case 0:
										_context153.next = 2;
										return _streamline.await(_filename, 846, null, delay, 0, null, false, [true, v]);

									case 2:
										return _context153.abrupt("return", _context153.sent);

									case 3:
									case "end":
										return _context153.stop();
								}
							}
						}, _$$test$$4, this);
					}), 1, 2);
					p1 = _streamline.future(_filename, 848, null, test, 1, null, false, ['a', false]).promise;
					p2 = _streamline.future(_filename, 849, null, test, 1, null, false, ['b', false]).promise;

					strictEqual(p1 && _typeof(p1.then), "function");
					strictEqual(p2 && _typeof(p2.then), "function");
					_context154.t0 = strictEqual;
					_context154.next = 8;
					return _streamline.await(_filename, 852, p1, "then", 0, 1, false, [true, true]);

				case 8:
					_context154.t1 = _context154.sent;
					(0, _context154.t0)(_context154.t1, 'a');
					_context154.t2 = strictEqual;
					_context154.next = 13;
					return _streamline.await(_filename, 853, p2, "then", 0, 1, false, [true, true]);

				case 13:
					_context154.t3 = _context154.sent;
					(0, _context154.t2)(_context154.t3, 'b');
					p3 = _streamline.future(_filename, 854, null, test, 1, null, false, ['c', false]).promise;

					strictEqual(p3 && _typeof(p3.then), "function");
					_context154.t4 = strictEqual;
					_context154.next = 20;
					return _streamline.await(_filename, 856, p3, "then", 0, 1, false, [true, true]);

				case 20:
					_context154.t5 = _context154.sent;
					(0, _context154.t4)(_context154.t5, 'c');
					_context154.prev = 22;
					p4 = _streamline.future(_filename, 858, null, delayFail, 0, null, false, [false, 'ERR d']).promise;
					_context154.next = 26;
					return _streamline.await(_filename, 859, p4, "then", 0, 1, false, [true, true]);

				case 26:
					ok(false);
					_context154.next = 32;
					break;

				case 29:
					_context154.prev = 29;
					_context154.t6 = _context154["catch"](22);

					strictEqual(_context154.t6, "ERR d");

				case 32:
					start();

				case 33:
				case "end":
					return _context154.stop();
			}
		}
	}, _$$$$72, this, [[22, 29]]);
}), 0, 1));

// issue #218
/* - not supported any more
if (!isFast) asyncTest("coffeescript default values", 8, function(_) {
	var got;
	var that = {};
	function fn(a, b, _, c) {
		if (a == null) {
			a = 2;
		}
		if (_ == null) {
			_ = function(e, r) {
				got = r;
			}
		}
		if (c == null) {
			c = 5;
		}
		strictEqual(this, that);
		return delay(_, "a=" + a + ", b=" + b + ", c=" + c);
	}
	var r = fn.call(that, 3, 1, _);
	strictEqual(r, "a=3, b=1, c=5");
	var f = fn.call(that);
	// result should only be ready after a tick
	strictEqual(f, undefined);
	strictEqual(got, undefined);
	delay(_);
	strictEqual(got, "a=2, b=undefined, c=5");
	fn.call(that, 8, 3);
	delay(_);
	strictEqual(got, "a=8, b=3, c=5");
	start();
});
*/

asyncTest("IIFE bug in fibers mode", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$73(_151) {
	var api;
	return regeneratorRuntime.wrap(function _$$$$73$(_context157) {
		while (1) {
			switch (_context157.prev = _context157.next) {
				case 0:
					_context157.next = 2;
					return (/*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
							var foo;
							return regeneratorRuntime.wrap(function _callee6$(_context156) {
								while (1) {
									switch (_context156.prev = _context156.next) {
										case 0:
											foo = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$foo$$(_152) {
												return regeneratorRuntime.wrap(function _$$foo$$$(_context155) {
													while (1) {
														switch (_context155.prev = _context155.next) {
															case 0:
																return _context155.abrupt("return", 1);

															case 1:
															case "end":
																return _context155.stop();
														}
													}
												}, _$$foo$$, this);
											}), 0, 1);
											return _context156.abrupt("return", {
												foo: foo
											});

										case 2:
										case "end":
											return _context156.stop();
									}
								}
							}, _callee6, this);
						})()
					);

				case 2:
					api = _context157.sent;
					_context157.t0 = strictEqual;
					_context157.next = 6;
					return _streamline.await(_filename, 911, api, "foo", 0, null, false, [true]);

				case 6:
					_context157.t1 = _context157.sent;
					(0, _context157.t0)(_context157.t1, 1);

					start();

				case 9:
				case "end":
					return _context157.stop();
			}
		}
	}, _$$$$73, this);
}), 0, 1));

asyncTest("futures on non-streamline APIs", 2, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$74(_153) {
	var nat, fut;
	return regeneratorRuntime.wrap(function _$$$$74$(_context158) {
		while (1) {
			switch (_context158.prev = _context158.next) {
				case 0:
					nat = function nat(cb) {
						setTimeout(function () {
							cb(null, "abc");
						});
					};

					fut = _streamline.future(_filename, 921, null, nat, 0, null, false, [false]);

					strictEqual(typeof fut === "undefined" ? "undefined" : _typeof(fut), "function");
					_context158.t0 = strictEqual;
					_context158.next = 6;
					return _streamline.await(_filename, 923, null, fut, 0, null, false, [true]);

				case 6:
					_context158.t1 = _context158.sent;
					(0, _context158.t0)(_context158.t1, "abc");

					start();

				case 9:
				case "end":
					return _context158.stop();
			}
		}
	}, _$$$$74, this);
}), 0, 1));

asyncTest("async arrow function", 4, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$75(_154) {
	var _this2 = this;

	var arrow;
	return regeneratorRuntime.wrap(function _$$$$75$(_context164) {
		while (1) {
			switch (_context164.prev = _context164.next) {
				case 0:
					arrow = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$76(_155, x) {
						return regeneratorRuntime.wrap(function _$$$$76$(_context159) {
							while (1) {
								switch (_context159.prev = _context159.next) {
									case 0:
										_context159.next = 2;
										return _streamline.await(_filename, 929, null, delay, 0, null, false, [true, 2 * x]);

									case 2:
										return _context159.abrupt("return", _context159.sent);

									case 3:
									case "end":
										return _context159.stop();
								}
							}
						}, _$$$$76, _this2);
					}), 0, 2);
					_context164.t0 = strictEqual;
					_context164.next = 4;
					return _streamline.await(_filename, 930, null, arrow, 0, null, false, [true, 3]);

				case 4:
					_context164.t1 = _context164.sent;
					(0, _context164.t0)(_context164.t1, 6);

					arrow = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$77(_156, x) {
						return regeneratorRuntime.wrap(function _$$$$77$(_context160) {
							while (1) {
								switch (_context160.prev = _context160.next) {
									case 0:
										_context160.next = 2;
										return _streamline.await(_filename, 931, null, delay, 0, null, false, [true, 2 * x]);

									case 2:
									case "end":
										return _context160.stop();
								}
							}
						}, _$$$$77, _this2);
					}), 0, 2);
					_context164.t2 = strictEqual;
					_context164.next = 10;
					return _streamline.await(_filename, 932, null, arrow, 0, null, false, [true, 3]);

				case 10:
					_context164.t3 = _context164.sent;
					_context164.t4 = undefined;
					(0, _context164.t2)(_context164.t3, _context164.t4);

					arrow = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$78(_157, x) {
						return regeneratorRuntime.wrap(function _$$$$78$(_context161) {
							while (1) {
								switch (_context161.prev = _context161.next) {
									case 0:
										_context161.next = 2;
										return _streamline.await(_filename, 933, null, delay, 0, null, false, [true, 2 * x]);

									case 2:
										return _context161.abrupt("return", _context161.sent);

									case 3:
									case "end":
										return _context161.stop();
								}
							}
						}, _$$$$78, _this2);
					}), 0, 2);
					_context164.t5 = strictEqual;
					_context164.next = 17;
					return _streamline.await(_filename, 934, null, arrow, 0, null, false, [true, 3]);

				case 17:
					_context164.t6 = _context164.sent;
					(0, _context164.t5)(_context164.t6, 6);
					_context164.next = 21;
					return _streamline.await(_filename, 935, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$79(_158) {
						var _this3 = this;

						return regeneratorRuntime.wrap(function _$$$$79$(_context163) {
							while (1) {
								switch (_context163.prev = _context163.next) {
									case 0:
										arrow = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$80(_159, x) {
											return regeneratorRuntime.wrap(function _$$$$80$(_context162) {
												while (1) {
													switch (_context162.prev = _context162.next) {
														case 0:
															_context162.next = 2;
															return _streamline.await(_filename, 936, null, delay, 0, null, false, [true, 2 * x]);

														case 2:
															_context162.t0 = _context162.sent;
															_context162.t1 = _this3;
															return _context162.abrupt("return", _context162.t0 + _context162.t1);

														case 5:
														case "end":
															return _context162.stop();
													}
												}
											}, _$$$$80, _this3);
										}), 0, 2);
										_context163.t0 = strictEqual;
										_context163.next = 4;
										return _streamline.await(_filename, 937, null, arrow, 0, null, false, [true, 3]);

									case 4:
										_context163.t1 = _context163.sent;
										(0, _context163.t0)(_context163.t1, 16);

									case 6:
									case "end":
										return _context163.stop();
								}
							}
						}, _$$$$79, this);
					}), 0, 1), "call", 1, null, false, [10, true]);

				case 21:
					start();

				case 22:
				case "end":
					return _context164.stop();
			}
		}
	}, _$$$$75, this);
}), 0, 1));

asyncTest("optimized array built-ins", 15, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$81(_160) {
	var _this4 = this;

	var that;
	return regeneratorRuntime.wrap(function _$$$$81$(_context173) {
		while (1) {
			switch (_context173.prev = _context173.next) {
				case 0:
					that = {};
					_context173.next = 3;
					return _streamline.await(_filename, 944, [5], "forEach_", 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$82(_161, elt) {
						return regeneratorRuntime.wrap(function _$$$$82$(_context165) {
							while (1) {
								switch (_context165.prev = _context165.next) {
									case 0:
										strictEqual(this, that, "forEach_ this");
										strictEqual(elt, 5, "forEach_ elt");

									case 2:
									case "end":
										return _context165.stop();
								}
							}
						}, _$$$$82, this);
					}), 0, 2), that]);

				case 3:
					_context173.next = 5;
					return _streamline.await(_filename, 948, [5], "map_", 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$83(_162, elt) {
						return regeneratorRuntime.wrap(function _$$$$83$(_context166) {
							while (1) {
								switch (_context166.prev = _context166.next) {
									case 0:
										strictEqual(this, that, "map_ this");
										strictEqual(elt, 5, "map_ elt");

									case 2:
									case "end":
										return _context166.stop();
								}
							}
						}, _$$$$83, this);
					}), 0, 2), that]);

				case 5:
					_context173.next = 7;
					return _streamline.await(_filename, 952, [5], "filter_", 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$84(_163, elt) {
						return regeneratorRuntime.wrap(function _$$$$84$(_context167) {
							while (1) {
								switch (_context167.prev = _context167.next) {
									case 0:
										strictEqual(this, that, "filter_ this");
										strictEqual(elt, 5, "filter_ elt");

									case 2:
									case "end":
										return _context167.stop();
								}
							}
						}, _$$$$84, this);
					}), 0, 2), that]);

				case 7:
					_context173.next = 9;
					return _streamline.await(_filename, 956, [5], "every_", 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$85(_164, elt) {
						return regeneratorRuntime.wrap(function _$$$$85$(_context168) {
							while (1) {
								switch (_context168.prev = _context168.next) {
									case 0:
										strictEqual(this, that, "every_ this");
										strictEqual(elt, 5, "every_ elt");

									case 2:
									case "end":
										return _context168.stop();
								}
							}
						}, _$$$$85, this);
					}), 0, 2), that]);

				case 9:
					_context173.next = 11;
					return _streamline.await(_filename, 960, [5], "some_", 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$86(_165, elt) {
						return regeneratorRuntime.wrap(function _$$$$86$(_context169) {
							while (1) {
								switch (_context169.prev = _context169.next) {
									case 0:
										strictEqual(this, that, "some_ this");
										strictEqual(elt, 5, "some_ elt");

									case 2:
									case "end":
										return _context169.stop();
								}
							}
						}, _$$$$86, this);
					}), 0, 2), that]);

				case 11:
					_context173.next = 13;
					return _streamline.await(_filename, 969, [5], "reduce_", 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$87(_166, r, elt) {
						return regeneratorRuntime.wrap(function _$$$$87$(_context170) {
							while (1) {
								switch (_context170.prev = _context170.next) {
									case 0:
										strictEqual(this, that, "reduce_ this");
										strictEqual(elt, 5, "reduce_ elt");

									case 2:
									case "end":
										return _context170.stop();
								}
							}
						}, _$$$$87, this);
					}), 0, 3), "result", that]);

				case 13:
					_context173.next = 15;
					return _streamline.await(_filename, 978, [5], "reduceRight_", 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$88(_167, r, elt) {
						return regeneratorRuntime.wrap(function _$$$$88$(_context171) {
							while (1) {
								switch (_context171.prev = _context171.next) {
									case 0:
										strictEqual(this, that, "reduceRight_ this");
										strictEqual(elt, 5, "reduceRight_ elt");

									case 2:
									case "end":
										return _context171.stop();
								}
							}
						}, _$$$$88, this);
					}), 0, 3), "result", that]);

				case 15:
					_context173.t0 = deepEqual;
					_context173.next = 18;
					return _streamline.await(_filename, 982, [6, 9, 7, 5, 8], "sort_", 0, null, false, [true, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$89(_168, v1, v2) {
						return regeneratorRuntime.wrap(function _$$$$89$(_context172) {
							while (1) {
								switch (_context172.prev = _context172.next) {
									case 0:
										return _context172.abrupt("return", v1 - v2);

									case 1:
									case "end":
										return _context172.stop();
								}
							}
						}, _$$$$89, _this4);
					}), 0, 3)]);

				case 18:
					_context173.t1 = _context173.sent;
					_context173.t2 = [5, 6, 7, 8, 9];
					(0, _context173.t0)(_context173.t1, _context173.t2);

					start();

				case 22:
				case "end":
					return _context173.stop();
			}
		}
	}, _$$$$81, this);
}), 0, 1));

asyncTest("async object method", 2, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$90(_169) {
	var obj;
	return regeneratorRuntime.wrap(function _$$$$90$(_context175) {
		while (1) {
			switch (_context175.prev = _context175.next) {
				case 0:
					obj = {
						method: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$91(_170, x) {
							return regeneratorRuntime.wrap(function _$$$$91$(_context174) {
								while (1) {
									switch (_context174.prev = _context174.next) {
										case 0:
											strictEqual(this, obj);_context174.next = 3;
											return _streamline.await(_filename, 988, null, delay, 0, null, false, [true, 2 * x]);

										case 3:
											return _context174.abrupt("return", _context174.sent);

										case 4:
										case "end":
											return _context174.stop();
									}
								}
							}, _$$$$91, this);
						}), 0, 2)
					};
					_context175.t0 = strictEqual;
					_context175.next = 4;
					return _streamline.await(_filename, 990, obj, "method", 0, null, false, [true, 7]);

				case 4:
					_context175.t1 = _context175.sent;
					(0, _context175.t0)(_context175.t1, 14);

					start();

				case 7:
				case "end":
					return _context175.stop();
			}
		}
	}, _$$$$90, this);
}), 0, 1));

},{"streamline-runtime/lib/callbacks/regenerator":3,"streamline-runtime/lib/callbacks/runtime":4}]},{},[9]);
