(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],2:[function(require,module,exports){
"use strict";

var regeneratorRuntime = typeof require === 'function' ? require("streamline-runtime/lib/callbacks/regenerator") : Streamline.require("streamline-runtime/lib/callbacks/regenerator");

var _streamline = typeof require === 'function' ? require("streamline-runtime/lib/callbacks/runtime") : Streamline.require("streamline-runtime/lib/callbacks/runtime");

var _filename = "builtins._js";
/**
 * Copyright (c) 2012 Bruno Jouhier <bruno.jouhier@sage.com>
 * MIT License
 */
/// !doc
/// 
/// # Streamline built-ins
///  
(function (exports) {
	var _parallel = function _parallel(options) {
		if (typeof options === "number") return options;
		if (typeof options.parallel === "number") return options.parallel;
		return options.parallel ? -1 : 1;
	};

	var VERSION = 3;

	var future = function future(fn, args, i) {
		var err,
		    result,
		    done,
		    q = [],
		    self = this;
		args = Array.prototype.slice.call(args);
		args[i] = function (e, r) {
			err = e;
			result = r;
			done = true;
			q && q.forEach(function (f) {
				f.call(self, e, r);
			});
			q = null;
		};
		fn.apply(this, args);
		return function F(cb) {
			if (!cb) return F;
			if (done) cb.call(self, err, result);else q.push(cb);
		};
	};

	var funnel = function funnel(max) {
		var _doOne = function _doOne() {
			var current = queue.shift();
			if (!current.cb) return current.fn();
			active++;
			current.fn(function (err, result) {
				active--;
				if (!closed) {
						current.cb(err, result);
						while (active < max && queue.length > 0) {
							_doOne();
						}
					}
			});
		};

		var overflow = function overflow(callback, fn) {
			queue.push({
				fn: fn,
				cb: callback
			});
		};

		max = max == null ? -1 : max;
		if (max === 0) max = exports.funnel.defaultSize;
		if (typeof max !== "number") throw new Error("bad max number: " + max);
		var queue = [],
		    active = 0,
		    closed = false;

		var fun = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$(_2, fn) {
			return regeneratorRuntime.wrap(function _$$$$$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							if (!(max < 0 || max === Infinity)) {
									_context.next = 4;
									break;
								}

							_context.next = 3;
							return _streamline.await(_filename, 64, null, fn, 0, null, false, [true]);

						case 3:
							return _context.abrupt("return", _context.sent);

						case 4:
							if (!(active < max)) {
									_context.next = 16;
									break;
								}

							active++;
							_context.prev = 6;
							_context.next = 9;
							return _streamline.await(_filename, 69, null, fn, 0, null, false, [true]);

						case 9:
							return _context.abrupt("return", _context.sent);

						case 10:
							_context.prev = 10;

							active--;
							while (active < max && queue.length > 0) {
								_doOne();
							}return _context.finish(10);

						case 14:
							_context.next = 19;
							break;

						case 16:
							_context.next = 18;
							return _streamline.await(_filename, 75, null, overflow, 0, null, false, [true, fn]);

						case 18:
							return _context.abrupt("return", _context.sent);

						case 19:
						case "end":
							return _context.stop();
					}
				}
			}, _$$$$, this, [[6,, 10, 14]]);
		}), 0, 2);

		fun.close = function () {
			queue = [];
			closed = true;
		};
		return fun;
	};
	funnel.defaultSize = 4;

	exports.funnel = funnel;

	if (Array.prototype.forEach_ && Array.prototype.forEach_.version_ >= VERSION) return;

	// bail out (silently) if JS does not support defineProperty (IE 8).
	try {
		Object.defineProperty({}, 'x', {});
	} catch (e) {
		return;
	}

	var has = Object.prototype.hasOwnProperty;

	/* eslint-disable no-extend-native */

	/// ## Array functions  
	/// 
	/// These functions are asynchronous variants of the EcmaScript 5 Array functions.
	/// 
	/// Common Rules: 
	/// 
	/// These variants are postfixed by an underscore.  
	/// They take the `_` callback as first parameter.  
	/// They pass the `_` callback as first argument to their `fn` callback.  
	/// Most of them have an optional `options` second parameter which controls the level of 
	/// parallelism. This `options` parameter may be specified either as `{ parallel: par }` 
	/// where `par` is an integer, or directly as a `par` integer value.  
	/// The `par` values are interpreted as follows:
	/// 
	/// * If absent or equal to 1, execution is sequential.
	/// * If > 1, at most `par` operations are parallelized.
	/// * if 0, a default number of operations are parallelized. 
	///   This default is defined by `flows.funnel.defaultSize` (4 by default - see `flows` module).
	/// * If < 0 or Infinity, operations are fully parallelized (no limit).
	/// 
	/// Functions:
	/// 
	/// * `array.forEach_(_[, options], fn[, thisObj])`  
	///   `fn` is called as `fn(_, elt, i, array)`.
	delete Array.prototype.forEach_;
	Object.defineProperty(Array.prototype, 'forEach_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$(_3, options, fn, thisObj) {
			var par, len, i;
			return regeneratorRuntime.wrap(function _$$value$$$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							if (typeof options === "function") {
									thisObj = fn;
									fn = options;
									options = 1;
								}
							par = _parallel(options);

							thisObj = thisObj !== undefined ? thisObj : this;
							len = this.length;

							if (!(par === 1 || len <= 1)) {
									_context2.next = 15;
									break;
								}

							i = 0;

						case 6:
							if (!(i < len)) {
									_context2.next = 13;
									break;
								}

							if (!has.call(this, i)) {
									_context2.next = 10;
									break;
								}

							_context2.next = 10;
							return _streamline.await(_filename, 148, fn, "call", 1, null, false, [thisObj, true, this[i], i, this]);

						case 10:
							i++;
							_context2.next = 6;
							break;

						case 13:
							_context2.next = 17;
							break;

						case 15:
							_context2.next = 17;
							return _streamline.await(_filename, 151, this, "map_", 0, null, false, [true, par, fn, thisObj]);

						case 17:
							return _context2.abrupt("return", this);

						case 18:
						case "end":
							return _context2.stop();
					}
				}
			}, _$$value$$, this);
		}), 0, 4)
	});
	Array.prototype.forEach_.version_ = VERSION;
	/// * `result = array.map_(_[, options], fn[, thisObj])`  
	///   `fn` is called as `fn(_, elt, i, array)`.
	delete Array.prototype.map_;
	Object.defineProperty(Array.prototype, 'map_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$2(_4, options, fn, thisObj) {
			var _this = this;

			var par, len, result, i, futures, j;
			return regeneratorRuntime.wrap(function _$$value$$2$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							if (typeof options === "function") {
									thisObj = fn;
									fn = options;
									options = 1;
								}
							par = _parallel(options);

							thisObj = thisObj !== undefined ? thisObj : this;
							len = this.length;

							if (!(par === 1 || len <= 1)) {
									_context4.next = 17;
									break;
								}

							result = new Array(len);
							i = 0;

						case 7:
							if (!(i < len)) {
									_context4.next = 15;
									break;
								}

							if (!has.call(this, i)) {
									_context4.next = 12;
									break;
								}

							_context4.next = 11;
							return _streamline.await(_filename, 177, fn, "call", 1, null, false, [thisObj, true, this[i], i, this]);

						case 11:
							result[i] = _context4.sent;

						case 12:
							i++;
							_context4.next = 7;
							break;

						case 15:
							_context4.next = 30;
							break;

						case 17:
							futures = [];

							i = 0;
							result = new Array(len);
							if (par <= 0) par = len;
							// cap with a hard limit to avoid memory issue with fibers
							par = Math.min(par, 256);
							for (j = 0; j < par; j++) {
								futures[j] = _streamline.future(_filename, 186, null, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$2(_5) {
									var k;
									return regeneratorRuntime.wrap(function _$$$$2$(_context3) {
										while (1) {
											switch (_context3.prev = _context3.next) {
												case 0:
													if (!(i < _this.length)) {
															_context3.next = 8;
															break;
														}

													k = i++;

													if (!has.call(_this, k)) {
															_context3.next = 6;
															break;
														}

													_context3.next = 5;
													return _streamline.await(_filename, 189, fn, "call", 1, null, false, [thisObj, true, _this[k], k, _this]);

												case 5:
													result[k] = _context3.sent;

												case 6:
													_context3.next = 0;
													break;

												case 8:
												case "end":
													return _context3.stop();
											}
										}
									}, _$$$$2, _this);
								}), 0, 1), 0, null, false, [false]);
							}j = 0;

						case 24:
							if (!(j < par)) {
									_context4.next = 30;
									break;
								}

							_context4.next = 27;
							return _streamline.await(_filename, 192, futures, j, 0, null, false, [true]);

						case 27:
							j++;
							_context4.next = 24;
							break;

						case 30:
							return _context4.abrupt("return", result);

						case 31:
						case "end":
							return _context4.stop();
					}
				}
			}, _$$value$$2, this);
		}), 0, 4)
	});
	/// * `result = array.filter_(_[, options], fn[, thisObj])`  
	///   `fn` is called as `fn(_, elt, i, array)`.
	delete Array.prototype.filter_;
	Object.defineProperty(Array.prototype, 'filter_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$3(_6, options, fn, thisObj) {
			var par, result, len, i, elt;
			return regeneratorRuntime.wrap(function _$$value$$3$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							if (typeof options === "function") {
									thisObj = fn;
									fn = options;
									options = 1;
								}
							par = _parallel(options);

							thisObj = thisObj !== undefined ? thisObj : this;
							result = [];
							len = this.length;

							if (!(par === 1 || len <= 1)) {
									_context6.next = 19;
									break;
								}

							i = 0;

						case 7:
							if (!(i < len)) {
									_context6.next = 17;
									break;
								}

							if (!has.call(this, i)) {
									_context6.next = 14;
									break;
								}

							elt = this[i];
							_context6.next = 12;
							return _streamline.await(_filename, 218, fn, "call", 1, null, false, [thisObj, true, elt, i, this]);

						case 12:
							if (!_context6.sent) {
									_context6.next = 14;
									break;
								}

							result.push(elt);

						case 14:
							i++;
							_context6.next = 7;
							break;

						case 17:
							_context6.next = 21;
							break;

						case 19:
							_context6.next = 21;
							return _streamline.await(_filename, 222, this, "map_", 0, null, false, [true, par, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$3(_7, elt, i, arr) {
								return regeneratorRuntime.wrap(function _$$$$3$(_context5) {
									while (1) {
										switch (_context5.prev = _context5.next) {
											case 0:
												_context5.next = 2;
												return _streamline.await(_filename, 223, fn, "call", 1, null, false, [thisObj, true, elt, i, arr]);

											case 2:
												if (!_context5.sent) {
														_context5.next = 4;
														break;
													}

												result.push(elt);

											case 4:
											case "end":
												return _context5.stop();
										}
									}
								}, _$$$$3, this);
							}), 0, 4), thisObj]);

						case 21:
							return _context6.abrupt("return", result);

						case 22:
						case "end":
							return _context6.stop();
					}
				}
			}, _$$value$$3, this);
		}), 0, 4)
	});
	/// * `bool = array.every_(_[, options], fn[, thisObj])`  
	///   `fn` is called as `fn(_, elt, i, array)`.
	delete Array.prototype.every_;
	Object.defineProperty(Array.prototype, 'every_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$4(_8, options, fn, thisObj) {
			var par, len, i, fun, futures;
			return regeneratorRuntime.wrap(function _$$value$$4$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							if (typeof options === "function") {
									thisObj = fn;
									fn = options;
									options = 1;
								}
							par = _parallel(options);

							thisObj = thisObj !== undefined ? thisObj : this;
							len = this.length;

							if (!(par === 1 || len <= 1)) {
									_context8.next = 19;
									break;
								}

							i = 0;

						case 6:
							if (!(i < len)) {
									_context8.next = 17;
									break;
								}

							_context8.t0 = has.call(this, i);

							if (!_context8.t0) {
									_context8.next = 12;
									break;
								}

							_context8.next = 11;
							return _streamline.await(_filename, 248, fn, "call", 1, null, false, [thisObj, true, this[i], i, this]);

						case 11:
							_context8.t0 = !_context8.sent;

						case 12:
							if (!_context8.t0) {
									_context8.next = 14;
									break;
								}

							return _context8.abrupt("return", false);

						case 14:
							i++;
							_context8.next = 6;
							break;

						case 17:
							_context8.next = 34;
							break;

						case 19:
							fun = funnel(par);
							futures = this.map(function (elt, i, arr) {
								return _streamline.future(_filename, 253, null, fun, 0, null, false, [false, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$4(_9) {
									return regeneratorRuntime.wrap(function _$$$$4$(_context7) {
										while (1) {
											switch (_context7.prev = _context7.next) {
												case 0:
													_context7.next = 2;
													return _streamline.await(_filename, 254, fn, "call", 1, null, false, [thisObj, true, elt, i, arr]);

												case 2:
													return _context7.abrupt("return", _context7.sent);

												case 3:
												case "end":
													return _context7.stop();
											}
										}
									}, _$$$$4, this);
								}), 0, 1)]);
							});
							i = 0;

						case 22:
							if (!(i < len)) {
									_context8.next = 34;
									break;
								}

							_context8.t1 = has.call(this, i);

							if (!_context8.t1) {
									_context8.next = 28;
									break;
								}

							_context8.next = 27;
							return _streamline.await(_filename, 258, futures, i, 0, null, false, [true]);

						case 27:
							_context8.t1 = !_context8.sent;

						case 28:
							if (!_context8.t1) {
									_context8.next = 31;
									break;
								}

							fun.close();
							return _context8.abrupt("return", false);

						case 31:
							i++;
							_context8.next = 22;
							break;

						case 34:
							return _context8.abrupt("return", true);

						case 35:
						case "end":
							return _context8.stop();
					}
				}
			}, _$$value$$4, this);
		}), 0, 4)
	});
	/// * `bool = array.some_(_[, options], fn[, thisObj])`  
	///   `fn` is called as `fn(_, elt, i, array)`.
	delete Array.prototype.some_;
	Object.defineProperty(Array.prototype, 'some_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$5(_10, options, fn, thisObj) {
			var par, len, i, fun, futures;
			return regeneratorRuntime.wrap(function _$$value$$5$(_context10) {
				while (1) {
					switch (_context10.prev = _context10.next) {
						case 0:
							if (typeof options === "function") {
									thisObj = fn;
									fn = options;
									options = 1;
								}
							par = _parallel(options);

							thisObj = thisObj !== undefined ? thisObj : this;
							len = this.length;

							if (!(par === 1 || len <= 1)) {
									_context10.next = 19;
									break;
								}

							i = 0;

						case 6:
							if (!(i < len)) {
									_context10.next = 17;
									break;
								}

							_context10.t0 = has.call(this, i);

							if (!_context10.t0) {
									_context10.next = 12;
									break;
								}

							_context10.next = 11;
							return _streamline.await(_filename, 285, fn, "call", 1, null, false, [thisObj, true, this[i], i, this]);

						case 11:
							_context10.t0 = _context10.sent;

						case 12:
							if (!_context10.t0) {
									_context10.next = 14;
									break;
								}

							return _context10.abrupt("return", true);

						case 14:
							i++;
							_context10.next = 6;
							break;

						case 17:
							_context10.next = 34;
							break;

						case 19:
							fun = funnel(par);
							futures = this.map(function (elt, i, arr) {
								return _streamline.future(_filename, 290, null, fun, 0, null, false, [false, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$5(_11) {
									return regeneratorRuntime.wrap(function _$$$$5$(_context9) {
										while (1) {
											switch (_context9.prev = _context9.next) {
												case 0:
													_context9.next = 2;
													return _streamline.await(_filename, 291, fn, "call", 1, null, false, [thisObj, true, elt, i, arr]);

												case 2:
													return _context9.abrupt("return", _context9.sent);

												case 3:
												case "end":
													return _context9.stop();
											}
										}
									}, _$$$$5, this);
								}), 0, 1)]);
							});
							i = 0;

						case 22:
							if (!(i < len)) {
									_context10.next = 34;
									break;
								}

							_context10.t1 = has.call(this, i);

							if (!_context10.t1) {
									_context10.next = 28;
									break;
								}

							_context10.next = 27;
							return _streamline.await(_filename, 295, futures, i, 0, null, false, [true]);

						case 27:
							_context10.t1 = _context10.sent;

						case 28:
							if (!_context10.t1) {
									_context10.next = 31;
									break;
								}

							fun.close();
							return _context10.abrupt("return", true);

						case 31:
							i++;
							_context10.next = 22;
							break;

						case 34:
							return _context10.abrupt("return", false);

						case 35:
						case "end":
							return _context10.stop();
					}
				}
			}, _$$value$$5, this);
		}), 0, 4)
	});
	/// * `result = array.reduce_(_, fn, val[, thisObj])`  
	///   `fn` is called as `val = fn(_, val, elt, i, array)`.
	delete Array.prototype.reduce_;
	Object.defineProperty(Array.prototype, 'reduce_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$6(_12, fn, v, thisObj) {
			var len, i;
			return regeneratorRuntime.wrap(function _$$value$$6$(_context11) {
				while (1) {
					switch (_context11.prev = _context11.next) {
						case 0:
							thisObj = thisObj !== undefined ? thisObj : this;
							len = this.length;
							i = 0;

						case 3:
							if (!(i < len)) {
									_context11.next = 11;
									break;
								}

							if (!has.call(this, i)) {
									_context11.next = 8;
									break;
								}

							_context11.next = 7;
							return _streamline.await(_filename, 315, fn, "call", 1, null, false, [thisObj, true, v, this[i], i, this]);

						case 7:
							v = _context11.sent;

						case 8:
							i++;
							_context11.next = 3;
							break;

						case 11:
							return _context11.abrupt("return", v);

						case 12:
						case "end":
							return _context11.stop();
					}
				}
			}, _$$value$$6, this);
		}), 0, 4)
	});
	/// * `result = array.reduceRight_(_, fn, val[, thisObj])`  
	///   `fn` is called as `val = fn(_, val, elt, i, array)`.
	delete Array.prototype.reduceRight_;
	Object.defineProperty(Array.prototype, 'reduceRight_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$7(_13, fn, v, thisObj) {
			var len, i;
			return regeneratorRuntime.wrap(function _$$value$$7$(_context12) {
				while (1) {
					switch (_context12.prev = _context12.next) {
						case 0:
							thisObj = thisObj !== undefined ? thisObj : this;
							len = this.length;
							i = len - 1;

						case 3:
							if (!(i >= 0)) {
									_context12.next = 11;
									break;
								}

							if (!has.call(this, i)) {
									_context12.next = 8;
									break;
								}

							_context12.next = 7;
							return _streamline.await(_filename, 331, fn, "call", 1, null, false, [thisObj, true, v, this[i], i, this]);

						case 7:
							v = _context12.sent;

						case 8:
							i--;
							_context12.next = 3;
							break;

						case 11:
							return _context12.abrupt("return", v);

						case 12:
						case "end":
							return _context12.stop();
					}
				}
			}, _$$value$$7, this);
		}), 0, 4)
	});

	/// * `array = array.sort_(_, compare [, beg [, end]])`  
	///   `compare` is called as `cmp = compare(_, elt1, elt2)`.  
	///   Note: this function _changes_ the original array (and returns it).
	delete Array.prototype.sort_;
	Object.defineProperty(Array.prototype, 'sort_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$value$$8(_14, compare, beg, end) {
			var _qsort, array;

			return regeneratorRuntime.wrap(function _$$value$$8$(_context14) {
				while (1) {
					switch (_context14.prev = _context14.next) {
						case 0:
							_qsort = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$_qsort$$(_15, beg, end) {
								var tmp, mid, o, nbeg, nend;
								return regeneratorRuntime.wrap(function _$$_qsort$$$(_context13) {
									while (1) {
										switch (_context13.prev = _context13.next) {
											case 0:
												if (!(beg >= end)) {
														_context13.next = 2;
														break;
													}

												return _context13.abrupt("return");

											case 2:
												if (!(end === beg + 1)) {
														_context13.next = 11;
														break;
													}

												_context13.next = 5;
												return _streamline.await(_filename, 355, null, compare, 0, null, false, [true, array[beg], array[end]]);

											case 5:
												_context13.t0 = _context13.sent;

												if (!(_context13.t0 > 0)) {
														_context13.next = 10;
														break;
													}

												tmp = array[beg];
												array[beg] = array[end];
												array[end] = tmp;

											case 10:
												return _context13.abrupt("return");

											case 11:
												mid = Math.floor((beg + end) / 2);
												o = array[mid];
												nbeg = beg;
												nend = end;

											case 15:
												if (!(nbeg <= nend)) {
														_context13.next = 39;
														break;
													}

											case 16:
												_context13.t1 = nbeg < end;

												if (!_context13.t1) {
														_context13.next = 22;
														break;
													}

												_context13.next = 20;
												return _streamline.await(_filename, 369, null, compare, 0, null, false, [true, array[nbeg], o]);

											case 20:
												_context13.t2 = _context13.sent;
												_context13.t1 = _context13.t2 < 0;

											case 22:
												if (!_context13.t1) {
														_context13.next = 26;
														break;
													}

												nbeg++;
												_context13.next = 16;
												break;

											case 26:
												_context13.t3 = beg < nend;

												if (!_context13.t3) {
														_context13.next = 32;
														break;
													}

												_context13.next = 30;
												return _streamline.await(_filename, 370, null, compare, 0, null, false, [true, o, array[nend]]);

											case 30:
												_context13.t4 = _context13.sent;
												_context13.t3 = _context13.t4 < 0;

											case 32:
												if (!_context13.t3) {
														_context13.next = 36;
														break;
													}

												nend--;

												_context13.next = 26;
												break;

											case 36:
												if (nbeg <= nend) {
														tmp = array[nbeg];
														array[nbeg] = array[nend];
														array[nend] = tmp;
														nbeg++;
														nend--;
													}
												_context13.next = 15;
												break;

											case 39:
												if (!(nbeg < end)) {
														_context13.next = 42;
														break;
													}

												_context13.next = 42;
												return _streamline.await(_filename, 381, null, _qsort, 0, null, false, [true, nbeg, end]);

											case 42:
												if (!(beg < nend)) {
														_context13.next = 45;
														break;
													}

												_context13.next = 45;
												return _streamline.await(_filename, 382, null, _qsort, 0, null, false, [true, beg, nend]);

											case 45:
											case "end":
												return _context13.stop();
										}
									}
								}, _$$_qsort$$, this);
							}), 0, 3);
							array = this;

							beg = beg || 0;
							end = end == null ? array.length - 1 : end;

							_context14.next = 6;
							return _streamline.await(_filename, 384, null, _qsort, 0, null, false, [true, beg, end]);

						case 6:
							return _context14.abrupt("return", array);

						case 7:
						case "end":
							return _context14.stop();
					}
				}
			}, _$$value$$8, this);
		}), 0, 4)
	});

	/// 
	/// ## Function functions  
	/// 
	/// * `result = fn.apply_(_, thisObj, args[, index])`  
	///   Helper to use `Function.prototype.apply` inside streamlined functions.  
	///   Equivalent to `result = fn.apply(thisObj, argsWith_)` where `argsWith_` is 
	///   a modified `args` in which the callback has been inserted at `index` 
	///   (at the end of the argument list if `index` is omitted or negative).
	delete Function.prototype.apply_;
	Object.defineProperty(Function.prototype, 'apply_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: function value(callback, thisObj, args, index) {
			args = Array.prototype.slice.call(args, 0);
			args.splice(index != null && index >= 0 ? index : args.length, 0, callback);
			return this.apply(thisObj, args);
		}
	});
})(typeof exports !== 'undefined' ? exports : Streamline.builtins = Streamline.builtins || {});
},{"streamline-runtime/lib/callbacks/regenerator":3,"streamline-runtime/lib/callbacks/runtime":4}],3:[function(require,module,exports){
"use strict";
module.exports = require("regenerator-runtime");
},{"regenerator-runtime":7}],4:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var regeneratorRuntime = typeof require === 'function' ? require('streamline-runtime/lib/callbacks/regenerator') : Streamline.require('streamline-runtime/lib/callbacks/regenerator');

var makeArgs = function makeArgs(i) {
	if (i <= 0) return "";
	return i > 1 ? makeArgs(i - 1) + ', a' + i : "a1";
};

var isGenerator = function isGenerator(val) {
	return val && (Object.prototype.toString.call(val) === "[object Generator]" || val.toString() === "[object Generator]");
};

var Frame = function Frame(file, line, fn) {
	this.fn = fn;
	this.file = file || "unknown";
	this.line = line || 0;
};

var pushFrame = function pushFrame(g) {
	if (glob.emitter) glob.emitter.emit('enter', g.frame);
	g.frame = g.frame || glob.frame;
	glob.frame = null;
};

var popFrame = function popFrame(g) {
	if (glob.emitter) glob.emitter.emit('exit', g.frame);
};

var run = function run(fn, g, cb, options) {
	var rsm = glob.resume;
	var emit = function emit(ev, g) {
		if (glob.emitter) glob.emitter.emit(ev, g.frame);
	};

	try {
		if (glob.frame) {
				g.frame = glob.frame;
				g.frame.g = g;
				glob.frame = null;
			} else {
				g.frame = new Frame("", 0, fn);
			}

		glob.resume = function (err, val) {
			if (glob.yielded) {
					emit("resume", g);
					glob.yielded = false;
				}
			while (g) {
				if (options && options.interrupt && options.interrupt()) return;
				try {
					// ES6 is deprecating send in favor of next. Following line makes us compatible with both.
					var send = g.send || g.next;
					var v = err ? g.throw(err) : send.call(g, val);
					val = v.value;
					err = null;
					// if we get PENDING, the current call completed with a pending I/O
					// resume will be called again when the I/O completes. So just save the context and return here.
					if (val === glob.PENDING) {
							if (!glob.yielded) {
									emit("yield", g);
									glob.yielded = true;
								}
							return;
						}
					// if we get [PENDING, e, r], the current call invoked its callback synchronously
					// we just loop to send/throw what the callback gave us.
					if (val && val[0] === glob.PENDING) {
							err = val[1];
							val = val[2];
							if (err) err = wrapError(err, g);
						}
						// else, if g is done we unwind it we send val to the parent generator (or through cb if we are at the top)
					else if (v.done) {
								//g.close();
								popFrame(g);
								g = g.prev;
							}
							// else if val is not a generator we have an error. Yield was not applied to a generators
						else {
								if (!isGenerator(val)) {
										throw new Error("invalid value was yielded. Expected a generator, got " + val);
									}
								// we got a new generator which means that g called another generator function
								// the new generator become current and we loop with g.send(undefined) (equiv to g.next()) 
								val.prev = g;
								g = val;
								pushFrame(g);
								val = undefined;
							}
				} catch (ex) {
					// the send/throw call failed.
					// we unwind the current generator and we rethrow into the parent generator (or through cb if at the top)
					//g.close();
					err = wrapError(ex, g);
					popFrame(g);
					g = g.prev;
					val = undefined;
				}
			}
			// we have exhausted the stack of generators. 
			// return the result or error through the callback.
			cb(err, val);
		};

		// start the resume loop
		glob.resume();
	} finally {
		// restore resume global
		glob.resume = rsm;
	}
};

var mapResults = function mapResults(options, args) {
	if (options && (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === "object") {
			if (options.returnArray) return args;
			if (options.returnObject) return options.returnObject.reduce(function (res, key, i) {
				res[key] = args[i];
				return res;
			}, {});
		}
	return args[0];
};

var invoke = function invoke(that, fn, args, index, index2, returnArray) {
	// Set things up so that call returns:
	// * PENDING if it completes with a pending I/O (and cb will be called later)
	// * [PENDING, e, r] if the callback is called synchronously.
	var result = glob.PENDING,
	    sync = true;
	var rsm = glob.resume;

	// convert args to array so that args.length gets correctly set if index is args.length
	args = Array.prototype.slice.call(args, 0);
	var cx = glob.context;
	var callback = function callback(e, r) {
		var oldContext = glob.context;
		var oldResume = glob.resume;
		try {
			if (returnArray) r = Array.prototype.slice.call(arguments, 1);
			glob.context = cx;
			glob.resume = rsm;
			if (sync) {
					result = [glob.PENDING, e, r];
				} else {
					glob.resume(e, r);
				}
		} finally {
			glob.context = oldContext;
			glob.resume = oldResume;
		}
	};
	if (index2 != null) {
			args[index] = function (r) {
				callback(null, r);
			};
			args[index2] = function (e) {
				callback(e);
			};
		} else {
			args[index] = callback;
		}
	fn.apply(that, args);
	sync = false;
	return result;
};

var makeUnstarror = function makeUnstarror(i) {
	return eval("(function(fn, options)" + unstarBody.replace(/function\s*F\(\)/, "function F(" + makeArgs(i) + ")") + ")");
};

var unstar = function unstar(fn, index, arity) {
	var i = arity != null ? arity : index == null ? fn.length + 1 : fn.length;
	var unstarror = unstarrors[i] || (unstarrors[i] = makeUnstarror(i));
	return unstarror(fn, index);
};

var wrapError = function wrapError(err, g) {
	if (!(err instanceof Error)) return err; // handle throw "some string";
	for (var gg = err.g; gg; gg = gg.prev) {
		if (gg === g) return err;
	}
	err = Object.create(err);
	err.g = g;
	if (!stackGetter) {
			Object.defineProperty(err, '__raw_stack__', {
				value: err.stack,
				enumerable: false,
				writable: false,
				configurable: false
			});
		}
	Object.defineProperty(err, 'stack', {
		get: function get() {
			return stackTrace(this);
		}
	});
	return err;
};

var stackTrace = function stackTrace(err) {
	var starredStack = function starredStack(e) {
		if (!e || !e.g) return "";
		var s = starredStack(Object.getPrototypeOf(e));
		for (var g = e.g; g.prev; g = g.prev) {
			var fname = g.prev.frame.name || "";
			var m = /\$\$(.*)\$\$/.exec(fname);
			if (m) fname = m[1];
			s += '    at ' + fname + ' (' + g.frame.file + ':' + g.frame.line + ')\n';
		}
		return s;
	};

	var extra;

	var rawStack = stackGetter ? stackGetter.call(err) : err.__raw_stack__;
	var m = / +at (GeneratorFunctionPrototype|(undefined|\[object Generator\])\.next|.*\.next \(<anonymous>\))/.exec(rawStack);
	var cut = m && m.index;
	if (cut < 0) cut = rawStack.indexOf('\n') + 1;
	var result = rawStack.substring(0, cut).replace(/\n.*regenerator.runtime.*/g, '') + //
	'    <<< yield stack >>>\n' + starredStack(err) + //
	'    <<< raw stack >>>\n' + rawStack.substring(cut);
	return result;
};

/**
 * Copyright (c) 2013 Bruno Jouhier <bruno.jouhier@sage.com>
 * MIT License
 */
var util = require('../util');
var glob = util.getGlobals('callbacks');

var counters = {
	slowAwait: 0,
	fastAwait: 0
};

if (typeof glob.yielded === "undefined") glob.yielded = true;
glob.PENDING = glob.PENDING || {};

Object.defineProperty(Frame.prototype, "name", {
	get: function get() {
		var fn = this.fn;
		return fn && (fn.__name__ || fn.name) || "unknown";
	}
});

Object.defineProperty(Frame.prototype, "info", {
	get: function get() {
		return this;
	}
});

var star = function star(fn, index, index2, returnArray) {
	return (/*#__PURE__*/regeneratorRuntime.mark(function _callee() {
			var _args = arguments;
			return regeneratorRuntime.wrap(function _callee$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							_context.next = 2;
							return invoke(this, fn, _args, index, index2, returnArray);

						case 2:
							return _context.abrupt('return', _context.sent);

						case 3:
						case 'end':
							return _context.stop();
					}
				}
			}, _callee, this);
		})
	);
};

var unstarTemplate = function unstarTemplate(fn, options) {
	var index = options && (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' ? options.callbackIndex : options;
	if (index == null) index = fn.length;

	var F = function F() {
		var cb = arguments[index];
		if (typeof cb !== "function") {
				if (glob.allowBooleanPlaceholders && typeof cb === 'boolean') {
						if (cb) cb = util.defaultCallback;else return exports.future("", 0, null, wrapper.bind(this), index)(arguments);
					} else throw util.argError(fn.name, index, "function", typeof cb === 'undefined' ? 'undefined' : _typeof(cb));
			}
		var g = fn.apply(this, arguments);
		run.call(this, fn, g, cb);
	};
	// track the original name for stack frames
	F.__name__ = fn.name;
	return F;
};

var unstarBody = unstarTemplate.toString();
unstarBody = unstarBody.substring(unstarBody.indexOf('{'));
var unstarrors = [];

var stackGetter = (Object.getOwnPropertyDescriptor(new Error(), 'stack') || {}).get;

var keys = [];

exports.await = function (file, line, object, property, index1, index2, returnArray, args) {
	var bound = typeof property !== "function";
	var fn = bound ? object[property] : property;
	glob.frame = new Frame(file, line, fn);
	var key = '';
	if (index2 == null && !returnArray) {
			key = keys[index1] || (keys[index1] = 'starred-' + index1);
			var wrapper = fn[key];
			if (wrapper) {
					counters.fastAwait++;
					if (Array.isArray(args)) return wrapper.apply(object, args);else return bound ? wrapper.bind(object) : wrapper;
				}
		}
	counters.slowAwait++;
	if (typeof fn !== "function") throw util.typeError("cannot call", "function", fn);
	wrapper = star(fn, index1, index2, returnArray);
	if (!bound && key) {
			fn[key] = wrapper;
		}
	if (Array.isArray(args)) return wrapper.apply(object, args);else return bound ? wrapper.bind(object) : wrapper;
};

exports.async = function (fn, index, arity) {
	if (typeof fn !== "function") throw util.typeError("cannot wrap function", "function", fn);
	var unstarred = unstar(fn, index, arity);
	unstarred["starred-" + index] = fn;
	return unstarred;
};

exports.new = function (file, line, constructor, index) {
	if (typeof constructor !== "function") throw util.typeError("cannot instantiate", "function", constructor);
	glob.frame = new Frame(file, line, constructor);
	var starred = star(constructor, index);
	return (/*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
			var that,
			    _args2 = arguments;
			return regeneratorRuntime.wrap(function _callee2$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							that = Object.create(constructor.prototype);
							_context2.next = 3;
							return starred.apply(that, _args2);

						case 3:
							return _context2.abrupt('return', that);

						case 4:
						case 'end':
							return _context2.stop();
					}
				}
			}, _callee2, this);
		})
	);
};

exports.future = require('../future');
require('./builtins');
},{"../future":5,"../util":6,"./builtins":2,"streamline-runtime/lib/callbacks/regenerator":3}],5:[function(require,module,exports){
(function (setImmediate){
"use strict";

var util = require('./util');

module.exports = function (file, line, object, property, index, dummy1, dummy2, args) {
	var bound = typeof property !== "function";
	var fn = bound ? object[property] : property;
	var self = bound ? object : this;
	if (typeof fn !== "function") throw new Error("cannot create future", "function", fn);
	var result = function futured() {
		var err, result, done, q = [];
		var args = Array.prototype.slice.call(arguments);
		var callback = function (e, r) {
			//if (e) console.error(e);
			err = e;
			result = r;
			done = true;
			q && q.forEach(function (f) {
				if (sync) {
					setImmediate(function () {
						f.call(self, e, r);
					});
				} else {
					f.call(self, e, r);
				}
			});
			q = null;
		};
		args[index] = callback;
		var sync = true;
		fn.apply(self, args);
		sync = false;
		var future = function (cb) {
			if (typeof cb !== "function") throw argError(fn.name, index, "function", cb);
			if (done) {
				cb.call(self, err, result);
			}
			else q.push(cb);
		};
		// computed property so that we don't allocate promise if we don't need to
		Object.defineProperty(future, 'promise', {
			get: function () {
				return new Promise(function (resolve, reject) {
					if (done) {
						if (err) reject(err);
						else resolve(result);
					} else {
						q.push(function (e, r) {
							if (e) reject(e);
							else resolve(r);
						})
					}
				});
			}
		});
		return future;
	};
	return Array.isArray(args) ? result.apply(object, args) : result;
}

}).call(this,require("timers").setImmediate)
},{"./util":6,"timers":8}],6:[function(require,module,exports){
(function (process,global){
"use strict";
// colors package does not work in browser - fails on reference to node's `process` global
var idem = function (x) { return x; };
var colors;
if (typeof (process) !== 'undefined' && !process.browser) {
	try {
		colors = require(idem('colors'));
	} catch (ex) {
		// console.error(ex.stack);
	}
}
if (!colors) colors = ['black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white', 'gray'].reduce(function (r, c) {
	r[c] = idem;
	return r;
}, {});

function log(message) {
	console.error(colors.gray("[STREAMLINE-RUNTIME] " + message));
}
function warn(message) {
	console.error(colors.magenta("[STREAMLINE-RUNTIME] " + message));
}
function error(message) {
	console.error(colors.red("[STREAMLINE-RUNTIME] " + message));
}

function trace(obj) {
	if (obj instanceof TypeError) util.error(obj.stack);
	//else console.error(obj);
};

function typeName(val) {
	return val === null ? "null" : typeof val;
}

function typeError(message, expected, got) {
	var err = new TypeError(message + ": expected " + expected + ", got " + typeName(got));
	console.error(err.stack);
	throw err;
}

function argError(fname, index, expected, got) {
	return typeError("invalid argument " + index + " to function `" + fname + "`", expected, got);
}

function getGlobals(runtime) {
	var glob = typeof global === "object" ? global : window;
	var secret = "_20c7abceb95c4eb88b7ca1895b1170d1";
	var g = (glob[secret] = (glob[secret] || { context: {} }));
	if (runtime && g.runtime !== runtime) {
		if (g.runtime) console.warn("[STREAMLINE-RUNTIME] " + runtime + " runtime loaded on top of " + g.runtime);
		else g.runtime = runtime;
	}
	return g;
}

function defaultCallback(err) {
	if (err) throw err;
}

// fix names in stack traces
var origPrepareStackTrace = Error.prepareStackTrace;
if (origPrepareStackTrace) Error.prepareStackTrace = function (_, stack) {
	// eval stack frames from streamline-runtime fibers are botched: column number is 0, 
	// which causes an error in source-map-support.js / mapEvalOrigin.
	// So we filter them out.
	// We also filter out frames that streamline inserts between calls (fibers mode only).
	var canSkip = false;
	stack = stack.filter(function (frame) {
		var sourceName = frame.getFileName() || frame.getScriptNameOrSourceURL() || '';
		var isStreamline = /streamline-runtime.lib.fibers.runtime/.test(sourceName);
		if (!isStreamline) canSkip = true;
		if (canSkip && isStreamline) return false;
		var origin = frame.isEval() && frame.getEvalOrigin();
		return (!(origin && /\bstreamline-runtime\b/.test(origin)));
	});
	var result;
	try {
		result = origPrepareStackTrace.call(this, _, stack);
	} catch (ex) {
		result = "\n*** STACKTRACE PREPARE FAILED: " + ex.message + " ***\n" + stack.join('\n');
	}
	result = result.replace(/_\$\$(.*)\$\$\d*/g, function (all, x) { return x; })
		.replace(/Function\.(.*) \[as awaitWrapper-0\]/g, function (all, x) { return x; });
	return result;
};

function defaultRuntime() {
	var _defRT;
	return _defRT || (_defRT = (function () {
		try {
			require(idem('fibers'));
			return 'fibers';
		} catch (ex) { }
		try {
			eval("(function*(){})");
			return 'generators';
		} catch (ex) { }
		return "callbacks";
	})());
}

module.exports = {
	log: log,
	warn: warn,
	error: error,
	trace: trace,
	typeName: typeName,
	typeError: typeError,
	argError: argError,
	getGlobals: getGlobals,
	defaultCallback: defaultCallback,
	defaultRuntime: defaultRuntime,
};
var util = module.exports;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":1}],7:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

},{}],8:[function(require,module,exports){
(function (setImmediate,clearImmediate){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":1,"timers":8}],9:[function(require,module,exports){
(function (process){
"use strict";

var regeneratorRuntime = typeof require === 'function' ? require("streamline-runtime/lib/callbacks/regenerator") : Streamline.require("streamline-runtime/lib/callbacks/regenerator");

var _streamline = typeof require === 'function' ? require("streamline-runtime/lib/callbacks/runtime") : Streamline.require("streamline-runtime/lib/callbacks/runtime");

var _filename = "/Users/bruno/dev/streamline/test/common/stack-test._js";

var failAsync = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$failAsync$$(_2, code) {
	return regeneratorRuntime.wrap(function _$$failAsync$$$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					throw new Error(code);

				case 1:
				case "end":
					return _context.stop();
			}
		}
	}, _$$failAsync$$, this);
}), 0, 2);

var failSync = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$failSync$$(_3, code) {
	var fail;
	return regeneratorRuntime.wrap(function _$$failSync$$$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					fail = function fail(dummy) {
						throw new Error(code);
					};

					fail(0);

				case 2:
				case "end":
					return _context2.stop();
			}
		}
	}, _$$failSync$$, this);
}), 0, 2);

var A = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$A$$(_4, code) {
	var i;
	return regeneratorRuntime.wrap(function _$$A$$$(_context3) {
		while (1) {
			switch (_context3.prev = _context3.next) {
				case 0:
					if (!(code == 1)) {
							_context3.next = 3;
							break;
						}

					_context3.next = 3;
					return _streamline.await(_filename, 28, null, _fail, 0, null, false, [true, code]);

				case 3:
					if (!(code == 2)) {
							_context3.next = 6;
							break;
						}

					_context3.next = 6;
					return _streamline.await(_filename, 30, null, _fail, 0, null, false, [true, code]);

				case 6:
					_context3.next = 8;
					return _streamline.await(_filename, 31, null, nextTick, 0, null, false, [true]);

				case 8:
					if (!(code == 3)) {
							_context3.next = 11;
							break;
						}

					_context3.next = 11;
					return _streamline.await(_filename, 33, null, _fail, 0, null, false, [true, code]);

				case 11:
					i = 0;

				case 12:
					if (!(i < 6)) {
							_context3.next = 21;
							break;
						}

					if (!(code == i)) {
							_context3.next = 16;
							break;
						}

					_context3.next = 16;
					return _streamline.await(_filename, 36, null, _fail, 0, null, false, [true, code]);

				case 16:
					_context3.next = 18;
					return _streamline.await(_filename, 37, null, nextTick, 0, null, false, [true]);

				case 18:
					i++;
					_context3.next = 12;
					break;

				case 21:
					if (!(code == 6)) {
							_context3.next = 24;
							break;
						}

					_context3.next = 24;
					return _streamline.await(_filename, 40, null, _fail, 0, null, false, [true, code]);

				case 24:
					_context3.next = 26;
					return _streamline.await(_filename, 41, null, nextTick, 0, null, false, [true]);

				case 26:
					_context3.next = 28;
					return _streamline.await(_filename, 42, null, B, 0, null, false, [true, code]);

				case 28:
					_context3.next = 30;
					return _streamline.await(_filename, 43, null, nextTick, 0, null, false, [true]);

				case 30:
					return _context3.abrupt("return", "END");

				case 31:
				case "end":
					return _context3.stop();
			}
		}
	}, _$$A$$, this);
}), 0, 2);

var B = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$B$$(_5, code) {
	return regeneratorRuntime.wrap(function _$$B$$$(_context4) {
		while (1) {
			switch (_context4.prev = _context4.next) {
				case 0:
					if (!(code == 7)) {
							_context4.next = 3;
							break;
						}

					_context4.next = 3;
					return _streamline.await(_filename, 49, null, _fail, 0, null, false, [true, code]);

				case 3:
					_context4.next = 5;
					return _streamline.await(_filename, 50, null, C, 0, null, false, [true, code]);

				case 5:
					_context4.next = 7;
					return _streamline.await(_filename, 51, null, nextTick, 0, null, false, [true]);

				case 7:
					_context4.next = 9;
					return _streamline.await(_filename, 52, null, C, 0, null, false, [true, code]);

				case 9:
					_context4.next = 11;
					return _streamline.await(_filename, 53, null, D, 0, null, false, [true, code]);

				case 11:
				case "end":
					return _context4.stop();
			}
		}
	}, _$$B$$, this);
}), 0, 2);

var C = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$C$$(_6, code) {
	return regeneratorRuntime.wrap(function _$$C$$$(_context5) {
		while (1) {
			switch (_context5.prev = _context5.next) {
				case 0:
					if (!(code == 8)) {
							_context5.next = 3;
							break;
						}

					_context5.next = 3;
					return _streamline.await(_filename, 58, null, _fail, 0, null, false, [true, code]);

				case 3:
				case "end":
					return _context5.stop();
			}
		}
	}, _$$C$$, this);
}), 0, 2);

var D = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$D$$(_7, code) {
	return regeneratorRuntime.wrap(function _$$D$$$(_context6) {
		while (1) {
			switch (_context6.prev = _context6.next) {
				case 0:
					if (!(code == 9)) {
							_context6.next = 3;
							break;
						}

					_context6.next = 3;
					return _streamline.await(_filename, 63, null, _fail, 0, null, false, [true, code]);

				case 3:
				case "end":
					return _context6.stop();
			}
		}
	}, _$$D$$, this);
}), 0, 2);

var E = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$E$$(_8, code) {
	return regeneratorRuntime.wrap(function _$$E$$$(_context7) {
		while (1) {
			switch (_context7.prev = _context7.next) {
				case 0:
					_context7.prev = 0;
					_context7.next = 3;
					return _streamline.await(_filename, 68, null, _fail, 0, null, false, [true, code]);

				case 3:
					_context7.next = 18;
					break;

				case 5:
					_context7.prev = 5;
					_context7.t0 = _context7["catch"](0);

					if (!(code % 3 == 1)) {
							_context7.next = 12;
							break;
						}

					_context7.next = 10;
					return _streamline.await(_filename, 72, null, _fail, 0, null, false, [true, code]);

				case 10:
					_context7.next = 18;
					break;

				case 12:
					if (!(code % 3 == 2)) {
							_context7.next = 17;
							break;
						}

					_context7.next = 15;
					return _streamline.await(_filename, 74, null, A, 0, null, false, [true, code]);

				case 15:
					_context7.next = 18;
					break;

				case 17:
					return _context7.abrupt("return", "OK " + code);

				case 18:
				case "end":
					return _context7.stop();
			}
		}
	}, _$$E$$, this, [[0, 5]]);
}), 0, 2);

var F = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$F$$(_9, code) {
	var f1, f2;
	return regeneratorRuntime.wrap(function _$$F$$$(_context8) {
		while (1) {
			switch (_context8.prev = _context8.next) {
				case 0:
					f1 = _streamline.future(_filename, 81, null, A, 0, null, false, [false, code]);
					f2 = _streamline.future(_filename, 82, null, A, 0, null, false, [false, code + 1]);
					_context8.next = 4;
					return _streamline.await(_filename, 83, null, f1, 0, null, false, [true]);

				case 4:
					_context8.t0 = _context8.sent;
					_context8.t1 = _context8.t0 + " & ";
					_context8.next = 8;
					return _streamline.await(_filename, 83, null, f2, 0, null, false, [true]);

				case 8:
					_context8.t2 = _context8.sent;
					return _context8.abrupt("return", _context8.t1 + _context8.t2);

				case 10:
				case "end":
					return _context8.stop();
			}
		}
	}, _$$F$$, this);
}), 0, 2);

var G = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$G$$(_10, code) {
	return regeneratorRuntime.wrap(function _$$G$$$(_context9) {
		while (1) {
			switch (_context9.prev = _context9.next) {
				case 0:
					if (!(code == 5)) {
							_context9.next = 3;
							break;
						}

					_context9.next = 3;
					return _streamline.await(_filename, 88, null, _fail, 0, null, false, [true, code]);

				case 3:
					return _context9.abrupt("return", "" + code);

				case 4:
				case "end":
					return _context9.stop();
			}
		}
	}, _$$G$$, this);
}), 0, 2);

var H = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$H$$(_11, code) {
	return regeneratorRuntime.wrap(function _$$H$$$(_context10) {
		while (1) {
			switch (_context10.prev = _context10.next) {
				case 0:
					if (!(code % 2 == 0)) {
							_context10.next = 3;
							break;
						}

					_context10.next = 3;
					return _streamline.await(_filename, 94, null, nextTick, 0, null, false, [true]);

				case 3:
					_context10.next = 5;
					return _streamline.await(_filename, 95, null, G, 0, null, false, [true, code]);

				case 5:
					return _context10.abrupt("return", _context10.sent);

				case 6:
				case "end":
					return _context10.stop();
			}
		}
	}, _$$H$$, this);
}), 0, 2);

var I = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$I$$(_12, code) {
	var s, i;
	return regeneratorRuntime.wrap(function _$$I$$$(_context11) {
		while (1) {
			switch (_context11.prev = _context11.next) {
				case 0:
					s = "";
					i = 0;

				case 2:
					if (!(i < code)) {
							_context11.next = 9;
							break;
						}

					_context11.next = 5;
					return _streamline.await(_filename, 101, null, H, 0, null, false, [true, i]);

				case 5:
					s += _context11.sent;

				case 6:
					i++;
					_context11.next = 2;
					break;

				case 9:
					return _context11.abrupt("return", s);

				case 10:
				case "end":
					return _context11.stop();
			}
		}
	}, _$$I$$, this);
}), 0, 2);

var issue233 = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$issue233$$(_13, code) {
	var customThrow;
	return regeneratorRuntime.wrap(function _$$issue233$$$(_context12) {
		while (1) {
			switch (_context12.prev = _context12.next) {
				case 0:
					customThrow = function customThrow() {
						throw new Error("foo");
					};

					_context12.prev = 1;
					throw new Error("bar");

				case 5:
					_context12.prev = 5;
					_context12.t0 = _context12["catch"](1);

					customThrow();

				case 8:
				case "end":
					return _context12.stop();
			}
		}
	}, _$$issue233$$, this, [[1, 5]]);
}), 0, 2);

var T = _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$T$$(_14, fn, code, failFn) {
	var s, end;
	return regeneratorRuntime.wrap(function _$$T$$$(_context13) {
		while (1) {
			switch (_context13.prev = _context13.next) {
				case 0:
					_fail = failFn;
					s = "{";
					_context13.prev = 2;
					_context13.next = 5;
					return _streamline.await(_filename, 122, null, fn, 0, null, false, [true, code]);

				case 5:
					return _context13.abrupt("return", _context13.sent);

				case 8:
					_context13.prev = 8;
					_context13.t0 = _context13["catch"](2);
					s = _context13.t0.stack;

					s = s.split('\n').filter(function (l) {
						return l.indexOf('<<<') < 0 && !/\bstreamline-runtime.lib/.test(l);
					}).map(function (l) {
						l = l.replace(/\bFunction\.(\w+) \[as fiberized-\d+\]/, '$1');
						// We get Object.A in futures test because of a bind call. Ignore this difference.
						var m = /^\s+at (?:(?:Function|Object)\.)?(\w+)[^(]+\((?:[A-Z]:)?[^:]*:(\d+)/.exec(l);
						if (m) return m[1] + ":" + m[2];
						return l;
					}).join('/');
					end = s.indexOf('/T:');
					return _context13.abrupt("return", end < 0 ? s + "-- end frame missing" : s.substring(0, end));

				case 14:
				case "end":
					return _context13.stop();
			}
		}
	}, _$$T$$, this, [[2, 8]]);
}), 0, 4);

var stackEqual = function stackEqual(got, expect) {
	if (browser) {
			got = got.replace(/(Error: \d+)\/.*?\/([A-Z]:)/, "$1/**ignored**/$2");
			expect = expect.replace(/(Error: \d+)\/.*?\/([A-Z]:)/, "$1/**ignored**/$2");
		}
	strictEqual(got, expect, expect);
};

// WARNING: DO NOT INSERT COMMENTS OR REFORMAT OR ANYTHING
// Line numbers matter to this test!

QUnit.module(module.id);

var nextTick = function nextTick(cb) {
	setTimeout(function () {
		cb();
	}, 0);
};

var _fail;

var browser = typeof process === 'undefined' || process.browser;

Error.stackTraceLimit = 20;

// safari hack
var rawStack = new Error().stack ? function (raw) {
	return raw;
} : function () {
	return "raw stack unavailable";
};

asyncTest("stacks", 20, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$(_15) {
	return regeneratorRuntime.wrap(function _$$$$$(_context14) {
		while (1) {
			switch (_context14.prev = _context14.next) {
				case 0:
					_context14.t0 = stackEqual;
					_context14.next = 3;
					return _streamline.await(_filename, 160, null, T, 0, null, false, [true, A, 1, failAsync]);

				case 3:
					_context14.t1 = _context14.sent;
					_context14.t2 = rawStack("Error: 1/failAsync:15") + "/A:28";
					(0, _context14.t0)(_context14.t1, _context14.t2);
					_context14.t3 = stackEqual;
					_context14.next = 9;
					return _streamline.await(_filename, 161, null, T, 0, null, false, [true, A, 1, failSync]);

				case 9:
					_context14.t4 = _context14.sent;
					_context14.t5 = rawStack("Error: 1/fail:20/failSync:21") + "/A:28";
					(0, _context14.t3)(_context14.t4, _context14.t5);
					_context14.t6 = stackEqual;
					_context14.next = 15;
					return _streamline.await(_filename, 162, null, T, 0, null, false, [true, A, 2, failAsync]);

				case 15:
					_context14.t7 = _context14.sent;
					_context14.t8 = rawStack("Error: 2/failAsync:15") + "/A:30";
					(0, _context14.t6)(_context14.t7, _context14.t8);
					_context14.t9 = stackEqual;
					_context14.next = 21;
					return _streamline.await(_filename, 163, null, T, 0, null, false, [true, A, 2, failSync]);

				case 21:
					_context14.t10 = _context14.sent;
					_context14.t11 = rawStack("Error: 2/fail:20/failSync:21") + "/A:30";
					(0, _context14.t9)(_context14.t10, _context14.t11);
					_context14.t12 = stackEqual;
					_context14.next = 27;
					return _streamline.await(_filename, 164, null, T, 0, null, false, [true, A, 3, failAsync]);

				case 27:
					_context14.t13 = _context14.sent;
					_context14.t14 = rawStack("Error: 3/failAsync:15") + "/A:33";
					(0, _context14.t12)(_context14.t13, _context14.t14);
					_context14.t15 = stackEqual;
					_context14.next = 33;
					return _streamline.await(_filename, 165, null, T, 0, null, false, [true, A, 3, failSync]);

				case 33:
					_context14.t16 = _context14.sent;
					_context14.t17 = rawStack("Error: 3/fail:20/failSync:21") + "/A:33";
					(0, _context14.t15)(_context14.t16, _context14.t17);
					_context14.t18 = stackEqual;
					_context14.next = 39;
					return _streamline.await(_filename, 166, null, T, 0, null, false, [true, A, 4, failAsync]);

				case 39:
					_context14.t19 = _context14.sent;
					_context14.t20 = rawStack("Error: 4/failAsync:15") + "/A:36";
					(0, _context14.t18)(_context14.t19, _context14.t20);
					_context14.t21 = stackEqual;
					_context14.next = 45;
					return _streamline.await(_filename, 167, null, T, 0, null, false, [true, A, 4, failSync]);

				case 45:
					_context14.t22 = _context14.sent;
					_context14.t23 = rawStack("Error: 4/fail:20/failSync:21") + "/A:36";
					(0, _context14.t21)(_context14.t22, _context14.t23);
					_context14.t24 = stackEqual;
					_context14.next = 51;
					return _streamline.await(_filename, 168, null, T, 0, null, false, [true, A, 5, failAsync]);

				case 51:
					_context14.t25 = _context14.sent;
					_context14.t26 = rawStack("Error: 5/failAsync:15") + "/A:36";
					(0, _context14.t24)(_context14.t25, _context14.t26);
					_context14.t27 = stackEqual;
					_context14.next = 57;
					return _streamline.await(_filename, 169, null, T, 0, null, false, [true, A, 5, failSync]);

				case 57:
					_context14.t28 = _context14.sent;
					_context14.t29 = rawStack("Error: 5/fail:20/failSync:21") + "/A:36";
					(0, _context14.t27)(_context14.t28, _context14.t29);
					_context14.t30 = stackEqual;
					_context14.next = 63;
					return _streamline.await(_filename, 170, null, T, 0, null, false, [true, A, 6, failAsync]);

				case 63:
					_context14.t31 = _context14.sent;
					_context14.t32 = rawStack("Error: 6/failAsync:15") + "/A:40";
					(0, _context14.t30)(_context14.t31, _context14.t32);
					_context14.t33 = stackEqual;
					_context14.next = 69;
					return _streamline.await(_filename, 171, null, T, 0, null, false, [true, A, 6, failSync]);

				case 69:
					_context14.t34 = _context14.sent;
					_context14.t35 = rawStack("Error: 6/fail:20/failSync:21") + "/A:40";
					(0, _context14.t33)(_context14.t34, _context14.t35);
					_context14.t36 = stackEqual;
					_context14.next = 75;
					return _streamline.await(_filename, 172, null, T, 0, null, false, [true, A, 7, failAsync]);

				case 75:
					_context14.t37 = _context14.sent;
					_context14.t38 = rawStack("Error: 7/failAsync:15") + "/B:49/A:42";
					(0, _context14.t36)(_context14.t37, _context14.t38);
					_context14.t39 = stackEqual;
					_context14.next = 81;
					return _streamline.await(_filename, 173, null, T, 0, null, false, [true, A, 7, failSync]);

				case 81:
					_context14.t40 = _context14.sent;
					_context14.t41 = rawStack("Error: 7/fail:20/failSync:21") + "/B:49/A:42";
					(0, _context14.t39)(_context14.t40, _context14.t41);
					_context14.t42 = stackEqual;
					_context14.next = 87;
					return _streamline.await(_filename, 174, null, T, 0, null, false, [true, A, 8, failAsync]);

				case 87:
					_context14.t43 = _context14.sent;
					_context14.t44 = rawStack("Error: 8/failAsync:15") + "/C:58/B:50/A:42";
					(0, _context14.t42)(_context14.t43, _context14.t44);
					_context14.t45 = stackEqual;
					_context14.next = 93;
					return _streamline.await(_filename, 175, null, T, 0, null, false, [true, A, 8, failSync]);

				case 93:
					_context14.t46 = _context14.sent;
					_context14.t47 = rawStack("Error: 8/fail:20/failSync:21") + "/C:58/B:50/A:42";
					(0, _context14.t45)(_context14.t46, _context14.t47);
					_context14.t48 = stackEqual;
					_context14.next = 99;
					return _streamline.await(_filename, 176, null, T, 0, null, false, [true, A, 9, failAsync]);

				case 99:
					_context14.t49 = _context14.sent;
					_context14.t50 = rawStack("Error: 9/failAsync:15") + "/D:63/B:53/A:42";
					(0, _context14.t48)(_context14.t49, _context14.t50);
					_context14.t51 = stackEqual;
					_context14.next = 105;
					return _streamline.await(_filename, 177, null, T, 0, null, false, [true, A, 9, failSync]);

				case 105:
					_context14.t52 = _context14.sent;
					_context14.t53 = rawStack("Error: 9/fail:20/failSync:21") + "/D:63/B:53/A:42";
					(0, _context14.t51)(_context14.t52, _context14.t53);
					_context14.t54 = stackEqual;
					_context14.next = 111;
					return _streamline.await(_filename, 178, null, T, 0, null, false, [true, A, 10, failAsync]);

				case 111:
					_context14.t55 = _context14.sent;
					(0, _context14.t54)(_context14.t55, "END");
					_context14.t56 = stackEqual;
					_context14.next = 116;
					return _streamline.await(_filename, 179, null, T, 0, null, false, [true, A, 10, failSync]);

				case 116:
					_context14.t57 = _context14.sent;
					(0, _context14.t56)(_context14.t57, "END");

					start();

				case 119:
				case "end":
					return _context14.stop();
			}
		}
	}, _$$$$, this);
}), 0, 1));

asyncTest("catch", 20, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$2(_16) {
	return regeneratorRuntime.wrap(function _$$$$2$(_context15) {
		while (1) {
			switch (_context15.prev = _context15.next) {
				case 0:
					_context15.t0 = stackEqual;
					_context15.next = 3;
					return _streamline.await(_filename, 184, null, T, 0, null, false, [true, E, 1, failAsync]);

				case 3:
					_context15.t1 = _context15.sent;
					_context15.t2 = rawStack("Error: 1/failAsync:15") + "/E:72";
					(0, _context15.t0)(_context15.t1, _context15.t2);
					_context15.t3 = stackEqual;
					_context15.next = 9;
					return _streamline.await(_filename, 185, null, T, 0, null, false, [true, E, 1, failSync]);

				case 9:
					_context15.t4 = _context15.sent;
					_context15.t5 = rawStack("Error: 1/fail:20/failSync:21") + "/E:72";
					(0, _context15.t3)(_context15.t4, _context15.t5);
					_context15.t6 = stackEqual;
					_context15.next = 15;
					return _streamline.await(_filename, 186, null, T, 0, null, false, [true, E, 2, failAsync]);

				case 15:
					_context15.t7 = _context15.sent;
					_context15.t8 = rawStack("Error: 2/failAsync:15") + "/A:30/E:74";
					(0, _context15.t6)(_context15.t7, _context15.t8);
					_context15.t9 = stackEqual;
					_context15.next = 21;
					return _streamline.await(_filename, 187, null, T, 0, null, false, [true, E, 2, failSync]);

				case 21:
					_context15.t10 = _context15.sent;
					_context15.t11 = rawStack("Error: 2/fail:20/failSync:21") + "/A:30/E:74";
					(0, _context15.t9)(_context15.t10, _context15.t11);
					_context15.t12 = stackEqual;
					_context15.next = 27;
					return _streamline.await(_filename, 188, null, T, 0, null, false, [true, E, 3, failAsync]);

				case 27:
					_context15.t13 = _context15.sent;
					(0, _context15.t12)(_context15.t13, "OK 3");
					_context15.t14 = stackEqual;
					_context15.next = 32;
					return _streamline.await(_filename, 189, null, T, 0, null, false, [true, E, 3, failSync]);

				case 32:
					_context15.t15 = _context15.sent;
					(0, _context15.t14)(_context15.t15, "OK 3");
					_context15.t16 = stackEqual;
					_context15.next = 37;
					return _streamline.await(_filename, 190, null, T, 0, null, false, [true, E, 4, failAsync]);

				case 37:
					_context15.t17 = _context15.sent;
					_context15.t18 = rawStack("Error: 4/failAsync:15") + "/E:72";
					(0, _context15.t16)(_context15.t17, _context15.t18);
					_context15.t19 = stackEqual;
					_context15.next = 43;
					return _streamline.await(_filename, 191, null, T, 0, null, false, [true, E, 4, failSync]);

				case 43:
					_context15.t20 = _context15.sent;
					_context15.t21 = rawStack("Error: 4/fail:20/failSync:21") + "/E:72";
					(0, _context15.t19)(_context15.t20, _context15.t21);
					_context15.t22 = stackEqual;
					_context15.next = 49;
					return _streamline.await(_filename, 192, null, T, 0, null, false, [true, E, 5, failAsync]);

				case 49:
					_context15.t23 = _context15.sent;
					_context15.t24 = rawStack("Error: 5/failAsync:15") + "/A:36/E:74";
					(0, _context15.t22)(_context15.t23, _context15.t24);
					_context15.t25 = stackEqual;
					_context15.next = 55;
					return _streamline.await(_filename, 193, null, T, 0, null, false, [true, E, 5, failSync]);

				case 55:
					_context15.t26 = _context15.sent;
					_context15.t27 = rawStack("Error: 5/fail:20/failSync:21") + "/A:36/E:74";
					(0, _context15.t25)(_context15.t26, _context15.t27);
					_context15.t28 = stackEqual;
					_context15.next = 61;
					return _streamline.await(_filename, 194, null, T, 0, null, false, [true, E, 6, failAsync]);

				case 61:
					_context15.t29 = _context15.sent;
					(0, _context15.t28)(_context15.t29, "OK 6");
					_context15.t30 = stackEqual;
					_context15.next = 66;
					return _streamline.await(_filename, 195, null, T, 0, null, false, [true, E, 6, failSync]);

				case 66:
					_context15.t31 = _context15.sent;
					(0, _context15.t30)(_context15.t31, "OK 6");
					_context15.t32 = stackEqual;
					_context15.next = 71;
					return _streamline.await(_filename, 196, null, T, 0, null, false, [true, E, 7, failAsync]);

				case 71:
					_context15.t33 = _context15.sent;
					_context15.t34 = rawStack("Error: 7/failAsync:15") + "/E:72";
					(0, _context15.t32)(_context15.t33, _context15.t34);
					_context15.t35 = stackEqual;
					_context15.next = 77;
					return _streamline.await(_filename, 197, null, T, 0, null, false, [true, E, 7, failSync]);

				case 77:
					_context15.t36 = _context15.sent;
					_context15.t37 = rawStack("Error: 7/fail:20/failSync:21") + "/E:72";
					(0, _context15.t35)(_context15.t36, _context15.t37);
					_context15.t38 = stackEqual;
					_context15.next = 83;
					return _streamline.await(_filename, 198, null, T, 0, null, false, [true, E, 8, failAsync]);

				case 83:
					_context15.t39 = _context15.sent;
					_context15.t40 = rawStack("Error: 8/failAsync:15") + "/C:58/B:50/A:42/E:74";
					(0, _context15.t38)(_context15.t39, _context15.t40);
					_context15.t41 = stackEqual;
					_context15.next = 89;
					return _streamline.await(_filename, 199, null, T, 0, null, false, [true, E, 8, failSync]);

				case 89:
					_context15.t42 = _context15.sent;
					_context15.t43 = rawStack("Error: 8/fail:20/failSync:21") + "/C:58/B:50/A:42/E:74";
					(0, _context15.t41)(_context15.t42, _context15.t43);
					_context15.t44 = stackEqual;
					_context15.next = 95;
					return _streamline.await(_filename, 200, null, T, 0, null, false, [true, E, 9, failAsync]);

				case 95:
					_context15.t45 = _context15.sent;
					(0, _context15.t44)(_context15.t45, "OK 9");
					_context15.t46 = stackEqual;
					_context15.next = 100;
					return _streamline.await(_filename, 201, null, T, 0, null, false, [true, E, 9, failSync]);

				case 100:
					_context15.t47 = _context15.sent;
					(0, _context15.t46)(_context15.t47, "OK 9");
					_context15.t48 = stackEqual;
					_context15.next = 105;
					return _streamline.await(_filename, 202, null, T, 0, null, false, [true, E, 10, failAsync]);

				case 105:
					_context15.t49 = _context15.sent;
					_context15.t50 = rawStack("Error: 10/failAsync:15") + "/E:72";
					(0, _context15.t48)(_context15.t49, _context15.t50);
					_context15.t51 = stackEqual;
					_context15.next = 111;
					return _streamline.await(_filename, 203, null, T, 0, null, false, [true, E, 10, failSync]);

				case 111:
					_context15.t52 = _context15.sent;
					_context15.t53 = rawStack("Error: 10/fail:20/failSync:21") + "/E:72";
					(0, _context15.t51)(_context15.t52, _context15.t53);

					start();

				case 115:
				case "end":
					return _context15.stop();
			}
		}
	}, _$$$$2, this);
}), 0, 1));

asyncTest("futures", 20, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$3(_17) {
	return regeneratorRuntime.wrap(function _$$$$3$(_context16) {
		while (1) {
			switch (_context16.prev = _context16.next) {
				case 0:
					_context16.t0 = stackEqual;
					_context16.next = 3;
					return _streamline.await(_filename, 208, null, T, 0, null, false, [true, F, 1, failAsync]);

				case 3:
					_context16.t1 = _context16.sent;
					_context16.t2 = rawStack("Error: 1/failAsync:15") + "/A:28/F:83";
					(0, _context16.t0)(_context16.t1, _context16.t2);
					_context16.t3 = stackEqual;
					_context16.next = 9;
					return _streamline.await(_filename, 209, null, T, 0, null, false, [true, F, 1, failSync]);

				case 9:
					_context16.t4 = _context16.sent;
					_context16.t5 = rawStack("Error: 1/fail:20/failSync:21") + "/A:28/F:83";
					(0, _context16.t3)(_context16.t4, _context16.t5);
					_context16.t6 = stackEqual;
					_context16.next = 15;
					return _streamline.await(_filename, 210, null, T, 0, null, false, [true, F, 2, failAsync]);

				case 15:
					_context16.t7 = _context16.sent;
					_context16.t8 = rawStack("Error: 2/failAsync:15") + "/A:30/F:83";
					(0, _context16.t6)(_context16.t7, _context16.t8);
					_context16.t9 = stackEqual;
					_context16.next = 21;
					return _streamline.await(_filename, 211, null, T, 0, null, false, [true, F, 2, failSync]);

				case 21:
					_context16.t10 = _context16.sent;
					_context16.t11 = rawStack("Error: 2/fail:20/failSync:21") + "/A:30/F:83";
					(0, _context16.t9)(_context16.t10, _context16.t11);
					_context16.t12 = stackEqual;
					_context16.next = 27;
					return _streamline.await(_filename, 212, null, T, 0, null, false, [true, F, 3, failAsync]);

				case 27:
					_context16.t13 = _context16.sent;
					_context16.t14 = rawStack("Error: 3/failAsync:15") + "/A:33/F:83";
					(0, _context16.t12)(_context16.t13, _context16.t14);
					_context16.t15 = stackEqual;
					_context16.next = 33;
					return _streamline.await(_filename, 213, null, T, 0, null, false, [true, F, 3, failSync]);

				case 33:
					_context16.t16 = _context16.sent;
					_context16.t17 = rawStack("Error: 3/fail:20/failSync:21") + "/A:33/F:83";
					(0, _context16.t15)(_context16.t16, _context16.t17);
					_context16.t18 = stackEqual;
					_context16.next = 39;
					return _streamline.await(_filename, 214, null, T, 0, null, false, [true, F, 4, failAsync]);

				case 39:
					_context16.t19 = _context16.sent;
					_context16.t20 = rawStack("Error: 4/failAsync:15") + "/A:36/F:83";
					(0, _context16.t18)(_context16.t19, _context16.t20);
					_context16.t21 = stackEqual;
					_context16.next = 45;
					return _streamline.await(_filename, 215, null, T, 0, null, false, [true, F, 4, failSync]);

				case 45:
					_context16.t22 = _context16.sent;
					_context16.t23 = rawStack("Error: 4/fail:20/failSync:21") + "/A:36/F:83";
					(0, _context16.t21)(_context16.t22, _context16.t23);
					_context16.t24 = stackEqual;
					_context16.next = 51;
					return _streamline.await(_filename, 216, null, T, 0, null, false, [true, F, 5, failAsync]);

				case 51:
					_context16.t25 = _context16.sent;
					_context16.t26 = rawStack("Error: 5/failAsync:15") + "/A:36/F:83";
					(0, _context16.t24)(_context16.t25, _context16.t26);
					_context16.t27 = stackEqual;
					_context16.next = 57;
					return _streamline.await(_filename, 217, null, T, 0, null, false, [true, F, 5, failSync]);

				case 57:
					_context16.t28 = _context16.sent;
					_context16.t29 = rawStack("Error: 5/fail:20/failSync:21") + "/A:36/F:83";
					(0, _context16.t27)(_context16.t28, _context16.t29);
					_context16.t30 = stackEqual;
					_context16.next = 63;
					return _streamline.await(_filename, 218, null, T, 0, null, false, [true, F, 6, failAsync]);

				case 63:
					_context16.t31 = _context16.sent;
					_context16.t32 = rawStack("Error: 6/failAsync:15") + "/A:40/F:83";
					(0, _context16.t30)(_context16.t31, _context16.t32);
					_context16.t33 = stackEqual;
					_context16.next = 69;
					return _streamline.await(_filename, 219, null, T, 0, null, false, [true, F, 6, failSync]);

				case 69:
					_context16.t34 = _context16.sent;
					_context16.t35 = rawStack("Error: 6/fail:20/failSync:21") + "/A:40/F:83";
					(0, _context16.t33)(_context16.t34, _context16.t35);
					_context16.t36 = stackEqual;
					_context16.next = 75;
					return _streamline.await(_filename, 220, null, T, 0, null, false, [true, F, 7, failAsync]);

				case 75:
					_context16.t37 = _context16.sent;
					_context16.t38 = rawStack("Error: 7/failAsync:15") + "/B:49/A:42/F:83";
					(0, _context16.t36)(_context16.t37, _context16.t38);
					_context16.t39 = stackEqual;
					_context16.next = 81;
					return _streamline.await(_filename, 221, null, T, 0, null, false, [true, F, 7, failSync]);

				case 81:
					_context16.t40 = _context16.sent;
					_context16.t41 = rawStack("Error: 7/fail:20/failSync:21") + "/B:49/A:42/F:83";
					(0, _context16.t39)(_context16.t40, _context16.t41);
					_context16.t42 = stackEqual;
					_context16.next = 87;
					return _streamline.await(_filename, 222, null, T, 0, null, false, [true, F, 8, failAsync]);

				case 87:
					_context16.t43 = _context16.sent;
					_context16.t44 = rawStack("Error: 8/failAsync:15") + "/C:58/B:50/A:42/F:83";
					(0, _context16.t42)(_context16.t43, _context16.t44);
					_context16.t45 = stackEqual;
					_context16.next = 93;
					return _streamline.await(_filename, 223, null, T, 0, null, false, [true, F, 8, failSync]);

				case 93:
					_context16.t46 = _context16.sent;
					_context16.t47 = rawStack("Error: 8/fail:20/failSync:21") + "/C:58/B:50/A:42/F:83";
					(0, _context16.t45)(_context16.t46, _context16.t47);
					_context16.t48 = stackEqual;
					_context16.next = 99;
					return _streamline.await(_filename, 224, null, T, 0, null, false, [true, F, 9, failAsync]);

				case 99:
					_context16.t49 = _context16.sent;
					_context16.t50 = rawStack("Error: 9/failAsync:15") + "/D:63/B:53/A:42/F:83";
					(0, _context16.t48)(_context16.t49, _context16.t50);
					_context16.t51 = stackEqual;
					_context16.next = 105;
					return _streamline.await(_filename, 225, null, T, 0, null, false, [true, F, 9, failSync]);

				case 105:
					_context16.t52 = _context16.sent;
					_context16.t53 = rawStack("Error: 9/fail:20/failSync:21") + "/D:63/B:53/A:42/F:83";
					(0, _context16.t51)(_context16.t52, _context16.t53);
					_context16.t54 = stackEqual;
					_context16.next = 111;
					return _streamline.await(_filename, 226, null, T, 0, null, false, [true, F, 10, failAsync]);

				case 111:
					_context16.t55 = _context16.sent;
					(0, _context16.t54)(_context16.t55, "END & END");
					_context16.t56 = stackEqual;
					_context16.next = 116;
					return _streamline.await(_filename, 227, null, T, 0, null, false, [true, F, 10, failSync]);

				case 116:
					_context16.t57 = _context16.sent;
					(0, _context16.t56)(_context16.t57, "END & END");

					start();

				case 119:
				case "end":
					return _context16.stop();
			}
		}
	}, _$$$$3, this);
}), 0, 1));

asyncTest("loop", 8, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$4(_18) {
	return regeneratorRuntime.wrap(function _$$$$4$(_context17) {
		while (1) {
			switch (_context17.prev = _context17.next) {
				case 0:
					_context17.t0 = stackEqual;
					_context17.next = 3;
					return _streamline.await(_filename, 232, null, T, 0, null, false, [true, I, 4, failAsync]);

				case 3:
					_context17.t1 = _context17.sent;
					(0, _context17.t0)(_context17.t1, "0123");
					_context17.t2 = stackEqual;
					_context17.next = 8;
					return _streamline.await(_filename, 233, null, T, 0, null, false, [true, I, 4, failSync]);

				case 8:
					_context17.t3 = _context17.sent;
					(0, _context17.t2)(_context17.t3, "0123");
					_context17.t4 = stackEqual;
					_context17.next = 13;
					return _streamline.await(_filename, 234, null, T, 0, null, false, [true, I, 5, failAsync]);

				case 13:
					_context17.t5 = _context17.sent;
					(0, _context17.t4)(_context17.t5, "01234");
					_context17.t6 = stackEqual;
					_context17.next = 18;
					return _streamline.await(_filename, 235, null, T, 0, null, false, [true, I, 5, failSync]);

				case 18:
					_context17.t7 = _context17.sent;
					(0, _context17.t6)(_context17.t7, "01234");
					_context17.t8 = stackEqual;
					_context17.next = 23;
					return _streamline.await(_filename, 236, null, T, 0, null, false, [true, I, 6, failAsync]);

				case 23:
					_context17.t9 = _context17.sent;
					_context17.t10 = rawStack("Error: 5/failAsync:15") + "/G:88/H:95/I:101";
					(0, _context17.t8)(_context17.t9, _context17.t10);
					_context17.t11 = stackEqual;
					_context17.next = 29;
					return _streamline.await(_filename, 237, null, T, 0, null, false, [true, I, 6, failSync]);

				case 29:
					_context17.t12 = _context17.sent;
					_context17.t13 = rawStack("Error: 5/fail:20/failSync:21") + "/G:88/H:95/I:101";
					(0, _context17.t11)(_context17.t12, _context17.t13);
					_context17.t14 = stackEqual;
					_context17.next = 35;
					return _streamline.await(_filename, 238, null, T, 0, null, false, [true, I, 7, failAsync]);

				case 35:
					_context17.t15 = _context17.sent;
					_context17.t16 = rawStack("Error: 5/failAsync:15") + "/G:88/H:95/I:101";
					(0, _context17.t14)(_context17.t15, _context17.t16);
					_context17.t17 = stackEqual;
					_context17.next = 41;
					return _streamline.await(_filename, 239, null, T, 0, null, false, [true, I, 7, failSync]);

				case 41:
					_context17.t18 = _context17.sent;
					_context17.t19 = rawStack("Error: 5/fail:20/failSync:21") + "/G:88/H:95/I:101";
					(0, _context17.t17)(_context17.t18, _context17.t19);

					start();

				case 45:
				case "end":
					return _context17.stop();
			}
		}
	}, _$$$$4, this);
}), 0, 1));

if (!browser) asyncTest("issue233", 1, _streamline.async( /*#__PURE__*/regeneratorRuntime.mark(function _$$$$5(_19) {
	return regeneratorRuntime.wrap(function _$$$$5$(_context18) {
		while (1) {
			switch (_context18.prev = _context18.next) {
				case 0:
					_context18.t0 = stackEqual;
					_context18.next = 3;
					return _streamline.await(_filename, 244, null, T, 0, null, false, [true, issue233, 0, failSync]);

				case 3:
					_context18.t1 = _context18.sent;
					(0, _context18.t0)(_context18.t1, "Error: foo/customThrow:107/issue233:112");

					start();

				case 6:
				case "end":
					return _context18.stop();
			}
		}
	}, _$$$$5, this);
}), 0, 1));

}).call(this,require('_process'))
},{"_process":1,"streamline-runtime/lib/callbacks/regenerator":3,"streamline-runtime/lib/callbacks/runtime":4}]},{},[9]);
